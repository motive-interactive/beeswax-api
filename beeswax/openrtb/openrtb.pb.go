// Copyright 2015, Beeswax.IO Inc.
// Author: ramr@beeswax.com
//
// OpenRTB Protocol Buffer Spec.
// Note: This file is derived from google/openrtb project.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/openrtb/openrtb.proto

package openrtb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// OpenRTB Native 7.4: Common image asset element types of native advertising at
// the time of writing this spec. This list is non-exhaustive and intended to be
// extended by the buyers and sellers as the format evolves.
type NativeRequest_Asset_Image_ImageAssetType int32

const (
	//* Icon image.
	NativeRequest_Asset_Image_ICON NativeRequest_Asset_Image_ImageAssetType = 1
	//* Logo image for the brand/app.
	NativeRequest_Asset_Image_LOGO NativeRequest_Asset_Image_ImageAssetType = 2
	//* Large image preview for the ad.
	NativeRequest_Asset_Image_MAIN NativeRequest_Asset_Image_ImageAssetType = 3 // Exchange-specific values above 500.
)

// Enum value maps for NativeRequest_Asset_Image_ImageAssetType.
var (
	NativeRequest_Asset_Image_ImageAssetType_name = map[int32]string{
		1: "ICON",
		2: "LOGO",
		3: "MAIN",
	}
	NativeRequest_Asset_Image_ImageAssetType_value = map[string]int32{
		"ICON": 1,
		"LOGO": 2,
		"MAIN": 3,
	}
)

func (x NativeRequest_Asset_Image_ImageAssetType) Enum() *NativeRequest_Asset_Image_ImageAssetType {
	p := new(NativeRequest_Asset_Image_ImageAssetType)
	*p = x
	return p
}

func (x NativeRequest_Asset_Image_ImageAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeRequest_Asset_Image_ImageAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_proto_enumTypes[0].Descriptor()
}

func (NativeRequest_Asset_Image_ImageAssetType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_proto_enumTypes[0]
}

func (x NativeRequest_Asset_Image_ImageAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NativeRequest_Asset_Image_ImageAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Image_ImageAssetType(num)
	return nil
}

// Deprecated: Use NativeRequest_Asset_Image_ImageAssetType.Descriptor instead.
func (NativeRequest_Asset_Image_ImageAssetType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

//*
// OpenRTB Native 7.3: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers and sellers
// as the format evolves. An implementing exchange may not support all asset variants
// or introduce new ones unique to that system.
type NativeRequest_Asset_Data_DataAssetType int32

const (
	//* Sponsored By message where response should contain the brand name of the sponsor.
	NativeRequest_Asset_Data_SPONSORED NativeRequest_Asset_Data_DataAssetType = 1
	//* Descriptive text associated with the product or service being advertised.
	NativeRequest_Asset_Data_DESC NativeRequest_Asset_Data_DataAssetType = 2
	//*
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	NativeRequest_Asset_Data_RATING NativeRequest_Asset_Data_DataAssetType = 3
	//* Number of social ratings or "likes" of the product being offered to the user.
	NativeRequest_Asset_Data_LIKES NativeRequest_Asset_Data_DataAssetType = 4
	//* Number downloads/installs of this product.
	NativeRequest_Asset_Data_DOWNLOADS NativeRequest_Asset_Data_DataAssetType = 5
	//*
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	NativeRequest_Asset_Data_PRICE NativeRequest_Asset_Data_DataAssetType = 6
	//*
	// Sale price that can be used together with price to indicate a discounted price
	// compared to a regular price. Value should include currency symbol in localised format.
	NativeRequest_Asset_Data_SALEPRICE NativeRequest_Asset_Data_DataAssetType = 7
	//* Phone number.
	NativeRequest_Asset_Data_PHONE NativeRequest_Asset_Data_DataAssetType = 8
	//* Address.
	NativeRequest_Asset_Data_ADDRESS NativeRequest_Asset_Data_DataAssetType = 9
	//* Additional descriptive text associated with the product or service being advertised.
	NativeRequest_Asset_Data_DESC2 NativeRequest_Asset_Data_DataAssetType = 10
	//* Display URL for the text ad.
	NativeRequest_Asset_Data_DISPLAYURL NativeRequest_Asset_Data_DataAssetType = 11
	//* Text describing a "call to action" button for the destination URL.
	NativeRequest_Asset_Data_CTATEXT NativeRequest_Asset_Data_DataAssetType = 12 // Exchange-specific values above 500.
	// STORE bit for ADX NativeAdTemplate
	NativeRequest_Asset_Data_STORE NativeRequest_Asset_Data_DataAssetType = 500
)

// Enum value maps for NativeRequest_Asset_Data_DataAssetType.
var (
	NativeRequest_Asset_Data_DataAssetType_name = map[int32]string{
		1:   "SPONSORED",
		2:   "DESC",
		3:   "RATING",
		4:   "LIKES",
		5:   "DOWNLOADS",
		6:   "PRICE",
		7:   "SALEPRICE",
		8:   "PHONE",
		9:   "ADDRESS",
		10:  "DESC2",
		11:  "DISPLAYURL",
		12:  "CTATEXT",
		500: "STORE",
	}
	NativeRequest_Asset_Data_DataAssetType_value = map[string]int32{
		"SPONSORED":  1,
		"DESC":       2,
		"RATING":     3,
		"LIKES":      4,
		"DOWNLOADS":  5,
		"PRICE":      6,
		"SALEPRICE":  7,
		"PHONE":      8,
		"ADDRESS":    9,
		"DESC2":      10,
		"DISPLAYURL": 11,
		"CTATEXT":    12,
		"STORE":      500,
	}
)

func (x NativeRequest_Asset_Data_DataAssetType) Enum() *NativeRequest_Asset_Data_DataAssetType {
	p := new(NativeRequest_Asset_Data_DataAssetType)
	*p = x
	return p
}

func (x NativeRequest_Asset_Data_DataAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeRequest_Asset_Data_DataAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_proto_enumTypes[1].Descriptor()
}

func (NativeRequest_Asset_Data_DataAssetType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_proto_enumTypes[1]
}

func (x NativeRequest_Asset_Data_DataAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NativeRequest_Asset_Data_DataAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Data_DataAssetType(num)
	return nil
}

// Deprecated: Use NativeRequest_Asset_Data_DataAssetType.Descriptor instead.
func (NativeRequest_Asset_Data_DataAssetType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0, 2, 0}
}

//
// OpenRTB 3.3.1: The top-level bid request object.
type BidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Unique ID of the bid request, provided by the exchange.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Multiple impression auctions may be specified in a single bid request.
	// At least one impression is required for a valid bid request.
	Imp []*BidRequest_Impression `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	//
	// Information pertaining to a website.
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site" json:"site,omitempty"`
	//
	// Information pertaining to a mobile application.
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
	//
	// Information pertaining to the device.
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	//
	// Information known or derived about the human user of the device.
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	//*
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	Test *bool `protobuf:"varint,15,opt,name=test,def=0" json:"test,omitempty"`
	//
	// Auction Type. If “1”, then first price auction. If “2”, then second price
	// auction.
	// Additional auction types can be defined as per the exchange’s business
	// rules.
	// Exchange specific rules should be numbered over 500.
	At *int32 `protobuf:"varint,7,opt,name=at,def=2" json:"at,omitempty"`
	//
	// Maximum amount of time in milliseconds to submit a bid (e.g., 120 means the
	// bidder has 120ms to submit a bid before the auction is complete). If this
	// value never changes across an exchange, then the exchange can supply this
	// information offline.
	Tmax *int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	//
	// Array of buyer seats allowed to bid on this auction. Seats are an optional
	// feature of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only
	// advertisers using these exchange seats are allowed to bid on the
	// impressions in this auction.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat" json:"wseat,omitempty"`
	//
	// Flag to indicate whether Exchange can verify that all impressions offered
	// represent all of the impressions available in context (e.g., all
	// impressions available on the web page; all impressions available for a
	// video [pre, mid and postroll spots], etc.) to support road-blocking. A true
	// value should only be passed if the exchange is aware of all impressions in
	// context for the publisher. NO means the exchange cannot verify, and YES
	// means that all impressions represent all impressions available.
	Allimps *Flag `protobuf:"varint,10,opt,name=allimps,enum=openrtb.Flag,def=0" json:"allimps,omitempty"`
	//
	// Array of allowed currencies for bids on this bid request using ISO-4217 alphabetic codes.
	// If only one currency is used by the exchange, this parameter is not required.
	Cur []string `protobuf:"bytes,11,rep,name=cur" json:"cur,omitempty"`
	//
	// Blocked Advertiser Categories. Note that there is no existing categorization / taxonomy of
	// advertiser industries. However, as a substitute exchanges may decide to use IAB categories
	// as an approximation.
	Bcat []string `protobuf:"bytes,12,rep,name=bcat" json:"bcat,omitempty"`
	//
	// Array of strings of blocked top-level domains of advertisers.
	// For example, {“company1.com”, “company2.com”}.
	Badv []string `protobuf:"bytes,13,rep,name=badv" json:"badv,omitempty"`
	//
	// Block list of applications by their platform-specific exchange
	// independent application identifiers. On Android, these should
	// be bundle or package names (e.g., com.foo.mygame).
	// On iOS, these are numeric IDs.
	Bapp []string `protobuf:"bytes,16,rep,name=bapp" json:"bapp,omitempty"`
	//
	// Container for any legal, governmental or industry regulations in force for the request.
	Regs *BidRequest_Regulations `protobuf:"bytes,14,opt,name=regs" json:"regs,omitempty"`
	//
	// A Source object (Section 3.2.2) that provides data about the
	// inventory source and which entity makes the final decision.
	Source *BidRequest_Source    `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
	Ext    *BidRequestExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest fields.
const (
	Default_BidRequest_Test    = bool(false)
	Default_BidRequest_At      = int32(2)
	Default_BidRequest_Allimps = Flag_NO
)

func (x *BidRequest) Reset() {
	*x = BidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest) ProtoMessage() {}

func (x *BidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest.ProtoReflect.Descriptor instead.
func (*BidRequest) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0}
}

func (x *BidRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest) GetImp() []*BidRequest_Impression {
	if x != nil {
		return x.Imp
	}
	return nil
}

func (x *BidRequest) GetSite() *BidRequest_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *BidRequest) GetApp() *BidRequest_App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *BidRequest) GetDevice() *BidRequest_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *BidRequest) GetUser() *BidRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BidRequest) GetTest() bool {
	if x != nil && x.Test != nil {
		return *x.Test
	}
	return Default_BidRequest_Test
}

func (x *BidRequest) GetAt() int32 {
	if x != nil && x.At != nil {
		return *x.At
	}
	return Default_BidRequest_At
}

func (x *BidRequest) GetTmax() int32 {
	if x != nil && x.Tmax != nil {
		return *x.Tmax
	}
	return 0
}

func (x *BidRequest) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *BidRequest) GetAllimps() Flag {
	if x != nil && x.Allimps != nil {
		return *x.Allimps
	}
	return Default_BidRequest_Allimps
}

func (x *BidRequest) GetCur() []string {
	if x != nil {
		return x.Cur
	}
	return nil
}

func (x *BidRequest) GetBcat() []string {
	if x != nil {
		return x.Bcat
	}
	return nil
}

func (x *BidRequest) GetBadv() []string {
	if x != nil {
		return x.Badv
	}
	return nil
}

func (x *BidRequest) GetBapp() []string {
	if x != nil {
		return x.Bapp
	}
	return nil
}

func (x *BidRequest) GetRegs() *BidRequest_Regulations {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *BidRequest) GetSource() *BidRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BidRequest) GetExt() *BidRequestExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 4.3.1: top-level bid response object.
type BidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// ID of the bid request.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Array of seatbid objects.
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	//
	// Bid response ID to assist tracking for bidders.
	// This value is chosen by the bidder for cross-reference.
	Bidid *string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	//
	// Bid currency using ISO-4217 alphabetic codes.
	Cur *string `protobuf:"bytes,4,opt,name=cur,def=USD" json:"cur,omitempty"`
	//
	// This is an optional feature, which allows a bidder to set data in the exchange’s cookie.
	// The string may be in base85 cookie safe characters, and be in any format.
	// This may be useful for storing user features.
	// Note: Proper JSON encoding must be used to include “escaped” quotation marks.
	Customdata *string `protobuf:"bytes,5,opt,name=customdata" json:"customdata,omitempty"`
	//
	// Reason for not bidding.
	Nbr *Enums_BidResponse_NoBidReason `protobuf:"varint,6,opt,name=nbr,enum=openrtb.Enums_BidResponse_NoBidReason" json:"nbr,omitempty"`
	Ext *BidResponseExtensions         `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidResponse fields.
const (
	Default_BidResponse_Cur = string("USD")
)

func (x *BidResponse) Reset() {
	*x = BidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse) ProtoMessage() {}

func (x *BidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse.ProtoReflect.Descriptor instead.
func (*BidResponse) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{1}
}

func (x *BidResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if x != nil {
		return x.Seatbid
	}
	return nil
}

func (x *BidResponse) GetBidid() string {
	if x != nil && x.Bidid != nil {
		return *x.Bidid
	}
	return ""
}

func (x *BidResponse) GetCur() string {
	if x != nil && x.Cur != nil {
		return *x.Cur
	}
	return Default_BidResponse_Cur
}

func (x *BidResponse) GetCustomdata() string {
	if x != nil && x.Customdata != nil {
		return *x.Customdata
	}
	return ""
}

func (x *BidResponse) GetNbr() Enums_BidResponse_NoBidReason {
	if x != nil && x.Nbr != nil {
		return *x.Nbr
	}
	return Enums_BidResponse_UNKNOWN_ERROR
}

func (x *BidResponse) GetExt() *BidResponseExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//*
// OpenRTB Native 4.1: The Native Object defines the native advertising opportunity
// available for bid via this bid request. It must be included directly in the
// impression object if the impression offered for auction is a native ad format.
type NativeRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	//*
	// The Layout ID of the native ad unit.
	// This field is not required, but it's highly recommended.
	Layout *Enums_BidRequest_Impression_NativeRequest_LayoutId `protobuf:"varint,2,opt,name=layout,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_LayoutId" json:"layout,omitempty"`
	//*
	// The Ad unit ID of the native ad unit. This corresponds to one of IAB Core-6 native ad units.
	// This field is not required, but it's highly recommended.
	Adunit *Enums_BidRequest_Impression_NativeRequest_AdUnitId `protobuf:"varint,3,opt,name=adunit,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_AdUnitId" json:"adunit,omitempty"`
	//*
	// The number of identical placements in this Layout.
	Plcmtcnt *int32 `protobuf:"varint,4,opt,name=plcmtcnt,def=1" json:"plcmtcnt,omitempty"`
	//*
	// 0 for the first ad, 1 for the second ad, and so on.
	// This is not the sequence number of the content in the stream.
	Seq *int32 `protobuf:"varint,5,opt,name=seq,def=0" json:"seq,omitempty"`
	//*
	// Any bid must comply with the array of elements expressed by the Exchange.
	Assets []*NativeRequest_Asset `protobuf:"bytes,6,rep,name=assets" json:"assets,omitempty"`
	//*
	// The context in which the ad appears.
	Context *Enums_BidRequest_Impression_NativeRequest_Context `protobuf:"varint,7,opt,name=context,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_Context" json:"context,omitempty"`
	//*
	// A more detailed context in which the ad appears.
	Contextsubtype *Enums_BidRequest_Impression_NativeRequest_ContextSubtype `protobuf:"varint,8,opt,name=contextsubtype,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_ContextSubtype" json:"contextsubtype,omitempty"`
	//*
	// The design/format/layout of the ad unit being offered.
	Plcmttype *Enums_BidRequest_Impression_NativeRequest_PlacementType `protobuf:"varint,9,opt,name=plcmttype,enum=openrtb.Enums_BidRequest_Impression_NativeRequest_PlacementType" json:"plcmttype,omitempty"`
}

// Default values for NativeRequest fields.
const (
	Default_NativeRequest_Plcmtcnt = int32(1)
	Default_NativeRequest_Seq      = int32(0)
)

func (x *NativeRequest) Reset() {
	*x = NativeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest) ProtoMessage() {}

func (x *NativeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest.ProtoReflect.Descriptor instead.
func (*NativeRequest) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2}
}

var extRange_NativeRequest = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest
}

func (x *NativeRequest) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *NativeRequest) GetLayout() Enums_BidRequest_Impression_NativeRequest_LayoutId {
	if x != nil && x.Layout != nil {
		return *x.Layout
	}
	return Enums_BidRequest_Impression_NativeRequest_CONTENT_WALL
}

func (x *NativeRequest) GetAdunit() Enums_BidRequest_Impression_NativeRequest_AdUnitId {
	if x != nil && x.Adunit != nil {
		return *x.Adunit
	}
	return Enums_BidRequest_Impression_NativeRequest_PAID_SEARCH_UNIT
}

func (x *NativeRequest) GetPlcmtcnt() int32 {
	if x != nil && x.Plcmtcnt != nil {
		return *x.Plcmtcnt
	}
	return Default_NativeRequest_Plcmtcnt
}

func (x *NativeRequest) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return Default_NativeRequest_Seq
}

func (x *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *NativeRequest) GetContext() Enums_BidRequest_Impression_NativeRequest_Context {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return Enums_BidRequest_Impression_NativeRequest_CONTENT_CENTRIC
}

func (x *NativeRequest) GetContextsubtype() Enums_BidRequest_Impression_NativeRequest_ContextSubtype {
	if x != nil && x.Contextsubtype != nil {
		return *x.Contextsubtype
	}
	return Enums_BidRequest_Impression_NativeRequest_GENERAL_OR_MIXED
}

func (x *NativeRequest) GetPlcmttype() Enums_BidRequest_Impression_NativeRequest_PlacementType {
	if x != nil && x.Plcmttype != nil {
		return *x.Plcmttype
	}
	return Enums_BidRequest_Impression_NativeRequest_FEED
}

//*
// OpenRTB Native 5.2: The native response object is the top level JSON object which identifies
// an native response.
type NativeResponse struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	//*
	// List of native ad's assets.
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	//*
	// Destination Link.
	Link *NativeResponse_Link `protobuf:"bytes,3,req,name=link" json:"link,omitempty"`
	//*
	// Array of impression tracking URLs, expected to return a 1x1 image or 204 response -
	// typically only passed when using 3rd party trackers.
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers" json:"imptrackers,omitempty"`
	//*
	// Optional javascript impression tracker. Contains <script> tags to be executed at
	// impression time where it can be supported.
	Jstracker *string `protobuf:"bytes,5,opt,name=jstracker" json:"jstracker,omitempty"`
}

func (x *NativeResponse) Reset() {
	*x = NativeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse) ProtoMessage() {}

func (x *NativeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse.ProtoReflect.Descriptor instead.
func (*NativeResponse) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3}
}

var extRange_NativeResponse = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse
}

func (x *NativeResponse) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *NativeResponse) GetLink() *NativeResponse_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *NativeResponse) GetImptrackers() []string {
	if x != nil {
		return x.Imptrackers
	}
	return nil
}

func (x *NativeResponse) GetJstracker() string {
	if x != nil && x.Jstracker != nil {
		return *x.Jstracker
	}
	return ""
}

//
// OpenRTB 2.5: This object describes the nature and behavior of the entity
// that is the source of the bid request upstream from the exchange.
// The primary purpose of this object is to define post-auction or upstream
// decisioning when the exchange itself does not control the final decision.
// A common example of this is header bidding, but it can also apply to
// upstream server entities such as another RTB exchange, a mediation
// platform, or an ad server combines direct campaigns with 3rd party
// demand in decisioning.
type BidRequest_Source struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//
	// Entity responsible for the final impression sale decision,
	// where 0 = exchange, 1 = upstream source
	// RECOMMENDED by the OpenRTB specification.
	Fd *bool `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	//
	// Transaction ID that must be common across all participants in
	// this bid request (e.g., potentially multiple exchanges).
	// RECOMMENDED by the OpenRTB specification.
	Tid *string `protobuf:"bytes,2,opt,name=tid" json:"tid,omitempty"`
	//
	// Payment ID chain string containing embedded syntax
	// described in the TAG Payment ID Protocol v1.0.
	// RECOMMENDED by the OpenRTB specification.
	Pchain *string `protobuf:"bytes,3,opt,name=pchain" json:"pchain,omitempty"`
}

func (x *BidRequest_Source) Reset() {
	*x = BidRequest_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Source) ProtoMessage() {}

func (x *BidRequest_Source) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Source.ProtoReflect.Descriptor instead.
func (*BidRequest_Source) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 0}
}

var extRange_BidRequest_Source = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Source.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Source) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Source
}

func (x *BidRequest_Source) GetFd() bool {
	if x != nil && x.Fd != nil {
		return *x.Fd
	}
	return false
}

func (x *BidRequest_Source) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *BidRequest_Source) GetPchain() string {
	if x != nil && x.Pchain != nil {
		return *x.Pchain
	}
	return ""
}

//
// OpenRTB 3.3.2: describes the ad position or impression being auctioned.
// A single bid request can include multiple “imp” objects, a use case for which might be an
// exchange that supports selling all ad positions on a given page as a bundle.
// Each “imp” object has a required ID so that bids can reference them individually.
// An exchange can also conduct private auctions by restricting involvement to specific
// subsets of seats within bidders.
type BidRequest_Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// A unique identifier for this impression within the context of the bid request
	// (typically, value starts with 1, and increments up to n for n impressions).
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Banner object. Either a banner or video object (or both if the impression could be either)
	// must be included in an impression object.
	Banner *BidRequest_Impression_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	//
	// Video object. Either a banner or video object (or both if the impression could be either)
	// must be included in an impression object.
	Video *BidRequest_Impression_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	//*
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	Native *BidRequest_Impression_Native `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	//
	// Name of ad mediation partner, SDK technology, or native player responsible for rendering
	// ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
	Displaymanager *string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	//
	// Version of ad mediation partner, SDK technology, or native player responsible for rendering
	// ad (typically video or mobile). Used by some ad servers to customize ad code by partner.
	Displaymanagerver *string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	//
	// YES if the ad is interstitial or full screen; else NO.
	Instl *Flag `protobuf:"varint,6,opt,name=instl,enum=openrtb.Flag,def=0" json:"instl,omitempty"`
	//
	// Identifier for specific ad placement or ad tag that was used to initiate the auction.
	// This can be useful for debugging of any issues, or for optimization by the buyer.
	Tagid *string `protobuf:"bytes,7,opt,name=tagid" json:"tagid,omitempty"`
	//
	// Bid floor for this impression (in CPM of bidfloorcur).
	Bidfloor *float64 `protobuf:"fixed64,8,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	//
	// If bid floor is specified and multiple currencies supported per bid request,
	// then currency should be specified here using ISO-4217 alphabetic codes.
	// Note, this may be different from bid currency returned by bidder,
	// if this is allowed on an exchange.
	Bidfloorcur *string `protobuf:"bytes,9,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	//
	// Indicates the type of browser opened upon clicking the
	// creative in an app, where 0 = embedded, 1 = native.
	// Note that the Safari View Controller in iOS 9.x devices is considered
	// a native browser for purposes of this attribute.
	Clickbrowser *bool `protobuf:"varint,16,opt,name=clickbrowser" json:"clickbrowser,omitempty"`
	//
	// Array of names for supported iframe busters. Exchange specific.
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster" json:"iframebuster,omitempty"`
	//
	// Contains any Deals eligible for this Impression.
	Pmp *BidRequest_Impression_PMP `protobuf:"bytes,11,opt,name=pmp" json:"pmp,omitempty"`
	//
	// A flag to indicate if the impression requires secure HTTPS creative
	// assets and markup.
	// Value of 1 indicates that the impression requires secure creatives.
	// If the value is 0 or not set, then the impression allows non-secure
	// HTTP creatives.
	Secure *int32 `protobuf:"varint,12,opt,name=secure" json:"secure,omitempty"`
	//
	// Advisory as to the number of seconds that may elapse
	// between the auction and the actual impression.
	Exp *int32                `protobuf:"varint,14,opt,name=exp" json:"exp,omitempty"`
	Ext *ImpressionExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Impression fields.
const (
	Default_BidRequest_Impression_Instl       = Flag_NO
	Default_BidRequest_Impression_Bidfloor    = float64(0)
	Default_BidRequest_Impression_Bidfloorcur = string("USD")
)

func (x *BidRequest_Impression) Reset() {
	*x = BidRequest_Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression) ProtoMessage() {}

func (x *BidRequest_Impression) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BidRequest_Impression) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Impression) GetBanner() *BidRequest_Impression_Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *BidRequest_Impression) GetVideo() *BidRequest_Impression_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *BidRequest_Impression) GetNative() *BidRequest_Impression_Native {
	if x != nil {
		return x.Native
	}
	return nil
}

func (x *BidRequest_Impression) GetDisplaymanager() string {
	if x != nil && x.Displaymanager != nil {
		return *x.Displaymanager
	}
	return ""
}

func (x *BidRequest_Impression) GetDisplaymanagerver() string {
	if x != nil && x.Displaymanagerver != nil {
		return *x.Displaymanagerver
	}
	return ""
}

func (x *BidRequest_Impression) GetInstl() Flag {
	if x != nil && x.Instl != nil {
		return *x.Instl
	}
	return Default_BidRequest_Impression_Instl
}

func (x *BidRequest_Impression) GetTagid() string {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return ""
}

func (x *BidRequest_Impression) GetBidfloor() float64 {
	if x != nil && x.Bidfloor != nil {
		return *x.Bidfloor
	}
	return Default_BidRequest_Impression_Bidfloor
}

func (x *BidRequest_Impression) GetBidfloorcur() string {
	if x != nil && x.Bidfloorcur != nil {
		return *x.Bidfloorcur
	}
	return Default_BidRequest_Impression_Bidfloorcur
}

func (x *BidRequest_Impression) GetClickbrowser() bool {
	if x != nil && x.Clickbrowser != nil {
		return *x.Clickbrowser
	}
	return false
}

func (x *BidRequest_Impression) GetIframebuster() []string {
	if x != nil {
		return x.Iframebuster
	}
	return nil
}

func (x *BidRequest_Impression) GetPmp() *BidRequest_Impression_PMP {
	if x != nil {
		return x.Pmp
	}
	return nil
}

func (x *BidRequest_Impression) GetSecure() int32 {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return 0
}

func (x *BidRequest_Impression) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *BidRequest_Impression) GetExt() *ImpressionExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.5: should be included if the ad supported content is part of a website
// (as opposed to an application).
type BidRequest_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Site ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Site name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Domain of the site, used for advertiser side blocking. For example, “foo.com”.
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	//
	// Array of IAB content categories for the overall site.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of IAB content categories for the current subsection of the site.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	//
	// Array of IAB content categories for the current page.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	//
	// URL of the page where the impression will be shown.
	Page *string `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
	//
	// Specifies whether the site has a privacy policy.
	Privacypolicy *Flag `protobuf:"varint,8,opt,name=privacypolicy,enum=openrtb.Flag" json:"privacypolicy,omitempty"`
	//
	// Referrer URL that caused navigation to the current page.
	Ref *string `protobuf:"bytes,10,opt,name=ref" json:"ref,omitempty"`
	//
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,11,opt,name=search" json:"search,omitempty"`
	//
	// Mobile-optimized signal, where 0 = no, 1 = yes.
	Mobile *bool `protobuf:"varint,15,opt,name=mobile" json:"mobile,omitempty"`
	//
	// Site's Publisher.
	Publisher *BidRequest_Publisher `protobuf:"bytes,12,opt,name=publisher" json:"publisher,omitempty"`
	//
	// Site's Content.
	Content *BidRequest_Content `protobuf:"bytes,13,opt,name=content" json:"content,omitempty"`
	//
	// List of keywords describing this site in a comma separated string.
	Keywords *string         `protobuf:"bytes,14,opt,name=keywords" json:"keywords,omitempty"`
	Ext      *SiteExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Site) Reset() {
	*x = BidRequest_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Site) ProtoMessage() {}

func (x *BidRequest_Site) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Site.ProtoReflect.Descriptor instead.
func (*BidRequest_Site) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 2}
}

func (x *BidRequest_Site) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Site) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Site) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_Site) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Site) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *BidRequest_Site) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *BidRequest_Site) GetPage() string {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return ""
}

func (x *BidRequest_Site) GetPrivacypolicy() Flag {
	if x != nil && x.Privacypolicy != nil {
		return *x.Privacypolicy
	}
	return Flag_NO
}

func (x *BidRequest_Site) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

func (x *BidRequest_Site) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *BidRequest_Site) GetMobile() bool {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return false
}

func (x *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *BidRequest_Site) GetContent() *BidRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BidRequest_Site) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_Site) GetExt() *SiteExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.6: should be included if the ad supported content is part of a mobile application
// (as opposed to a mobile website).
type BidRequest_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Application ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id,def=-1" json:"id,omitempty"`
	//
	// Application name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name,def=-1" json:"name,omitempty"`
	//
	// Domain of the application. For example, “mygame.foo.com”.
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	//
	// Array of IAB content categories for the overall application.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of IAB content categories for the current subsection of the application.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	//
	// Array of IAB content categories for the current page/view of the app.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	//
	// Application version.
	Ver *string `protobuf:"bytes,7,opt,name=ver" json:"ver,omitempty"`
	//
	// Application bundle or package name (e.g., com.foo.mygame). This is intended to be a
	// unique ID across multiple exchanges.
	Bundle *string `protobuf:"bytes,8,opt,name=bundle,def=-1" json:"bundle,omitempty"`
	//
	// Specifies whether the application has a privacy policy.
	Privacypolicy *Flag `protobuf:"varint,9,opt,name=privacypolicy,enum=openrtb.Flag" json:"privacypolicy,omitempty"`
	//
	// Application is a paid version or free.
	Paid *Flag `protobuf:"varint,10,opt,name=paid,enum=openrtb.Flag" json:"paid,omitempty"`
	//
	// Application's Publisher.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	//
	// Application's Content.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	//
	// List of keywords describing this site in a comma separated string.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	//
	// For QAG 1.5 compliance, an app store URL for an installed app
	// should be passed in the bid request.
	Storeurl *string        `protobuf:"bytes,14,opt,name=storeurl" json:"storeurl,omitempty"`
	Ext      *AppExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_App fields.
const (
	Default_BidRequest_App_Id     = string("-1")
	Default_BidRequest_App_Name   = string("-1")
	Default_BidRequest_App_Bundle = string("-1")
)

func (x *BidRequest_App) Reset() {
	*x = BidRequest_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_App) ProtoMessage() {}

func (x *BidRequest_App) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_App.ProtoReflect.Descriptor instead.
func (*BidRequest_App) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 3}
}

func (x *BidRequest_App) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BidRequest_App_Id
}

func (x *BidRequest_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return Default_BidRequest_App_Name
}

func (x *BidRequest_App) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_App) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_App) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *BidRequest_App) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *BidRequest_App) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *BidRequest_App) GetBundle() string {
	if x != nil && x.Bundle != nil {
		return *x.Bundle
	}
	return Default_BidRequest_App_Bundle
}

func (x *BidRequest_App) GetPrivacypolicy() Flag {
	if x != nil && x.Privacypolicy != nil {
		return *x.Privacypolicy
	}
	return Flag_NO
}

func (x *BidRequest_App) GetPaid() Flag {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return Flag_NO
}

func (x *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *BidRequest_App) GetContent() *BidRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BidRequest_App) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_App) GetStoreurl() string {
	if x != nil && x.Storeurl != nil {
		return *x.Storeurl
	}
	return ""
}

func (x *BidRequest_App) GetExt() *AppExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.7: describes the content of a site or app.
// This object may be useful in the situation where syndicated content contains impressions and
// does not necessarily match the publisher’s general content. The exchange might or might not
// have knowledge of the page where the content is running, as a result of the syndication method.
// (For example, video impressions embedded in an iframe on an unknown web property or device.)
type BidRequest_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// ID uniquely identifying the content.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Content episode number (typically applies to video content).
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	//
	// Content title.
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	//
	// Content series.
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	//
	// Content season.
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	//
	// Original URL of the content, for buy-side contextualization or review.
	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	//
	// Array of IAB content categories for the content.
	Cat []string `protobuf:"bytes,7,rep,name=cat" json:"cat,omitempty"`
	//
	// Video quality per the IAB’s classification.
	Videoquality *Enums_BidRequest_Content_VideoQuality `protobuf:"varint,8,opt,name=videoquality,enum=openrtb.Enums_BidRequest_Content_VideoQuality" json:"videoquality,omitempty"`
	//
	// Comma separated list of keywords describing the content.
	Keywords *string `protobuf:"bytes,9,opt,name=keywords" json:"keywords,omitempty"`
	//
	// Content rating (e.g., MPAA).
	Contentrating *string `protobuf:"bytes,10,opt,name=contentrating" json:"contentrating,omitempty"`
	//
	// User rating of the content (e.g., number of stars, likes, etc.).
	Userrating *string `protobuf:"bytes,11,opt,name=userrating" json:"userrating,omitempty"`
	//
	// Specifies the type of content (game, video, text, etc.).
	Context *Enums_BidRequest_Content_Context `protobuf:"varint,12,opt,name=context,enum=openrtb.Enums_BidRequest_Content_Context" json:"context,omitempty"`
	//
	// Is content live?
	Livestream *Flag `protobuf:"varint,13,opt,name=livestream,enum=openrtb.Flag" json:"livestream,omitempty"`
	//
	// Direct or indirect.
	Sourcerelationship *Enums_BidRequest_Content_SourceRelationship `protobuf:"varint,14,opt,name=sourcerelationship,enum=openrtb.Enums_BidRequest_Content_SourceRelationship" json:"sourcerelationship,omitempty"`
	//
	// Content's Producer.
	Producer *BidRequest_Producer `protobuf:"bytes,15,opt,name=producer" json:"producer,omitempty"`
	//
	// Length of content (appropriate for video or audio) in seconds.
	Len *int32 `protobuf:"varint,16,opt,name=len" json:"len,omitempty"`
	//
	// Media rating of the content, per QAG guidelines.
	Qagmediarating *Enums_BidRequest_Content_QAGMediaRating `protobuf:"varint,17,opt,name=qagmediarating,enum=openrtb.Enums_BidRequest_Content_QAGMediaRating,def=-1" json:"qagmediarating,omitempty"`
	//
	// From QAG Video Addendum. If content can be embedded (such as an embeddable video player)
	// this value should be set to YES. If content cannot be embedded, this should be set to NO.
	Embeddable *Flag `protobuf:"varint,18,opt,name=embeddable,enum=openrtb.Flag" json:"embeddable,omitempty"`
	//
	// Language of the content. Use alpha-2/ISO 639-1 codes.
	Language *string            `protobuf:"bytes,19,opt,name=language" json:"language,omitempty"`
	Ext      *ContentExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Content fields.
const (
	Default_BidRequest_Content_Qagmediarating = Enums_BidRequest_Content_UNKNOWN
)

func (x *BidRequest_Content) Reset() {
	*x = BidRequest_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Content) ProtoMessage() {}

func (x *BidRequest_Content) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Content.ProtoReflect.Descriptor instead.
func (*BidRequest_Content) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 4}
}

func (x *BidRequest_Content) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Content) GetEpisode() int32 {
	if x != nil && x.Episode != nil {
		return *x.Episode
	}
	return 0
}

func (x *BidRequest_Content) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BidRequest_Content) GetSeries() string {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return ""
}

func (x *BidRequest_Content) GetSeason() string {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return ""
}

func (x *BidRequest_Content) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BidRequest_Content) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Content) GetVideoquality() Enums_BidRequest_Content_VideoQuality {
	if x != nil && x.Videoquality != nil {
		return *x.Videoquality
	}
	return Enums_BidRequest_Content_QUALITY_UNKNOWN
}

func (x *BidRequest_Content) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_Content) GetContentrating() string {
	if x != nil && x.Contentrating != nil {
		return *x.Contentrating
	}
	return ""
}

func (x *BidRequest_Content) GetUserrating() string {
	if x != nil && x.Userrating != nil {
		return *x.Userrating
	}
	return ""
}

func (x *BidRequest_Content) GetContext() Enums_BidRequest_Content_Context {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return Enums_BidRequest_Content_VIDEO
}

func (x *BidRequest_Content) GetLivestream() Flag {
	if x != nil && x.Livestream != nil {
		return *x.Livestream
	}
	return Flag_NO
}

func (x *BidRequest_Content) GetSourcerelationship() Enums_BidRequest_Content_SourceRelationship {
	if x != nil && x.Sourcerelationship != nil {
		return *x.Sourcerelationship
	}
	return Enums_BidRequest_Content_INDIRECT
}

func (x *BidRequest_Content) GetProducer() *BidRequest_Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *BidRequest_Content) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BidRequest_Content) GetQagmediarating() Enums_BidRequest_Content_QAGMediaRating {
	if x != nil && x.Qagmediarating != nil {
		return *x.Qagmediarating
	}
	return Default_BidRequest_Content_Qagmediarating
}

func (x *BidRequest_Content) GetEmbeddable() Flag {
	if x != nil && x.Embeddable != nil {
		return *x.Embeddable
	}
	return Flag_NO
}

func (x *BidRequest_Content) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BidRequest_Content) GetExt() *ContentExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.10: Provides information pertaining to the device including its hardware,
// platform, location, and carrier. This device can refer to a mobile handset, a desktop
// computer, set top box or other digital device. In general, the most essential fields are
// either the IP address (to enable geo-lookup for the bidder), or providing geo information
// directly in the geo object.
type BidRequest_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Do Not Track.
	Dnt *Flag `protobuf:"varint,1,opt,name=dnt,enum=openrtb.Flag" json:"dnt,omitempty"`
	//
	// Browser user agent string.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	//
	// IPv4 address closest to device.
	Ip *string `protobuf:"bytes,3,opt,name=ip,def=0.0.0.0" json:"ip,omitempty"`
	//
	// Geography as derived from the device’s location services (e.g., cell tower triangulation,
	// GPS) or IP address.
	Geo *BidRequest_Geo `protobuf:"bytes,4,opt,name=geo" json:"geo,omitempty"`
	//
	// SHA1 hashed device ID; IMEI when available, else MEID or ESN.
	// OpenRTB’s preferred method for device ID hashing is SHA1.
	Didsha1 *string `protobuf:"bytes,5,opt,name=didsha1" json:"didsha1,omitempty"`
	//
	// MD5 hashed device ID; IMEI when available, else MEID or ESN.
	// Should be interpreted as case insensitive.
	Didmd5 *string `protobuf:"bytes,6,opt,name=didmd5" json:"didmd5,omitempty"`
	//
	// SHA1 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
	// OpenRTB’s preferred method for device ID hash is SHA1.
	Dpidsha1 *string `protobuf:"bytes,7,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	//
	// MD5 hashed platform-specific ID (e.g., Android ID or UDID for iOS).
	// Should be interpreted as case insensitive.
	Dpidmd5 *string `protobuf:"bytes,8,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	//
	// IP address in IPv6.
	Ipv6 *string `protobuf:"bytes,9,opt,name=ipv6" json:"ipv6,omitempty"`
	//
	// Carrier or ISP derived from the IP address.
	// Should be specified using Mobile Network Code (MNC).
	Carrier *string `protobuf:"bytes,10,opt,name=carrier,def=-1" json:"carrier,omitempty"`
	//
	// Browser language; use alpha-2/ISO 639-1 codes.
	Language *string `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	//
	// Device make (e.g., “Apple”).
	Make *string `protobuf:"bytes,12,opt,name=make,def=-1" json:"make,omitempty"`
	//
	// Device model (e.g., “iPhone”).
	Model *string `protobuf:"bytes,13,opt,name=model,def=-1" json:"model,omitempty"`
	//
	// Device operating system (e.g., “iOS”).
	Os *string `protobuf:"bytes,14,opt,name=os,def=-1" json:"os,omitempty"`
	//
	// Device operating system version (e.g., “3.1.2”).
	Osv *string `protobuf:"bytes,15,opt,name=osv,def=-1" json:"osv,omitempty"`
	//
	// Device supports Javascript?
	Js *Flag `protobuf:"varint,16,opt,name=js,enum=openrtb.Flag,def=1" json:"js,omitempty"`
	//
	// Return the detected data connection type for the device.
	Connectiontype *Enums_BidRequest_Device_ConnectionType `protobuf:"varint,17,opt,name=connectiontype,enum=openrtb.Enums_BidRequest_Device_ConnectionType,def=0" json:"connectiontype,omitempty"`
	//
	// Return the device type being used.
	Devicetype *Enums_BidRequest_Device_DeviceType `protobuf:"varint,18,opt,name=devicetype,enum=openrtb.Enums_BidRequest_Device_DeviceType,def=-1" json:"devicetype,omitempty"`
	//
	// Return the Flash version detected.
	Flashver *string `protobuf:"bytes,19,opt,name=flashver" json:"flashver,omitempty"`
	//
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
	// where false = tracking is unrestricted,
	// true = tracking must be limited per commercial guidelines.
	Lmt *bool `protobuf:"varint,20,opt,name=lmt" json:"lmt,omitempty"`
	//
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	Hwv *string `protobuf:"bytes,21,opt,name=hwv" json:"hwv,omitempty"`
	//
	// Physical width of the screen in pixels.
	W *int32 `protobuf:"varint,22,opt,name=w" json:"w,omitempty"`
	//
	// Physical height of the screen in pixels.
	H *int32 `protobuf:"varint,23,opt,name=h" json:"h,omitempty"`
	//
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,24,opt,name=ppi" json:"ppi,omitempty"`
	//
	// The ratio of physical pixels to device independent pixels.
	Pxratio *float64 `protobuf:"fixed64,25,opt,name=pxratio" json:"pxratio,omitempty"`
	//
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	Ifa *string `protobuf:"bytes,26,opt,name=ifa" json:"ifa,omitempty"`
	//
	// MAC address of the device; hashed via SHA1.
	Macsha1 *string `protobuf:"bytes,27,opt,name=macsha1" json:"macsha1,omitempty"`
	//*
	// MAC address of the device; hashed via MD5.
	Macmd5 *string `protobuf:"bytes,28,opt,name=macmd5" json:"macmd5,omitempty"`
	//
	// Mobile carrier as the concatenated MCC-MNC code (e.g.,
	// "310-005" identifies Verizon Wireless CDMA in the USA).
	// Refer to https://en.wikipedia.org/wiki/Mobile_country_code
	// for further examples. Note that the dash between the MCC
	// and MNC parts is required to remove parsing ambiguity.
	Mccmnc *string           `protobuf:"bytes,30,opt,name=mccmnc" json:"mccmnc,omitempty"`
	Ext    *DeviceExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Device fields.
const (
	Default_BidRequest_Device_Ip             = string("0.0.0.0")
	Default_BidRequest_Device_Carrier        = string("-1")
	Default_BidRequest_Device_Make           = string("-1")
	Default_BidRequest_Device_Model          = string("-1")
	Default_BidRequest_Device_Os             = string("-1")
	Default_BidRequest_Device_Osv            = string("-1")
	Default_BidRequest_Device_Js             = Flag_YES
	Default_BidRequest_Device_Connectiontype = Enums_BidRequest_Device_CONNECTION_UNKNOWN
	Default_BidRequest_Device_Devicetype     = Enums_BidRequest_Device_UNKNOWN
)

func (x *BidRequest_Device) Reset() {
	*x = BidRequest_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Device) ProtoMessage() {}

func (x *BidRequest_Device) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Device.ProtoReflect.Descriptor instead.
func (*BidRequest_Device) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 5}
}

func (x *BidRequest_Device) GetDnt() Flag {
	if x != nil && x.Dnt != nil {
		return *x.Dnt
	}
	return Flag_NO
}

func (x *BidRequest_Device) GetUa() string {
	if x != nil && x.Ua != nil {
		return *x.Ua
	}
	return ""
}

func (x *BidRequest_Device) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return Default_BidRequest_Device_Ip
}

func (x *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequest_Device) GetDidsha1() string {
	if x != nil && x.Didsha1 != nil {
		return *x.Didsha1
	}
	return ""
}

func (x *BidRequest_Device) GetDidmd5() string {
	if x != nil && x.Didmd5 != nil {
		return *x.Didmd5
	}
	return ""
}

func (x *BidRequest_Device) GetDpidsha1() string {
	if x != nil && x.Dpidsha1 != nil {
		return *x.Dpidsha1
	}
	return ""
}

func (x *BidRequest_Device) GetDpidmd5() string {
	if x != nil && x.Dpidmd5 != nil {
		return *x.Dpidmd5
	}
	return ""
}

func (x *BidRequest_Device) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *BidRequest_Device) GetCarrier() string {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return Default_BidRequest_Device_Carrier
}

func (x *BidRequest_Device) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BidRequest_Device) GetMake() string {
	if x != nil && x.Make != nil {
		return *x.Make
	}
	return Default_BidRequest_Device_Make
}

func (x *BidRequest_Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return Default_BidRequest_Device_Model
}

func (x *BidRequest_Device) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return Default_BidRequest_Device_Os
}

func (x *BidRequest_Device) GetOsv() string {
	if x != nil && x.Osv != nil {
		return *x.Osv
	}
	return Default_BidRequest_Device_Osv
}

func (x *BidRequest_Device) GetJs() Flag {
	if x != nil && x.Js != nil {
		return *x.Js
	}
	return Default_BidRequest_Device_Js
}

func (x *BidRequest_Device) GetConnectiontype() Enums_BidRequest_Device_ConnectionType {
	if x != nil && x.Connectiontype != nil {
		return *x.Connectiontype
	}
	return Default_BidRequest_Device_Connectiontype
}

func (x *BidRequest_Device) GetDevicetype() Enums_BidRequest_Device_DeviceType {
	if x != nil && x.Devicetype != nil {
		return *x.Devicetype
	}
	return Default_BidRequest_Device_Devicetype
}

func (x *BidRequest_Device) GetFlashver() string {
	if x != nil && x.Flashver != nil {
		return *x.Flashver
	}
	return ""
}

func (x *BidRequest_Device) GetLmt() bool {
	if x != nil && x.Lmt != nil {
		return *x.Lmt
	}
	return false
}

func (x *BidRequest_Device) GetHwv() string {
	if x != nil && x.Hwv != nil {
		return *x.Hwv
	}
	return ""
}

func (x *BidRequest_Device) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Device) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Device) GetPpi() int32 {
	if x != nil && x.Ppi != nil {
		return *x.Ppi
	}
	return 0
}

func (x *BidRequest_Device) GetPxratio() float64 {
	if x != nil && x.Pxratio != nil {
		return *x.Pxratio
	}
	return 0
}

func (x *BidRequest_Device) GetIfa() string {
	if x != nil && x.Ifa != nil {
		return *x.Ifa
	}
	return ""
}

func (x *BidRequest_Device) GetMacsha1() string {
	if x != nil && x.Macsha1 != nil {
		return *x.Macsha1
	}
	return ""
}

func (x *BidRequest_Device) GetMacmd5() string {
	if x != nil && x.Macmd5 != nil {
		return *x.Macmd5
	}
	return ""
}

func (x *BidRequest_Device) GetMccmnc() string {
	if x != nil && x.Mccmnc != nil {
		return *x.Mccmnc
	}
	return ""
}

func (x *BidRequest_Device) GetExt() *DeviceExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.12: contains information known or derived about the human user of the device.
// Note that the user ID is an exchange artifact (refer to the “device” object for hardware or
// platform derived IDs) and may be subject to rotation policies. However, this user ID must be
// stable long enough to serve reasonably as the basis for frequency capping.
// If device ID is used as a proxy for unique user ID, use the device object.
type BidRequest_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Unique consumer ID of this user on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Buyer’s user ID for this user as mapped by exchange for the buyer.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	//
	// Year of birth as a 4-digit integer.
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	//
	// Gender as “M” male, “F” female, “O” Other. (Null indicates unknown)
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	//
	// Comma separated list of keywords of consumer interests or intent.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	//
	// If supported by the exchange, this is custom data that the bidder had stored in the
	// exchange’s cookie. The string may be in base85 cookie safe characters, and be in any
	// format. This may useful for storing user features. Note: Proper JSON encoding must
	// be used to include “escaped” quotation marks.
	Customdata *string `protobuf:"bytes,6,opt,name=customdata" json:"customdata,omitempty"`
	//
	// Home geo for the user (e.g., based off of registration data); this is different from the
	// current location of the access device (that is defined by the geo object embedded in the
	// Device Object).
	Geo *BidRequest_Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	//
	// User's custom Data.
	Data []*BidRequest_Data `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	Ext  *UserExtensions    `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_User) Reset() {
	*x = BidRequest_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_User) ProtoMessage() {}

func (x *BidRequest_User) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_User.ProtoReflect.Descriptor instead.
func (*BidRequest_User) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 6}
}

func (x *BidRequest_User) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_User) GetBuyeruid() string {
	if x != nil && x.Buyeruid != nil {
		return *x.Buyeruid
	}
	return ""
}

func (x *BidRequest_User) GetYob() int32 {
	if x != nil && x.Yob != nil {
		return *x.Yob
	}
	return 0
}

func (x *BidRequest_User) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *BidRequest_User) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_User) GetCustomdata() string {
	if x != nil && x.Customdata != nil {
		return *x.Customdata
	}
	return ""
}

func (x *BidRequest_User) GetGeo() *BidRequest_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequest_User) GetData() []*BidRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BidRequest_User) GetExt() *UserExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.8: describes the publisher of a site or app.
type BidRequest_Publisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Publisher ID on the exchange.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Publisher name (may be masked at publisher’s request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of IAB content categories for the publisher.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	//
	// Publisher’s highest level domain name, for example “foopub.com”.
	Domain *string              `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	Ext    *PublisherExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Publisher) Reset() {
	*x = BidRequest_Publisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Publisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Publisher) ProtoMessage() {}

func (x *BidRequest_Publisher) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Publisher.ProtoReflect.Descriptor instead.
func (*BidRequest_Publisher) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 7}
}

func (x *BidRequest_Publisher) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Publisher) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Publisher) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Publisher) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_Publisher) GetExt() *PublisherExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.9: describes the producer of content object, which might be different from the
// publisher of the content of the page. This object is useful in the case of syndicated content,
// such as embedded videos, for example.
type BidRequest_Producer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Content producer or originator ID. Useful if content is syndicated,
	// and may be posted on a site using embed tags.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Content producer or originator name (e.g., “Warner Bros”).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of IAB content categories for the content producer.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	//
	// URL of the content producer.
	Domain *string             `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	Ext    *ProducerExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Producer) Reset() {
	*x = BidRequest_Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Producer) ProtoMessage() {}

func (x *BidRequest_Producer) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Producer.ProtoReflect.Descriptor instead.
func (*BidRequest_Producer) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 8}
}

func (x *BidRequest_Producer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Producer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Producer) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Producer) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_Producer) GetExt() *ProducerExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.11: describes the current geographic location of the Device (e.g., based on IP
// address or GPS), or the home geo of the User (e.g., based on registration data).
// If both the Device and User objects contain Geo objects with different information,
// it’s up to the bidder to determine which Geo information to use.
type BidRequest_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Latitude from -90 to 90. South is negative. This should only be passed if known
	// to be accurate (For example, not the centroid of a postal code).
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	//
	// Longitude from -180 to 180. West is negative. This should only be passed if known
	// to be accurate (For example, not the centroid of a postal code).
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	//
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	//
	// Region using ISO 3166-2
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	//
	// Region of a country using fips 10-4 notation (alternative to ISO 3166-2).
	Regionfips104 *string `protobuf:"bytes,5,opt,name=regionfips104" json:"regionfips104,omitempty"`
	//
	// Pass the metro code (see http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
	// Metro codes are similar to but not exactly the same as Nielsen DMAs.
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	//
	// Beeswax does normalization in the following way:
	// (1) user.geo.city field is populated with city IDs of MaxMind database (see notes) if available.
	// Mapping from city IDs to city names can be found in the Buzz's `cities` view.
	// (2) device.geo.city field is populated with the city name defined by google in geo table (see notes)
	// for GOOGLE_ADX requests. Beeswax always clear this field for non-GOOGLE_ADX requests.
	//
	// Notes:
	// (1) Beeswax uses Maxmind's database to augment geo information. The database
	// is also used in defining targetable cities.
	// Link to Maxmind: https://www.maxmind.com
	// Link to Beeswax targeting keys: https://docs.beeswax.com/docs/list-of-targeting-modules-and-keys
	// (2) Link to google's geo table: https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	//
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	//
	// Indicate the source of the geo data (GPS, IP address, user provided).
	// Type should be provided when lat/lon is provided.
	Type *Enums_BidRequest_Geo_LocationType `protobuf:"varint,9,opt,name=type,enum=openrtb.Enums_BidRequest_Geo_LocationType" json:"type,omitempty"`
	//
	// Local time as the number +/- of minutes from UTC.
	Utcoffset *int32         `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
	Ext       *GeoExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Geo) Reset() {
	*x = BidRequest_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Geo) ProtoMessage() {}

func (x *BidRequest_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Geo.ProtoReflect.Descriptor instead.
func (*BidRequest_Geo) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 9}
}

func (x *BidRequest_Geo) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *BidRequest_Geo) GetLon() float64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *BidRequest_Geo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BidRequest_Geo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *BidRequest_Geo) GetRegionfips104() string {
	if x != nil && x.Regionfips104 != nil {
		return *x.Regionfips104
	}
	return ""
}

func (x *BidRequest_Geo) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return ""
}

func (x *BidRequest_Geo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *BidRequest_Geo) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return ""
}

func (x *BidRequest_Geo) GetType() Enums_BidRequest_Geo_LocationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Enums_BidRequest_Geo_GPS_LOCATION
}

func (x *BidRequest_Geo) GetUtcoffset() int32 {
	if x != nil && x.Utcoffset != nil {
		return *x.Utcoffset
	}
	return 0
}

func (x *BidRequest_Geo) GetExt() *GeoExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.13: The data and segment objects together allow data about the user to be passed
// to bidders in the bid request. This data may be from multiple sources (e.g., the exchange
// itself, third party providers) as specified by the data object ID field.
// A bid request can mix data objects from multiple providers.
type BidRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Exchange specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Data provider name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// Array of segment objects.
	Segment []*BidRequest_Data_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
	Ext     *DataExtensions            `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Data) Reset() {
	*x = BidRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Data) ProtoMessage() {}

func (x *BidRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Data.ProtoReflect.Descriptor instead.
func (*BidRequest_Data) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 10}
}

func (x *BidRequest_Data) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Data) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Data) GetSegment() []*BidRequest_Data_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *BidRequest_Data) GetExt() *DataExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.15: Legal, governmental, or industry regulations that apply to the request.
type BidRequest_Regulations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Indicated wether or not this request falls under the COPPA regulations
	// established by the USA FTC.
	Coppa *Flag                  `protobuf:"varint,1,opt,name=coppa,enum=openrtb.Flag" json:"coppa,omitempty"`
	Ext   *RegulationsExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Regulations) Reset() {
	*x = BidRequest_Regulations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Regulations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Regulations) ProtoMessage() {}

func (x *BidRequest_Regulations) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Regulations.ProtoReflect.Descriptor instead.
func (*BidRequest_Regulations) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 11}
}

func (x *BidRequest_Regulations) GetCoppa() Flag {
	if x != nil && x.Coppa != nil {
		return *x.Coppa
	}
	return Flag_NO
}

func (x *BidRequest_Regulations) GetExt() *RegulationsExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.3: A banner object typically describes an ad impressions opportunity for banner,
// rich media or in-banner video inventory.
type BidRequest_Impression_Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Width of the impression in pixels. Since some ad types are not restricted by size
	// this field is not required, but it’s highly recommended.
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	//
	// Height of the impression in pixels. Since some ad types are not restricted by size
	// this field is not required, but it’s highly recommended.
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	//*
	// Maximum width of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this maximum width and "w" is taken as recommended.
	// If not included, then "w" should be considered an exact requirement.
	Wmax *int32 `protobuf:"varint,11,opt,name=wmax" json:"wmax,omitempty"`
	//*
	// Maximum height of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this maximum height and "h" is taken as recommended.
	// If not included, then "h" should be considered an exact requirement.
	Hmax *int32 `protobuf:"varint,12,opt,name=hmax" json:"hmax,omitempty"`
	//*
	// Minimum width of the impression in pixels. If included, it indicates that a range
	// of sizes is allowed with this minimum width and "w" is taken as recommended.
	// If not included, then "w" should be considered an exact requirement.
	Wmin *int32 `protobuf:"varint,13,opt,name=wmin" json:"wmin,omitempty"`
	//*
	// Minumum height of the impression in pixels. If included, it indicates
	// that a range of sizes is allowed with this minimum height and "h" is
	// taken as recommended.
	// If not included, then "h" should be considered an exact requirement.
	Hmin *int32 `protobuf:"varint,14,opt,name=hmin" json:"hmin,omitempty"`
	//
	// Unique identifier for this banner object. Useful for tracking multiple banner objects
	// (e.g., in companion banner array). Usually starts with 1, increasing with each object.
	// Combination of impression id X banner id should be unique.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	//
	// The position of the ad as a relative measure of visibility or
	// prominence.
	Pos *Enums_BidRequest_Impression_AdPosition `protobuf:"varint,4,opt,name=pos,enum=openrtb.Enums_BidRequest_Impression_AdPosition,def=0" json:"pos,omitempty"`
	//
	// Blocked creative types. If blank, assume all types are allowed.
	Btype []Enums_BidRequest_Impression_Banner_AdType `protobuf:"varint,5,rep,name=btype,enum=openrtb.Enums_BidRequest_Impression_Banner_AdType" json:"btype,omitempty"`
	//
	// Blocked creative attributes. If blank assume all types are allowed.
	Battr []CreativeAttribute `protobuf:"varint,6,rep,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	//
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
	Mimes []string `protobuf:"bytes,7,rep,name=mimes" json:"mimes,omitempty"`
	//
	// Specify if the banner is delivered in the top frame (YES) or in an iframe (NO).
	Topframe *Flag `protobuf:"varint,8,opt,name=topframe,enum=openrtb.Flag,def=0" json:"topframe,omitempty"`
	//
	// Specify properties for an expandable ad.
	Expdir []Enums_BidRequest_Impression_Banner_ExpandableDirection `protobuf:"varint,9,rep,name=expdir,enum=openrtb.Enums_BidRequest_Impression_Banner_ExpandableDirection" json:"expdir,omitempty"`
	//
	// List of supported API frameworks for this banner. If an API is not explicitly listed
	// it is assumed not to be supported.
	Api []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,10,rep,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	Ext *BannerExtensions                          `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Impression_Banner fields.
const (
	Default_BidRequest_Impression_Banner_Pos      = Enums_BidRequest_Impression_POSITION_UNKNOWN
	Default_BidRequest_Impression_Banner_Topframe = Flag_NO
)

func (x *BidRequest_Impression_Banner) Reset() {
	*x = BidRequest_Impression_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression_Banner) ProtoMessage() {}

func (x *BidRequest_Impression_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression_Banner.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression_Banner) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *BidRequest_Impression_Banner) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetWmax() int32 {
	if x != nil && x.Wmax != nil {
		return *x.Wmax
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetHmax() int32 {
	if x != nil && x.Hmax != nil {
		return *x.Hmax
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetHmin() int32 {
	if x != nil && x.Hmin != nil {
		return *x.Hmin
	}
	return 0
}

func (x *BidRequest_Impression_Banner) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Impression_Banner) GetPos() Enums_BidRequest_Impression_AdPosition {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_BidRequest_Impression_Banner_Pos
}

func (x *BidRequest_Impression_Banner) GetBtype() []Enums_BidRequest_Impression_Banner_AdType {
	if x != nil {
		return x.Btype
	}
	return nil
}

func (x *BidRequest_Impression_Banner) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Impression_Banner) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *BidRequest_Impression_Banner) GetTopframe() Flag {
	if x != nil && x.Topframe != nil {
		return *x.Topframe
	}
	return Default_BidRequest_Impression_Banner_Topframe
}

func (x *BidRequest_Impression_Banner) GetExpdir() []Enums_BidRequest_Impression_Banner_ExpandableDirection {
	if x != nil {
		return x.Expdir
	}
	return nil
}

func (x *BidRequest_Impression_Banner) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Impression_Banner) GetExt() *BannerExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.4: A video object typically describes an ad opportunity for in-stream video
// inventory (including linear pre-roll, mid-roll and post-roll, and non-linear overlays).
// Please note, in-banner video is typically represented by the banner object.
type BidRequest_Impression_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	//
	// Indicates whether the ad impression is linear or non-linear.
	Linearity *Enums_BidRequest_Impression_Video_Linearity `protobuf:"varint,2,opt,name=linearity,enum=openrtb.Enums_BidRequest_Impression_Video_Linearity,def=1" json:"linearity,omitempty"`
	//
	// Minimum video ad duration in seconds.
	Minduration *int32 `protobuf:"varint,3,opt,name=minduration" json:"minduration,omitempty"`
	//
	// Maximum video ad duration in seconds.
	Maxduration *int32 `protobuf:"varint,4,opt,name=maxduration" json:"maxduration,omitempty"`
	//
	// Video bid response protocols.
	Protocols []Enums_BidRequest_Impression_Video_Protocol `protobuf:"varint,5,rep,name=protocols,enum=openrtb.Enums_BidRequest_Impression_Video_Protocol" json:"protocols,omitempty"`
	//
	// Width of the player in pixels. This field is not required, but it’s highly recommended.
	W *int32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	//
	// Height of the player in pixels. This field is not required, but it’s highly recommended.
	H *int32 `protobuf:"varint,7,opt,name=h" json:"h,omitempty"`
	//
	// Indicates the start delay in seconds for preroll, midroll, or postroll ad placement.
	// Check the enum VideoStartDelay for special values.
	Startdelay *int32 `protobuf:"varint,8,opt,name=startdelay,def=-3" json:"startdelay,omitempty"`
	//
	// If multiple ad impressions are offered in the same bid request, the sequence number
	// will allow for the coordinated delivery of multiple creatives.
	Sequence *int32 `protobuf:"varint,9,opt,name=sequence,def=1" json:"sequence,omitempty"`
	//
	// Blocked creative attributes. If blank assume all types are allowed.
	Battr []CreativeAttribute `protobuf:"varint,10,rep,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	//
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed, and there is
	// no time limit imposed. If greater than 0, then the value represents the number of
	// seconds of extended play supported beyond the maxduration value.
	Maxextended *int32 `protobuf:"varint,11,opt,name=maxextended,def=0" json:"maxextended,omitempty"`
	//
	// Minimum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Minbitrate *int32 `protobuf:"varint,12,opt,name=minbitrate" json:"minbitrate,omitempty"`
	//
	// Maximum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Maxbitrate *int32 `protobuf:"varint,13,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	//
	// If exchange publisher has rules preventing letter boxing of 4x3 content to play in a
	// 16x9 window, then this should be set to false. Default setting is true, which assumes
	// that boxing of content to fit into a window is allowed.
	Boxingallowed *Flag `protobuf:"varint,14,opt,name=boxingallowed,enum=openrtb.Flag,def=1" json:"boxingallowed,omitempty"`
	//
	// List of allowed playback methods. If blank, assume that all are allowed.
	Playbackmethod []Enums_BidRequest_Impression_Video_PlaybackMethod `protobuf:"varint,15,rep,name=playbackmethod,enum=openrtb.Enums_BidRequest_Impression_Video_PlaybackMethod" json:"playbackmethod,omitempty"`
	//
	// List of supported delivery methods. If blank, assume all are supported.
	Delivery []Enums_BidRequest_Impression_Video_ContentDelivery `protobuf:"varint,16,rep,name=delivery,enum=openrtb.Enums_BidRequest_Impression_Video_ContentDelivery" json:"delivery,omitempty"`
	//
	// The position of the ad as a relative measure of visibility or prominence.
	Pos *Enums_BidRequest_Impression_AdPosition `protobuf:"varint,17,opt,name=pos,enum=openrtb.Enums_BidRequest_Impression_AdPosition,def=0" json:"pos,omitempty"`
	//
	// If companion ads are available, they can be listed as an array of banner objects.
	Companionad []*BidRequest_Impression_Banner `protobuf:"bytes,18,rep,name=companionad" json:"companionad,omitempty"`
	//
	// List of supported API frameworks for this banner. If an API is not explicitly listed
	// it is assumed not to be supported.
	Api []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,19,rep,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	//
	// Recommended if companion objects are included.
	Companiontype []Enums_BidRequest_Impression_Video_CompanionType `protobuf:"varint,20,rep,name=companiontype,enum=openrtb.Enums_BidRequest_Impression_Video_CompanionType" json:"companiontype,omitempty"`
	//
	// Placement type for the impression.
	Placement *Enums_BidRequest_Impression_Video_VideoPlacementType `protobuf:"varint,26,opt,name=placement,enum=openrtb.Enums_BidRequest_Impression_Video_VideoPlacementType" json:"placement,omitempty"`
	//
	// The event that causes playback to end.
	Playbackend *Enums_BidRequest_Impression_Video_PlaybackCessationMode `protobuf:"varint,27,opt,name=playbackend,enum=openrtb.Enums_BidRequest_Impression_Video_PlaybackCessationMode" json:"playbackend,omitempty"`
	Ext         *VideoExtensions                                         `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Impression_Video fields.
const (
	Default_BidRequest_Impression_Video_Linearity     = Enums_BidRequest_Impression_Video_LINEAR
	Default_BidRequest_Impression_Video_Startdelay    = int32(-3)
	Default_BidRequest_Impression_Video_Sequence      = int32(1)
	Default_BidRequest_Impression_Video_Maxextended   = int32(0)
	Default_BidRequest_Impression_Video_Boxingallowed = Flag_YES
	Default_BidRequest_Impression_Video_Pos           = Enums_BidRequest_Impression_POSITION_UNKNOWN
)

func (x *BidRequest_Impression_Video) Reset() {
	*x = BidRequest_Impression_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression_Video) ProtoMessage() {}

func (x *BidRequest_Impression_Video) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression_Video.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression_Video) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *BidRequest_Impression_Video) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetLinearity() Enums_BidRequest_Impression_Video_Linearity {
	if x != nil && x.Linearity != nil {
		return *x.Linearity
	}
	return Default_BidRequest_Impression_Video_Linearity
}

func (x *BidRequest_Impression_Video) GetMinduration() int32 {
	if x != nil && x.Minduration != nil {
		return *x.Minduration
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetMaxduration() int32 {
	if x != nil && x.Maxduration != nil {
		return *x.Maxduration
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetProtocols() []Enums_BidRequest_Impression_Video_Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetStartdelay() int32 {
	if x != nil && x.Startdelay != nil {
		return *x.Startdelay
	}
	return Default_BidRequest_Impression_Video_Startdelay
}

func (x *BidRequest_Impression_Video) GetSequence() int32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_BidRequest_Impression_Video_Sequence
}

func (x *BidRequest_Impression_Video) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetMaxextended() int32 {
	if x != nil && x.Maxextended != nil {
		return *x.Maxextended
	}
	return Default_BidRequest_Impression_Video_Maxextended
}

func (x *BidRequest_Impression_Video) GetMinbitrate() int32 {
	if x != nil && x.Minbitrate != nil {
		return *x.Minbitrate
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetMaxbitrate() int32 {
	if x != nil && x.Maxbitrate != nil {
		return *x.Maxbitrate
	}
	return 0
}

func (x *BidRequest_Impression_Video) GetBoxingallowed() Flag {
	if x != nil && x.Boxingallowed != nil {
		return *x.Boxingallowed
	}
	return Default_BidRequest_Impression_Video_Boxingallowed
}

func (x *BidRequest_Impression_Video) GetPlaybackmethod() []Enums_BidRequest_Impression_Video_PlaybackMethod {
	if x != nil {
		return x.Playbackmethod
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetDelivery() []Enums_BidRequest_Impression_Video_ContentDelivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetPos() Enums_BidRequest_Impression_AdPosition {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_BidRequest_Impression_Video_Pos
}

func (x *BidRequest_Impression_Video) GetCompanionad() []*BidRequest_Impression_Banner {
	if x != nil {
		return x.Companionad
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetCompaniontype() []Enums_BidRequest_Impression_Video_CompanionType {
	if x != nil {
		return x.Companiontype
	}
	return nil
}

func (x *BidRequest_Impression_Video) GetPlacement() Enums_BidRequest_Impression_Video_VideoPlacementType {
	if x != nil && x.Placement != nil {
		return *x.Placement
	}
	return Enums_BidRequest_Impression_Video_UNDEFINED_VIDEO_PLACEMENT
}

func (x *BidRequest_Impression_Video) GetPlaybackend() Enums_BidRequest_Impression_Video_PlaybackCessationMode {
	if x != nil && x.Playbackend != nil {
		return *x.Playbackend
	}
	return Enums_BidRequest_Impression_Video_COMPLETION_OR_USER
}

func (x *BidRequest_Impression_Video) GetExt() *VideoExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//*
// OpenRTB 3.2.5: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding content
// (e.g., a sponsored Twitter or Facebook post). As such, the response must be
// well-structured to afford the publisher fine-grained control over rendering.
//
// The Native Subcommittee has developed a companion specification to OpenRTB
// called the Native Ad Specification. It defines the request parameters and response markup
// structure of native ad units. This object provides the means of transporting request
// parameters as an opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the ad markup served
// will be structured according to that specification.
//
// The presence of a Native as a subordinate of the Imp object indicates that this
// impression is offered as a native type impression. At the publisher's discretion,
// that same impression may also be offered as banner and/or video by also including as
// Imp subordinates the Banner and/or Video objects, respectively.
// However, any given bid for the impression must conform to one of the offered types.
type BidRequest_Impression_Native struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Request payload complying with the Native Ad Specification.
	Request *NativeRequest `protobuf:"bytes,1,req,name=request" json:"request,omitempty"`
	//*
	// Version of the Native Ad Specification to which request complies;
	// highly recommended for efficient parsing.
	Ver *string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	//*
	// List of supported API frameworks for this impression.  Refer to List 5.6.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,3,rep,packed,name=api,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"api,omitempty"`
	//*
	// Blocked creative attributes. Refer to List 5.3.
	Battr []CreativeAttribute `protobuf:"varint,4,rep,packed,name=battr,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	Ext   *NativeExtensions   `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Impression_Native) Reset() {
	*x = BidRequest_Impression_Native{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression_Native) ProtoMessage() {}

func (x *BidRequest_Impression_Native) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression_Native.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression_Native) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *BidRequest_Impression_Native) GetRequest() *NativeRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BidRequest_Impression_Native) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *BidRequest_Impression_Native) GetApi() []Enums_BidRequest_Impression_ApiFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Impression_Native) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Impression_Native) GetExt() *NativeExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.16: contains a parent object for usage within the context of private
// marketplaces and the use of the RTB protocol to execute Direct Deals.
type BidRequest_Impression_PMP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Flag indicating that this impression is a private auction eligible only to seats named
	// in the DirectDeals object.
	PrivateAuction *Flag `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,enum=openrtb.Flag" json:"private_auction,omitempty"`
	//
	// A collection of deal objects encapsulating a list of direct deals eligible for
	// this impression.
	Deals []*BidRequest_Impression_PMP_DirectDeal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
	Ext   *PMPExtensions                          `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Impression_PMP) Reset() {
	*x = BidRequest_Impression_PMP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression_PMP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression_PMP) ProtoMessage() {}

func (x *BidRequest_Impression_PMP) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression_PMP.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression_PMP) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *BidRequest_Impression_PMP) GetPrivateAuction() Flag {
	if x != nil && x.PrivateAuction != nil {
		return *x.PrivateAuction
	}
	return Flag_NO
}

func (x *BidRequest_Impression_PMP) GetDeals() []*BidRequest_Impression_PMP_DirectDeal {
	if x != nil {
		return x.Deals
	}
	return nil
}

func (x *BidRequest_Impression_PMP) GetExt() *PMPExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.17: constitutes a deal struck a priori between a buyer and a seller and
// indicates that this impression is available under the terms of that deal.
type BidRequest_Impression_PMP_DirectDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// A unique identifier for the direct deal.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// Bid floor for this impression (in CPM of bidfloorcur).
	Bidfloor *float64 `protobuf:"fixed64,2,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	//
	// If bid floor is specified and multiple currencies supported per bid request,
	// then currency should be specified here using ISO-4217 alphabetic codes. Notes.
	// this may be different from bid currency returned by bidder, if this is allowed
	// on an exchange.
	Bidfloorcur *string `protobuf:"bytes,3,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	//
	// Array of buyer seats allowed to bid on this auction. Seats are an optional feature
	// of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only advertisers
	// using these exchange seats are allowed to bid on the impressions in this auction.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat" json:"wseat,omitempty"`
	//
	// Array of advertiser domains allowed to bid on this Direct Deal. For example,
	// [ "advertiser1.com", "advertiser2.com" ] indicates that only the listed
	// advertisers are allowed to bid on this direct deal.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain" json:"wadomain,omitempty"`
	//
	// Auction Type. If “1”, then first price auction. If “2”, then second price auction.
	// Additional auction types can be defined as per the exchange’s business rules.
	At  *int32                `protobuf:"varint,6,opt,name=at" json:"at,omitempty"`
	Ext *DirectDealExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

// Default values for BidRequest_Impression_PMP_DirectDeal fields.
const (
	Default_BidRequest_Impression_PMP_DirectDeal_Bidfloor    = float64(0)
	Default_BidRequest_Impression_PMP_DirectDeal_Bidfloorcur = string("USD")
)

func (x *BidRequest_Impression_PMP_DirectDeal) Reset() {
	*x = BidRequest_Impression_PMP_DirectDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Impression_PMP_DirectDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Impression_PMP_DirectDeal) ProtoMessage() {}

func (x *BidRequest_Impression_PMP_DirectDeal) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Impression_PMP_DirectDeal.ProtoReflect.Descriptor instead.
func (*BidRequest_Impression_PMP_DirectDeal) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetBidfloor() float64 {
	if x != nil && x.Bidfloor != nil {
		return *x.Bidfloor
	}
	return Default_BidRequest_Impression_PMP_DirectDeal_Bidfloor
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetBidfloorcur() string {
	if x != nil && x.Bidfloorcur != nil {
		return *x.Bidfloorcur
	}
	return Default_BidRequest_Impression_PMP_DirectDeal_Bidfloorcur
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetWadomain() []string {
	if x != nil {
		return x.Wadomain
	}
	return nil
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetAt() int32 {
	if x != nil && x.At != nil {
		return *x.At
	}
	return 0
}

func (x *BidRequest_Impression_PMP_DirectDeal) GetExt() *DirectDealExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 3.3.14: convey specific units of information from the provider identified
// in the parent data object.
type BidRequest_Data_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// ID of a data provider’s segment applicable to the user.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	//
	// Name of a data provider’s segment applicable to the user.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// String representing the value of the segment. The method for transmitting this data
	// should be negotiated offline with the data provider.
	// For example for gender, “male”, or “female”, for age, “30-40”).
	Value *string            `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ext   *SegmentExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidRequest_Data_Segment) Reset() {
	*x = BidRequest_Data_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Data_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Data_Segment) ProtoMessage() {}

func (x *BidRequest_Data_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Data_Segment.ProtoReflect.Descriptor instead.
func (*BidRequest_Data_Segment) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *BidRequest_Data_Segment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Data_Segment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Data_Segment) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *BidRequest_Data_Segment) GetExt() *SegmentExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 4.3.2: A bid response can contain multiple “seatbid” objects, each on behalf of a
// different bidder seat. Since a bid request can include multiple impressions, each “seatbid”
// object can contain multiple bids each pertaining to a different impression on behalf of a seat.
// Thus, each “bid” object must include the impression ID to which it pertains as well as
// the bid price. The “group” attribute can be used to specify if a seat is willing to accept
// any impressions that it can win (default) or if it is only interested in winning any if it
// can win them all (i.e., all or nothing).
type BidResponse_SeatBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Array of bid objects; each bid object relates to an imp object in the bid request.
	// Note that, if supported by an exchange, one imp object can have many bid objects.
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	//
	// ID of the bidder seat on whose behalf this bid is made.
	Seat *string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
	//
	// Should impressions be won or lost as a group?
	Group *Flag              `protobuf:"varint,3,opt,name=group,enum=openrtb.Flag" json:"group,omitempty"`
	Ext   *SeatBidExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidResponse_SeatBid) Reset() {
	*x = BidResponse_SeatBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_SeatBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_SeatBid) ProtoMessage() {}

func (x *BidResponse_SeatBid) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_SeatBid.ProtoReflect.Descriptor instead.
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *BidResponse_SeatBid) GetSeat() string {
	if x != nil && x.Seat != nil {
		return *x.Seat
	}
	return ""
}

func (x *BidResponse_SeatBid) GetGroup() Flag {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Flag_NO
}

func (x *BidResponse_SeatBid) GetExt() *SeatBidExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//
// OpenRTB 4.3.3: For each bid, the “nurl” attribute contains the win notice URL.
// If the bidder wins the impression, the exchange calls this notice URL a) to inform the bidder
// of the win and b) to convey certain information using substitution macros
// (see Section 4.6 Substitution Macros). The “adomain” attribute can be used to check
// advertiser block list compliance. The “iurl” attribute can provide a link to an image that
// is representative of the campaign’s content (irrespective of whether the campaign may have
// multiple creatives). This enables human review for spotting inappropriate content.
// The “cid” attribute can be used to block ads that were previously identified as
// inappropriate; essentially a safety net beyond the block lists.  The “crid” attribute
// can be helpful in reporting creative issues back to bidders. Finally, the “attr” array
// indicates the creative attributes that describe the ad to be served.
type BidResponse_SeatBid_Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// ID for the bid object chosen by the bidder for tracking and debugging purposes.
	// Useful when multiple bids are submitted for a single impression for a given seat.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	//
	// ID of the impression object to which this bid applies.
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	//
	// Bid price in CPM. WARNING/Best Practice Note: Although this value is a float,
	// OpenRTB strongly suggests using integer math for accounting to avoid rounding errors.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	//
	// ID that references the ad to be served if the bid wins.
	Adid *string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	//
	// Win notice URL. Note that ad markup is also typically, but not necessarily,
	// returned via this URL.
	Nurl *string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	//
	// Actual ad markup. XHTML if a response to a banner object,
	// or VAST XML if a response to a video object.
	// <p>
	// Open Bidder macros are supported for this field.
	Adm *string `protobuf:"bytes,6,opt,name=adm" json:"adm,omitempty"`
	//
	// Native ad response.
	// You can only set one of adm and adm_native; either will generate the "adm" field in JSON.
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,json=admNative" json:"adm_native,omitempty"`
	//
	// Advertiser’s primary or top-level domain for advertiser checking.
	// This can be a list of domains if there is a rotating creative.
	// However, exchanges may mandate that only one landing domain is allowed.
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	//*
	// Bundle or package name (e.g., com.foo.mygame) of the app being advertised, if applicable;
	// intended to be a unique ID across exchanges.
	Bundle *string `protobuf:"bytes,15,opt,name=bundle" json:"bundle,omitempty"`
	//
	// Sample image URL (without cache busting) for content checking.
	Iurl *string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	//
	// Campaign ID or similar that appears within the ad markup.
	Cid *string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	//
	// Creative ID for reporting content issues or defects.
	// This could also be used as a reference to a creative ID that is posted with an exchange.
	// <p>
	// Open Bidder macros are supported for this field.
	Crid *string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	//*
	// IAB content category of the creative.
	Cat []string `protobuf:"bytes,16,rep,name=cat" json:"cat,omitempty"`
	//
	// Array of creative attributes.
	Attr []CreativeAttribute `protobuf:"varint,11,rep,name=attr,enum=openrtb.CreativeAttribute" json:"attr,omitempty"`
	//
	// A unique identifier for the direct deal associated with the bid.
	Dealid *string `protobuf:"bytes,12,opt,name=dealid" json:"dealid,omitempty"`
	//*
	// Width of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
	// optional fields it is recommended that the response bid contains this field to signal
	// the size of ad chosen.
	W *int32 `protobuf:"varint,13,opt,name=w" json:"w,omitempty"`
	//*
	// Height of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin
	// optional fields it is recommended that the response bid contains this field to signal
	// the size of ad chosen.
	H   *int32         `protobuf:"varint,14,opt,name=h" json:"h,omitempty"`
	Ext *BidExtensions `protobuf:"bytes,1000,opt,name=ext" json:"ext,omitempty"`
}

func (x *BidResponse_SeatBid_Bid) Reset() {
	*x = BidResponse_SeatBid_Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_SeatBid_Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_SeatBid_Bid) ProtoMessage() {}

func (x *BidResponse_SeatBid_Bid) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_SeatBid_Bid.ProtoReflect.Descriptor instead.
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *BidResponse_SeatBid_Bid) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetImpid() string {
	if x != nil && x.Impid != nil {
		return *x.Impid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetAdid() string {
	if x != nil && x.Adid != nil {
		return *x.Adid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetNurl() string {
	if x != nil && x.Nurl != nil {
		return *x.Nurl
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetAdm() string {
	if x != nil && x.Adm != nil {
		return *x.Adm
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if x != nil {
		return x.AdmNative
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if x != nil {
		return x.Adomain
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetBundle() string {
	if x != nil && x.Bundle != nil {
		return *x.Bundle
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetIurl() string {
	if x != nil && x.Iurl != nil {
		return *x.Iurl
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCrid() string {
	if x != nil && x.Crid != nil {
		return *x.Crid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetDealid() string {
	if x != nil && x.Dealid != nil {
		return *x.Dealid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetExt() *BidExtensions {
	if x != nil {
		return x.Ext
	}
	return nil
}

//*
// OpenRTB Native 4.2: The main container object for each asset requested or supported by
// Exchange on behalf of the rendering client. Any object that is required
// is to be flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be unique within
// the Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	//*
	// Set to true if asset is required (exchange will not accept a bid without it).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	//*
	// Title object for title assets.
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	//*
	// Image object for image assets.
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	//*
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native.  Native ads may contain a video
	// as the ad creative itself.
	Video *BidRequest_Impression_Video `protobuf:"bytes,5,opt,name=video" json:"video,omitempty"`
	//*
	// Data object for ratings, prices etc.
	Data *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

// Default values for NativeRequest_Asset fields.
const (
	Default_NativeRequest_Asset_Required = bool(false)
)

func (x *NativeRequest_Asset) Reset() {
	*x = NativeRequest_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset) ProtoMessage() {}

func (x *NativeRequest_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0}
}

var extRange_NativeRequest_Asset = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset
}

func (x *NativeRequest_Asset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NativeRequest_Asset) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return Default_NativeRequest_Asset_Required
}

func (x *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *NativeRequest_Asset) GetVideo() *BidRequest_Impression_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

//*
// OpenRTB Native 4.3: The Title object is to be used for title element of the Native ad.
type NativeRequest_Asset_Title struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Maximum length of the text in the title element.
	Len *int32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
}

func (x *NativeRequest_Asset_Title) Reset() {
	*x = NativeRequest_Asset_Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Title) ProtoMessage() {}

func (x *NativeRequest_Asset_Title) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Title.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Title) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0, 0}
}

var extRange_NativeRequest_Asset_Title = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Title.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Title) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Title
}

func (x *NativeRequest_Asset_Title) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

//*
// OpenRTB Native 4.4: The Image object to be used for all image elements of the
// Native ad such as Icons, Main Image, etc.
type NativeRequest_Asset_Image struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	Type *NativeRequest_Asset_Image_ImageAssetType `protobuf:"varint,1,opt,name=type,enum=openrtb.NativeRequest_Asset_Image_ImageAssetType" json:"type,omitempty"`
	//*
	// Width of the image in pixels.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	//*
	// Height of the image in pixels.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	//*
	// The minimum requested width of the image in pixels. This option should be used for any
	// rescaling of images by the client. Either w or wmin should be transmitted.
	// If only w is included, it should be considered an exact requirement.
	Wmin *int32 `protobuf:"varint,4,opt,name=wmin" json:"wmin,omitempty"`
	//*
	// The minimum requested height of the image in pixels. This option should be used for any
	// rescaling of images by the client. Either h or hmin should be transmitted.
	// If only h is included, it should be considered an exact requirement.
	Hmin *int32 `protobuf:"varint,5,opt,name=hmin" json:"hmin,omitempty"`
	//*
	// Whitelist of content MIME types supported. Popular MIME types include, but are not
	// limited to "image/jpg" and "image/gif". Each implementing Exchange should have their
	// own list of supported types in the integration docs. See Wikipedia's MIME page for
	// more information and links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes []string `protobuf:"bytes,6,rep,name=mimes" json:"mimes,omitempty"`
}

func (x *NativeRequest_Asset_Image) Reset() {
	*x = NativeRequest_Asset_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Image) ProtoMessage() {}

func (x *NativeRequest_Asset_Image) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Image.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Image) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0, 1}
}

var extRange_NativeRequest_Asset_Image = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Image.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Image) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Image
}

func (x *NativeRequest_Asset_Image) GetType() NativeRequest_Asset_Image_ImageAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NativeRequest_Asset_Image_ICON
}

func (x *NativeRequest_Asset_Image) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetHmin() int32 {
	if x != nil && x.Hmin != nil {
		return *x.Hmin
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

//*
// OpenRT Native 4.6: The Data Object is to be used for all non-core elements of the
// native unit such as Ratings, Review Count, Stars, Download count, descriptions etc.
// It is also generic for future of Native elements not contemplated at the time of the
// writing of this document.
type NativeRequest_Asset_Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Type ID of the element supported by the publisher. The publisher can display this
	// information in an appropriate format.
	Type *NativeRequest_Asset_Data_DataAssetType `protobuf:"varint,1,opt,name=type,enum=openrtb.NativeRequest_Asset_Data_DataAssetType" json:"type,omitempty"`
	//*
	// Maximum length of the text in the element's response.
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *NativeRequest_Asset_Data) Reset() {
	*x = NativeRequest_Asset_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Data) ProtoMessage() {}

func (x *NativeRequest_Asset_Data) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Data.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Data) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{2, 0, 2}
}

var extRange_NativeRequest_Asset_Data = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Data.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Data) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Data
}

func (x *NativeRequest_Asset_Data) GetType() NativeRequest_Asset_Data_DataAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NativeRequest_Asset_Data_SPONSORED
}

func (x *NativeRequest_Asset_Data) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

//*
// OpenRTB Native 5.8: Used for "call to action" assets, or other links from the Native ad.
// This Object should be associated to its peer object in the parent Asset Object.
// When that peer object is activated (clicked) the action should take the user to the
// location of the link.
type NativeResponse_Link struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Landing URL of the clickable link.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	//*
	// List of third-party tracker URLs to be fired on click of the URL.
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
	//*
	// Fallback URL for deeplink. To be used if the URL given in url is not supported by the device.
	Fallback *string `protobuf:"bytes,3,opt,name=fallback" json:"fallback,omitempty"`
}

func (x *NativeResponse_Link) Reset() {
	*x = NativeResponse_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Link) ProtoMessage() {}

func (x *NativeResponse_Link) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Link.ProtoReflect.Descriptor instead.
func (*NativeResponse_Link) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 0}
}

var extRange_NativeResponse_Link = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Link.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Link) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Link
}

func (x *NativeResponse_Link) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *NativeResponse_Link) GetClicktrackers() []string {
	if x != nil {
		return x.Clicktrackers
	}
	return nil
}

func (x *NativeResponse_Link) GetFallback() string {
	if x != nil && x.Fallback != nil {
		return *x.Fallback
	}
	return ""
}

//*
// OpenRTB Native 5.3: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange on behalf
// of the rendering client. Any object that is required is to be flagged as such.
// Only one of the {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the Asset array
// so that the response can be aligned.
type NativeResponse_Asset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// Unique asset ID, assigned by exchange, must match one of the asset IDs in request.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	//*
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	//*
	// Title object for title assets.
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	//*
	// Image object for image assets.
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	//*
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native. Native ads may contain a video
	// as the ad creative itself.
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video" json:"video,omitempty"`
	//*
	// Data object for ratings, prices etc.
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	//*
	// Link object for call to actions. This link is to associated to the other populated
	// field within the object.
	Link *NativeResponse_Link `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
}

// Default values for NativeResponse_Asset fields.
const (
	Default_NativeResponse_Asset_Required = bool(false)
)

func (x *NativeResponse_Asset) Reset() {
	*x = NativeResponse_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset) ProtoMessage() {}

func (x *NativeResponse_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 1}
}

var extRange_NativeResponse_Asset = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset
}

func (x *NativeResponse_Asset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NativeResponse_Asset) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return Default_NativeResponse_Asset_Required
}

func (x *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

//*
// OpenRTB Native 5.4: Corresponds to the Title Object in the request, with the value filled in.
type NativeResponse_Asset_Title struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// The text associated with the text element.
	Text *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
}

func (x *NativeResponse_Asset_Title) Reset() {
	*x = NativeResponse_Asset_Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Title) ProtoMessage() {}

func (x *NativeResponse_Asset_Title) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Title.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Title) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 1, 0}
}

var extRange_NativeResponse_Asset_Title = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Title.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Title) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Title
}

func (x *NativeResponse_Asset_Title) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

//*
// OpenRTB Native 5.5: Corresponds to the Image Object in the request. The Image object
// to be used for all image elements of the Native ad such as Icons, Main Image, etc.
type NativeResponse_Asset_Image struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// URL of the image asset.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	//*
	// Width of the image in pixels.
	// This field is not required, but it's highly recommended.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	//*
	// Height of the image in pixels.
	// This field is not required, but it's highly recommended.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
}

func (x *NativeResponse_Asset_Image) Reset() {
	*x = NativeResponse_Asset_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Image) ProtoMessage() {}

func (x *NativeResponse_Asset_Image) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Image.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Image) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 1, 1}
}

var extRange_NativeResponse_Asset_Image = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Image.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Image) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Image
}

func (x *NativeResponse_Asset_Image) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *NativeResponse_Asset_Image) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *NativeResponse_Asset_Image) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

//*
// OpenRTB Native 5.6: Corresponds to the Data Object in the request, with the value filled in.
// The Data Object is to be used for all miscellaneous elements of the native unit such as
// Ratings, Review Count, Stars, Downloads, Price count etc. It is also generic for future
// of Native elements not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// The optional formatted string name of the data type to be displayed.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	//*
	// The formatted string of data to be displayed. Can contain a formatted value such as
	// "5 stars" or "$10" or "3.4 stars out of 5".
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *NativeResponse_Asset_Data) Reset() {
	*x = NativeResponse_Asset_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Data) ProtoMessage() {}

func (x *NativeResponse_Asset_Data) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Data.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Data) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 1, 2}
}

var extRange_NativeResponse_Asset_Data = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Data.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Data) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Data
}

func (x *NativeResponse_Asset_Data) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *NativeResponse_Asset_Data) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

//*
// OpenRTB Native 5.7: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	//*
	// vast xml.
	Vasttag []string `protobuf:"bytes,1,rep,name=vasttag" json:"vasttag,omitempty"`
}

func (x *NativeResponse_Asset_Video) Reset() {
	*x = NativeResponse_Asset_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Video) ProtoMessage() {}

func (x *NativeResponse_Asset_Video) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Video.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Video) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_proto_rawDescGZIP(), []int{3, 1, 3}
}

var extRange_NativeResponse_Asset_Video = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Video.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Video) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Video
}

func (x *NativeResponse_Asset_Video) GetVasttag() []string {
	if x != nil {
		return x.Vasttag
	}
	return nil
}

var File_beeswax_openrtb_openrtb_proto protoreflect.FileDescriptor

var file_beeswax_openrtb_openrtb_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x1a, 0x1f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61,
	0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x73, 0x77,
	0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8f, 0x3e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x03, 0x69, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x69, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x02, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x73, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73,
	0x65, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x3a, 0x02, 0x4e, 0x4f, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x63, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x63, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x64, 0x76, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x64, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61,
	0x70, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x70, 0x70, 0x12, 0x33,
	0x0a, 0x04, 0x72, 0x65, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x72,
	0x65, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x49, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2a, 0x05, 0x08,
	0x64, 0x10, 0x90, 0x4e, 0x1a, 0xa8, 0x19, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3d,
	0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x3a, 0x02, 0x4e, 0x4f, 0x52, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x55, 0x53, 0x44, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x03, 0x70, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x4d,
	0x50, 0x52, 0x03, 0x70, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x30, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x1a, 0xe6, 0x04, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x61,
	0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6d, 0x61,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x77, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x48,
	0x0a, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x3a, 0x02, 0x4e, 0x4f, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x64, 0x69, 0x72, 0x12, 0x43, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2c, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xac, 0x0a, 0x0a, 0x05,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x3a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x33, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x31, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x3a, 0x03, 0x59, 0x45, 0x53, 0x52,
	0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x61,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x56, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x5e, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xf9, 0x01, 0x0a, 0x06, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x86, 0x03, 0x0a, 0x03, 0x50, 0x4d, 0x50, 0x12, 0x36,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x4d, 0x50, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x50, 0x4d, 0x50, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xd6, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x69, 0x64, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x63, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x55, 0x53, 0x44, 0x52, 0x0b,
	0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x73, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73, 0x65, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a,
	0xd5, 0x03, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xf2, 0x03, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12,
	0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72,
	0x6c, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xd6, 0x06, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x71, 0x61, 0x67, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x41, 0x47, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0e, 0x71, 0x61, 0x67,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0a, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x88, 0x07, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x64, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x03, 0x64, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75,
	0x61, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x30,
	0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x52, 0x02, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x03, 0x67, 0x65,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73,
	0x68, 0x61, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73,
	0x68, 0x61, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x6d,
	0x61, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x04, 0x6d,
	0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x03, 0x6f, 0x73, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x03, 0x6f, 0x73, 0x76, 0x12, 0x22, 0x0a, 0x02, 0x6a, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x3a, 0x03, 0x59, 0x45, 0x53, 0x52, 0x02, 0x6a, 0x73, 0x12, 0x6b, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6d,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6d, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x68, 0x77, 0x76, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x77, 0x76, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70,
	0x69, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x66, 0x61, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x66, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x73,
	0x68, 0x61, 0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x73, 0x68,
	0x61, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x6d, 0x64, 0x35, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x6d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63,
	0x63, 0x6d, 0x6e, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x63, 0x63, 0x6d,
	0x6e, 0x63, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x1a, 0x9d, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x79, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x03, 0x67,
	0x65, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65,
	0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x1a, 0x8a, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x88, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xc6, 0x02, 0x0a, 0x03, 0x47, 0x65, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x66, 0x69, 0x70, 0x73, 0x31, 0x30, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x70, 0x73, 0x31, 0x30, 0x34, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x74,
	0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x63,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x47,
	0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x1a, 0x86, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x72, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x65, 0x0a, 0x0b, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x70,
	0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x12, 0x31,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x22, 0xfa, 0x06, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64,
	0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x62, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x64,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x55, 0x53,
	0x44, 0x52, 0x03, 0x63, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x6e, 0x62, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x03, 0x6e, 0x62, 0x72,
	0x12, 0x31, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03,
	0x65, 0x78, 0x74, 0x1a, 0xe8, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x03,
	0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0xc0, 0x03, 0x0a, 0x03,
	0x42, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x64, 0x6d,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x68, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0xa6,
	0x0b, 0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x06, 0x61, 0x64, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x52, 0x06, 0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x08,
	0x70, 0x6c, 0x63, 0x6d, 0x74, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x31, 0x52, 0x08, 0x70, 0x6c, 0x63, 0x6d, 0x74, 0x63, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x69, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x70, 0x6c, 0x63, 0x6d, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6c,
	0x63, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc6, 0x06, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x03, 0x69, 0x6d, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6c,
	0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xdf, 0x01, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x03, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x9b, 0x02, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x0d,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x4c, 0x45, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x45, 0x53, 0x43, 0x32, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x55, 0x52, 0x4c, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x41,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0xf4, 0x03, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0xd7, 0x06, 0x0a, 0x0e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x61, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x9f, 0x04, 0x0a, 0x05, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x35, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x22, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e,
	0x1a, 0x3c, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x39,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x28, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x73, 0x74, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x73, 0x74, 0x74, 0x61, 0x67, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90,
	0x4e, 0x42, 0x15, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
}

var (
	file_beeswax_openrtb_openrtb_proto_rawDescOnce sync.Once
	file_beeswax_openrtb_openrtb_proto_rawDescData = file_beeswax_openrtb_openrtb_proto_rawDesc
)

func file_beeswax_openrtb_openrtb_proto_rawDescGZIP() []byte {
	file_beeswax_openrtb_openrtb_proto_rawDescOnce.Do(func() {
		file_beeswax_openrtb_openrtb_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_openrtb_openrtb_proto_rawDescData)
	})
	return file_beeswax_openrtb_openrtb_proto_rawDescData
}

var file_beeswax_openrtb_openrtb_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beeswax_openrtb_openrtb_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_beeswax_openrtb_openrtb_proto_goTypes = []interface{}{
	(NativeRequest_Asset_Image_ImageAssetType)(0),                 // 0: openrtb.NativeRequest.Asset.Image.ImageAssetType
	(NativeRequest_Asset_Data_DataAssetType)(0),                   // 1: openrtb.NativeRequest.Asset.Data.DataAssetType
	(*BidRequest)(nil),                                            // 2: openrtb.BidRequest
	(*BidResponse)(nil),                                           // 3: openrtb.BidResponse
	(*NativeRequest)(nil),                                         // 4: openrtb.NativeRequest
	(*NativeResponse)(nil),                                        // 5: openrtb.NativeResponse
	(*BidRequest_Source)(nil),                                     // 6: openrtb.BidRequest.Source
	(*BidRequest_Impression)(nil),                                 // 7: openrtb.BidRequest.Impression
	(*BidRequest_Site)(nil),                                       // 8: openrtb.BidRequest.Site
	(*BidRequest_App)(nil),                                        // 9: openrtb.BidRequest.App
	(*BidRequest_Content)(nil),                                    // 10: openrtb.BidRequest.Content
	(*BidRequest_Device)(nil),                                     // 11: openrtb.BidRequest.Device
	(*BidRequest_User)(nil),                                       // 12: openrtb.BidRequest.User
	(*BidRequest_Publisher)(nil),                                  // 13: openrtb.BidRequest.Publisher
	(*BidRequest_Producer)(nil),                                   // 14: openrtb.BidRequest.Producer
	(*BidRequest_Geo)(nil),                                        // 15: openrtb.BidRequest.Geo
	(*BidRequest_Data)(nil),                                       // 16: openrtb.BidRequest.Data
	(*BidRequest_Regulations)(nil),                                // 17: openrtb.BidRequest.Regulations
	(*BidRequest_Impression_Banner)(nil),                          // 18: openrtb.BidRequest.Impression.Banner
	(*BidRequest_Impression_Video)(nil),                           // 19: openrtb.BidRequest.Impression.Video
	(*BidRequest_Impression_Native)(nil),                          // 20: openrtb.BidRequest.Impression.Native
	(*BidRequest_Impression_PMP)(nil),                             // 21: openrtb.BidRequest.Impression.PMP
	(*BidRequest_Impression_PMP_DirectDeal)(nil),                  // 22: openrtb.BidRequest.Impression.PMP.DirectDeal
	(*BidRequest_Data_Segment)(nil),                               // 23: openrtb.BidRequest.Data.Segment
	(*BidResponse_SeatBid)(nil),                                   // 24: openrtb.BidResponse.SeatBid
	(*BidResponse_SeatBid_Bid)(nil),                               // 25: openrtb.BidResponse.SeatBid.Bid
	(*NativeRequest_Asset)(nil),                                   // 26: openrtb.NativeRequest.Asset
	(*NativeRequest_Asset_Title)(nil),                             // 27: openrtb.NativeRequest.Asset.Title
	(*NativeRequest_Asset_Image)(nil),                             // 28: openrtb.NativeRequest.Asset.Image
	(*NativeRequest_Asset_Data)(nil),                              // 29: openrtb.NativeRequest.Asset.Data
	(*NativeResponse_Link)(nil),                                   // 30: openrtb.NativeResponse.Link
	(*NativeResponse_Asset)(nil),                                  // 31: openrtb.NativeResponse.Asset
	(*NativeResponse_Asset_Title)(nil),                            // 32: openrtb.NativeResponse.Asset.Title
	(*NativeResponse_Asset_Image)(nil),                            // 33: openrtb.NativeResponse.Asset.Image
	(*NativeResponse_Asset_Data)(nil),                             // 34: openrtb.NativeResponse.Asset.Data
	(*NativeResponse_Asset_Video)(nil),                            // 35: openrtb.NativeResponse.Asset.Video
	(Flag)(0),                                                     // 36: openrtb.Flag
	(*BidRequestExtensions)(nil),                                  // 37: openrtb.BidRequestExtensions
	(Enums_BidResponse_NoBidReason)(0),                            // 38: openrtb.Enums.BidResponse.NoBidReason
	(*BidResponseExtensions)(nil),                                 // 39: openrtb.BidResponseExtensions
	(Enums_BidRequest_Impression_NativeRequest_LayoutId)(0),       // 40: openrtb.Enums.BidRequest.Impression.NativeRequest.LayoutId
	(Enums_BidRequest_Impression_NativeRequest_AdUnitId)(0),       // 41: openrtb.Enums.BidRequest.Impression.NativeRequest.AdUnitId
	(Enums_BidRequest_Impression_NativeRequest_Context)(0),        // 42: openrtb.Enums.BidRequest.Impression.NativeRequest.Context
	(Enums_BidRequest_Impression_NativeRequest_ContextSubtype)(0), // 43: openrtb.Enums.BidRequest.Impression.NativeRequest.ContextSubtype
	(Enums_BidRequest_Impression_NativeRequest_PlacementType)(0),  // 44: openrtb.Enums.BidRequest.Impression.NativeRequest.PlacementType
	(*ImpressionExtensions)(nil),                                  // 45: openrtb.ImpressionExtensions
	(*SiteExtensions)(nil),                                        // 46: openrtb.SiteExtensions
	(*AppExtensions)(nil),                                         // 47: openrtb.AppExtensions
	(Enums_BidRequest_Content_VideoQuality)(0),                    // 48: openrtb.Enums.BidRequest.Content.VideoQuality
	(Enums_BidRequest_Content_Context)(0),                         // 49: openrtb.Enums.BidRequest.Content.Context
	(Enums_BidRequest_Content_SourceRelationship)(0),              // 50: openrtb.Enums.BidRequest.Content.SourceRelationship
	(Enums_BidRequest_Content_QAGMediaRating)(0),                  // 51: openrtb.Enums.BidRequest.Content.QAGMediaRating
	(*ContentExtensions)(nil),                                     // 52: openrtb.ContentExtensions
	(Enums_BidRequest_Device_ConnectionType)(0),                   // 53: openrtb.Enums.BidRequest.Device.ConnectionType
	(Enums_BidRequest_Device_DeviceType)(0),                       // 54: openrtb.Enums.BidRequest.Device.DeviceType
	(*DeviceExtensions)(nil),                                      // 55: openrtb.DeviceExtensions
	(*UserExtensions)(nil),                                        // 56: openrtb.UserExtensions
	(*PublisherExtensions)(nil),                                   // 57: openrtb.PublisherExtensions
	(*ProducerExtensions)(nil),                                    // 58: openrtb.ProducerExtensions
	(Enums_BidRequest_Geo_LocationType)(0),                        // 59: openrtb.Enums.BidRequest.Geo.LocationType
	(*GeoExtensions)(nil),                                         // 60: openrtb.GeoExtensions
	(*DataExtensions)(nil),                                        // 61: openrtb.DataExtensions
	(*RegulationsExtensions)(nil),                                 // 62: openrtb.RegulationsExtensions
	(Enums_BidRequest_Impression_AdPosition)(0),                   // 63: openrtb.Enums.BidRequest.Impression.AdPosition
	(Enums_BidRequest_Impression_Banner_AdType)(0),                // 64: openrtb.Enums.BidRequest.Impression.Banner.AdType
	(CreativeAttribute)(0),                                        // 65: openrtb.CreativeAttribute
	(Enums_BidRequest_Impression_Banner_ExpandableDirection)(0),   // 66: openrtb.Enums.BidRequest.Impression.Banner.ExpandableDirection
	(Enums_BidRequest_Impression_ApiFramework)(0),                 // 67: openrtb.Enums.BidRequest.Impression.ApiFramework
	(*BannerExtensions)(nil),                                      // 68: openrtb.BannerExtensions
	(Enums_BidRequest_Impression_Video_Linearity)(0),              // 69: openrtb.Enums.BidRequest.Impression.Video.Linearity
	(Enums_BidRequest_Impression_Video_Protocol)(0),               // 70: openrtb.Enums.BidRequest.Impression.Video.Protocol
	(Enums_BidRequest_Impression_Video_PlaybackMethod)(0),         // 71: openrtb.Enums.BidRequest.Impression.Video.PlaybackMethod
	(Enums_BidRequest_Impression_Video_ContentDelivery)(0),        // 72: openrtb.Enums.BidRequest.Impression.Video.ContentDelivery
	(Enums_BidRequest_Impression_Video_CompanionType)(0),          // 73: openrtb.Enums.BidRequest.Impression.Video.CompanionType
	(Enums_BidRequest_Impression_Video_VideoPlacementType)(0),     // 74: openrtb.Enums.BidRequest.Impression.Video.VideoPlacementType
	(Enums_BidRequest_Impression_Video_PlaybackCessationMode)(0),  // 75: openrtb.Enums.BidRequest.Impression.Video.PlaybackCessationMode
	(*VideoExtensions)(nil),                                       // 76: openrtb.VideoExtensions
	(*NativeExtensions)(nil),                                      // 77: openrtb.NativeExtensions
	(*PMPExtensions)(nil),                                         // 78: openrtb.PMPExtensions
	(*DirectDealExtensions)(nil),                                  // 79: openrtb.DirectDealExtensions
	(*SegmentExtensions)(nil),                                     // 80: openrtb.SegmentExtensions
	(*SeatBidExtensions)(nil),                                     // 81: openrtb.SeatBidExtensions
	(*BidExtensions)(nil),                                         // 82: openrtb.BidExtensions
}
var file_beeswax_openrtb_openrtb_proto_depIdxs = []int32{
	7,   // 0: openrtb.BidRequest.imp:type_name -> openrtb.BidRequest.Impression
	8,   // 1: openrtb.BidRequest.site:type_name -> openrtb.BidRequest.Site
	9,   // 2: openrtb.BidRequest.app:type_name -> openrtb.BidRequest.App
	11,  // 3: openrtb.BidRequest.device:type_name -> openrtb.BidRequest.Device
	12,  // 4: openrtb.BidRequest.user:type_name -> openrtb.BidRequest.User
	36,  // 5: openrtb.BidRequest.allimps:type_name -> openrtb.Flag
	17,  // 6: openrtb.BidRequest.regs:type_name -> openrtb.BidRequest.Regulations
	6,   // 7: openrtb.BidRequest.source:type_name -> openrtb.BidRequest.Source
	37,  // 8: openrtb.BidRequest.ext:type_name -> openrtb.BidRequestExtensions
	24,  // 9: openrtb.BidResponse.seatbid:type_name -> openrtb.BidResponse.SeatBid
	38,  // 10: openrtb.BidResponse.nbr:type_name -> openrtb.Enums.BidResponse.NoBidReason
	39,  // 11: openrtb.BidResponse.ext:type_name -> openrtb.BidResponseExtensions
	40,  // 12: openrtb.NativeRequest.layout:type_name -> openrtb.Enums.BidRequest.Impression.NativeRequest.LayoutId
	41,  // 13: openrtb.NativeRequest.adunit:type_name -> openrtb.Enums.BidRequest.Impression.NativeRequest.AdUnitId
	26,  // 14: openrtb.NativeRequest.assets:type_name -> openrtb.NativeRequest.Asset
	42,  // 15: openrtb.NativeRequest.context:type_name -> openrtb.Enums.BidRequest.Impression.NativeRequest.Context
	43,  // 16: openrtb.NativeRequest.contextsubtype:type_name -> openrtb.Enums.BidRequest.Impression.NativeRequest.ContextSubtype
	44,  // 17: openrtb.NativeRequest.plcmttype:type_name -> openrtb.Enums.BidRequest.Impression.NativeRequest.PlacementType
	31,  // 18: openrtb.NativeResponse.assets:type_name -> openrtb.NativeResponse.Asset
	30,  // 19: openrtb.NativeResponse.link:type_name -> openrtb.NativeResponse.Link
	18,  // 20: openrtb.BidRequest.Impression.banner:type_name -> openrtb.BidRequest.Impression.Banner
	19,  // 21: openrtb.BidRequest.Impression.video:type_name -> openrtb.BidRequest.Impression.Video
	20,  // 22: openrtb.BidRequest.Impression.native:type_name -> openrtb.BidRequest.Impression.Native
	36,  // 23: openrtb.BidRequest.Impression.instl:type_name -> openrtb.Flag
	21,  // 24: openrtb.BidRequest.Impression.pmp:type_name -> openrtb.BidRequest.Impression.PMP
	45,  // 25: openrtb.BidRequest.Impression.ext:type_name -> openrtb.ImpressionExtensions
	36,  // 26: openrtb.BidRequest.Site.privacypolicy:type_name -> openrtb.Flag
	13,  // 27: openrtb.BidRequest.Site.publisher:type_name -> openrtb.BidRequest.Publisher
	10,  // 28: openrtb.BidRequest.Site.content:type_name -> openrtb.BidRequest.Content
	46,  // 29: openrtb.BidRequest.Site.ext:type_name -> openrtb.SiteExtensions
	36,  // 30: openrtb.BidRequest.App.privacypolicy:type_name -> openrtb.Flag
	36,  // 31: openrtb.BidRequest.App.paid:type_name -> openrtb.Flag
	13,  // 32: openrtb.BidRequest.App.publisher:type_name -> openrtb.BidRequest.Publisher
	10,  // 33: openrtb.BidRequest.App.content:type_name -> openrtb.BidRequest.Content
	47,  // 34: openrtb.BidRequest.App.ext:type_name -> openrtb.AppExtensions
	48,  // 35: openrtb.BidRequest.Content.videoquality:type_name -> openrtb.Enums.BidRequest.Content.VideoQuality
	49,  // 36: openrtb.BidRequest.Content.context:type_name -> openrtb.Enums.BidRequest.Content.Context
	36,  // 37: openrtb.BidRequest.Content.livestream:type_name -> openrtb.Flag
	50,  // 38: openrtb.BidRequest.Content.sourcerelationship:type_name -> openrtb.Enums.BidRequest.Content.SourceRelationship
	14,  // 39: openrtb.BidRequest.Content.producer:type_name -> openrtb.BidRequest.Producer
	51,  // 40: openrtb.BidRequest.Content.qagmediarating:type_name -> openrtb.Enums.BidRequest.Content.QAGMediaRating
	36,  // 41: openrtb.BidRequest.Content.embeddable:type_name -> openrtb.Flag
	52,  // 42: openrtb.BidRequest.Content.ext:type_name -> openrtb.ContentExtensions
	36,  // 43: openrtb.BidRequest.Device.dnt:type_name -> openrtb.Flag
	15,  // 44: openrtb.BidRequest.Device.geo:type_name -> openrtb.BidRequest.Geo
	36,  // 45: openrtb.BidRequest.Device.js:type_name -> openrtb.Flag
	53,  // 46: openrtb.BidRequest.Device.connectiontype:type_name -> openrtb.Enums.BidRequest.Device.ConnectionType
	54,  // 47: openrtb.BidRequest.Device.devicetype:type_name -> openrtb.Enums.BidRequest.Device.DeviceType
	55,  // 48: openrtb.BidRequest.Device.ext:type_name -> openrtb.DeviceExtensions
	15,  // 49: openrtb.BidRequest.User.geo:type_name -> openrtb.BidRequest.Geo
	16,  // 50: openrtb.BidRequest.User.data:type_name -> openrtb.BidRequest.Data
	56,  // 51: openrtb.BidRequest.User.ext:type_name -> openrtb.UserExtensions
	57,  // 52: openrtb.BidRequest.Publisher.ext:type_name -> openrtb.PublisherExtensions
	58,  // 53: openrtb.BidRequest.Producer.ext:type_name -> openrtb.ProducerExtensions
	59,  // 54: openrtb.BidRequest.Geo.type:type_name -> openrtb.Enums.BidRequest.Geo.LocationType
	60,  // 55: openrtb.BidRequest.Geo.ext:type_name -> openrtb.GeoExtensions
	23,  // 56: openrtb.BidRequest.Data.segment:type_name -> openrtb.BidRequest.Data.Segment
	61,  // 57: openrtb.BidRequest.Data.ext:type_name -> openrtb.DataExtensions
	36,  // 58: openrtb.BidRequest.Regulations.coppa:type_name -> openrtb.Flag
	62,  // 59: openrtb.BidRequest.Regulations.ext:type_name -> openrtb.RegulationsExtensions
	63,  // 60: openrtb.BidRequest.Impression.Banner.pos:type_name -> openrtb.Enums.BidRequest.Impression.AdPosition
	64,  // 61: openrtb.BidRequest.Impression.Banner.btype:type_name -> openrtb.Enums.BidRequest.Impression.Banner.AdType
	65,  // 62: openrtb.BidRequest.Impression.Banner.battr:type_name -> openrtb.CreativeAttribute
	36,  // 63: openrtb.BidRequest.Impression.Banner.topframe:type_name -> openrtb.Flag
	66,  // 64: openrtb.BidRequest.Impression.Banner.expdir:type_name -> openrtb.Enums.BidRequest.Impression.Banner.ExpandableDirection
	67,  // 65: openrtb.BidRequest.Impression.Banner.api:type_name -> openrtb.Enums.BidRequest.Impression.ApiFramework
	68,  // 66: openrtb.BidRequest.Impression.Banner.ext:type_name -> openrtb.BannerExtensions
	69,  // 67: openrtb.BidRequest.Impression.Video.linearity:type_name -> openrtb.Enums.BidRequest.Impression.Video.Linearity
	70,  // 68: openrtb.BidRequest.Impression.Video.protocols:type_name -> openrtb.Enums.BidRequest.Impression.Video.Protocol
	65,  // 69: openrtb.BidRequest.Impression.Video.battr:type_name -> openrtb.CreativeAttribute
	36,  // 70: openrtb.BidRequest.Impression.Video.boxingallowed:type_name -> openrtb.Flag
	71,  // 71: openrtb.BidRequest.Impression.Video.playbackmethod:type_name -> openrtb.Enums.BidRequest.Impression.Video.PlaybackMethod
	72,  // 72: openrtb.BidRequest.Impression.Video.delivery:type_name -> openrtb.Enums.BidRequest.Impression.Video.ContentDelivery
	63,  // 73: openrtb.BidRequest.Impression.Video.pos:type_name -> openrtb.Enums.BidRequest.Impression.AdPosition
	18,  // 74: openrtb.BidRequest.Impression.Video.companionad:type_name -> openrtb.BidRequest.Impression.Banner
	67,  // 75: openrtb.BidRequest.Impression.Video.api:type_name -> openrtb.Enums.BidRequest.Impression.ApiFramework
	73,  // 76: openrtb.BidRequest.Impression.Video.companiontype:type_name -> openrtb.Enums.BidRequest.Impression.Video.CompanionType
	74,  // 77: openrtb.BidRequest.Impression.Video.placement:type_name -> openrtb.Enums.BidRequest.Impression.Video.VideoPlacementType
	75,  // 78: openrtb.BidRequest.Impression.Video.playbackend:type_name -> openrtb.Enums.BidRequest.Impression.Video.PlaybackCessationMode
	76,  // 79: openrtb.BidRequest.Impression.Video.ext:type_name -> openrtb.VideoExtensions
	4,   // 80: openrtb.BidRequest.Impression.Native.request:type_name -> openrtb.NativeRequest
	67,  // 81: openrtb.BidRequest.Impression.Native.api:type_name -> openrtb.Enums.BidRequest.Impression.ApiFramework
	65,  // 82: openrtb.BidRequest.Impression.Native.battr:type_name -> openrtb.CreativeAttribute
	77,  // 83: openrtb.BidRequest.Impression.Native.ext:type_name -> openrtb.NativeExtensions
	36,  // 84: openrtb.BidRequest.Impression.PMP.private_auction:type_name -> openrtb.Flag
	22,  // 85: openrtb.BidRequest.Impression.PMP.deals:type_name -> openrtb.BidRequest.Impression.PMP.DirectDeal
	78,  // 86: openrtb.BidRequest.Impression.PMP.ext:type_name -> openrtb.PMPExtensions
	79,  // 87: openrtb.BidRequest.Impression.PMP.DirectDeal.ext:type_name -> openrtb.DirectDealExtensions
	80,  // 88: openrtb.BidRequest.Data.Segment.ext:type_name -> openrtb.SegmentExtensions
	25,  // 89: openrtb.BidResponse.SeatBid.bid:type_name -> openrtb.BidResponse.SeatBid.Bid
	36,  // 90: openrtb.BidResponse.SeatBid.group:type_name -> openrtb.Flag
	81,  // 91: openrtb.BidResponse.SeatBid.ext:type_name -> openrtb.SeatBidExtensions
	5,   // 92: openrtb.BidResponse.SeatBid.Bid.adm_native:type_name -> openrtb.NativeResponse
	65,  // 93: openrtb.BidResponse.SeatBid.Bid.attr:type_name -> openrtb.CreativeAttribute
	82,  // 94: openrtb.BidResponse.SeatBid.Bid.ext:type_name -> openrtb.BidExtensions
	27,  // 95: openrtb.NativeRequest.Asset.title:type_name -> openrtb.NativeRequest.Asset.Title
	28,  // 96: openrtb.NativeRequest.Asset.img:type_name -> openrtb.NativeRequest.Asset.Image
	19,  // 97: openrtb.NativeRequest.Asset.video:type_name -> openrtb.BidRequest.Impression.Video
	29,  // 98: openrtb.NativeRequest.Asset.data:type_name -> openrtb.NativeRequest.Asset.Data
	0,   // 99: openrtb.NativeRequest.Asset.Image.type:type_name -> openrtb.NativeRequest.Asset.Image.ImageAssetType
	1,   // 100: openrtb.NativeRequest.Asset.Data.type:type_name -> openrtb.NativeRequest.Asset.Data.DataAssetType
	32,  // 101: openrtb.NativeResponse.Asset.title:type_name -> openrtb.NativeResponse.Asset.Title
	33,  // 102: openrtb.NativeResponse.Asset.img:type_name -> openrtb.NativeResponse.Asset.Image
	35,  // 103: openrtb.NativeResponse.Asset.video:type_name -> openrtb.NativeResponse.Asset.Video
	34,  // 104: openrtb.NativeResponse.Asset.data:type_name -> openrtb.NativeResponse.Asset.Data
	30,  // 105: openrtb.NativeResponse.Asset.link:type_name -> openrtb.NativeResponse.Link
	106, // [106:106] is the sub-list for method output_type
	106, // [106:106] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_beeswax_openrtb_openrtb_proto_init() }
func file_beeswax_openrtb_openrtb_proto_init() {
	if File_beeswax_openrtb_openrtb_proto != nil {
		return
	}
	file_beeswax_openrtb_extension_proto_init()
	file_beeswax_openrtb_openrtb_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beeswax_openrtb_openrtb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Publisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Regulations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression_Native); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression_PMP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Impression_PMP_DirectDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Data_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_SeatBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_SeatBid_Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_openrtb_openrtb_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_openrtb_openrtb_proto_goTypes,
		DependencyIndexes: file_beeswax_openrtb_openrtb_proto_depIdxs,
		EnumInfos:         file_beeswax_openrtb_openrtb_proto_enumTypes,
		MessageInfos:      file_beeswax_openrtb_openrtb_proto_msgTypes,
	}.Build()
	File_beeswax_openrtb_openrtb_proto = out.File
	file_beeswax_openrtb_openrtb_proto_rawDesc = nil
	file_beeswax_openrtb_openrtb_proto_goTypes = nil
	file_beeswax_openrtb_openrtb_proto_depIdxs = nil
}
