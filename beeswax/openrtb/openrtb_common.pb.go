// Copyright 2015, BeeswaxIO Inc.
//
// Common constants, enums of OpenRTB spec that are shared by different systems.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/openrtb/openrtb_common.proto

package openrtb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OpenRTB 6.1: IAB contextual taxonomy for categorization.
type ContentCategory int32

const (
	ContentCategory_IAB1     ContentCategory = 1   // Arts & Entertainment
	ContentCategory_IAB1_1   ContentCategory = 2   // Books & Literature
	ContentCategory_IAB1_2   ContentCategory = 3   // Celebrity Fan/Gossip
	ContentCategory_IAB1_3   ContentCategory = 4   // Fine Art
	ContentCategory_IAB1_4   ContentCategory = 5   // Humor
	ContentCategory_IAB1_5   ContentCategory = 6   // Movies
	ContentCategory_IAB1_6   ContentCategory = 7   // Music
	ContentCategory_IAB1_7   ContentCategory = 8   // Television
	ContentCategory_IAB2     ContentCategory = 9   // Automotive
	ContentCategory_IAB2_1   ContentCategory = 10  // Auto Parts
	ContentCategory_IAB2_2   ContentCategory = 11  // Auto Repair
	ContentCategory_IAB2_3   ContentCategory = 12  // Buying/Selling Cars
	ContentCategory_IAB2_4   ContentCategory = 13  // Car Culture
	ContentCategory_IAB2_5   ContentCategory = 14  // Certified Pre-Owned
	ContentCategory_IAB2_6   ContentCategory = 15  // Convertible
	ContentCategory_IAB2_7   ContentCategory = 16  // Coupe
	ContentCategory_IAB2_8   ContentCategory = 17  // Crossover
	ContentCategory_IAB2_9   ContentCategory = 18  // Diesel
	ContentCategory_IAB2_10  ContentCategory = 19  // Electric Vehicle
	ContentCategory_IAB2_11  ContentCategory = 20  // Hatchback
	ContentCategory_IAB2_12  ContentCategory = 21  // Hybrid
	ContentCategory_IAB2_13  ContentCategory = 22  // Luxury
	ContentCategory_IAB2_14  ContentCategory = 23  // MiniVan
	ContentCategory_IAB2_15  ContentCategory = 24  // Mororcycles
	ContentCategory_IAB2_16  ContentCategory = 25  // Off-Road Vehicles
	ContentCategory_IAB2_17  ContentCategory = 26  // Performance Vehicles
	ContentCategory_IAB2_18  ContentCategory = 27  // Pickup
	ContentCategory_IAB2_19  ContentCategory = 28  // Road-Side Assistance
	ContentCategory_IAB2_20  ContentCategory = 29  // Sedan
	ContentCategory_IAB2_21  ContentCategory = 30  // Trucks & Accessories
	ContentCategory_IAB2_22  ContentCategory = 31  // Vintage Cars
	ContentCategory_IAB2_23  ContentCategory = 32  // Wagon
	ContentCategory_IAB3     ContentCategory = 33  // Business
	ContentCategory_IAB3_1   ContentCategory = 34  // Advertising
	ContentCategory_IAB3_2   ContentCategory = 35  // Agriculture
	ContentCategory_IAB3_3   ContentCategory = 36  // Biotech/Biomedical
	ContentCategory_IAB3_4   ContentCategory = 37  // Business Software
	ContentCategory_IAB3_5   ContentCategory = 38  // Construction
	ContentCategory_IAB3_6   ContentCategory = 39  // Forestry
	ContentCategory_IAB3_7   ContentCategory = 40  // Government
	ContentCategory_IAB3_8   ContentCategory = 41  // Green Solutions
	ContentCategory_IAB3_9   ContentCategory = 42  // Human Resources
	ContentCategory_IAB3_10  ContentCategory = 43  // Logistics
	ContentCategory_IAB3_11  ContentCategory = 44  // Marketing
	ContentCategory_IAB3_12  ContentCategory = 45  // Metals
	ContentCategory_IAB4     ContentCategory = 46  // Careers
	ContentCategory_IAB4_1   ContentCategory = 47  // Career Planning
	ContentCategory_IAB4_2   ContentCategory = 48  // College
	ContentCategory_IAB4_3   ContentCategory = 49  // Financial  Aid
	ContentCategory_IAB4_4   ContentCategory = 50  // Job Fairs
	ContentCategory_IAB4_5   ContentCategory = 51  // Job Search
	ContentCategory_IAB4_6   ContentCategory = 52  // Resume Writing/Advice
	ContentCategory_IAB4_7   ContentCategory = 53  // Nursing
	ContentCategory_IAB4_8   ContentCategory = 54  // Scholarships
	ContentCategory_IAB4_9   ContentCategory = 55  // Telecommuting
	ContentCategory_IAB4_10  ContentCategory = 56  // U.S. Military
	ContentCategory_IAB4_11  ContentCategory = 57  // Career Advice
	ContentCategory_IAB5     ContentCategory = 58  // Education
	ContentCategory_IAB5_1   ContentCategory = 59  // 7-12 Education
	ContentCategory_IAB5_2   ContentCategory = 60  // Adult Education
	ContentCategory_IAB5_3   ContentCategory = 61  // Art History
	ContentCategory_IAB5_4   ContentCategory = 62  // Colledge Administration
	ContentCategory_IAB5_5   ContentCategory = 63  // College Life
	ContentCategory_IAB5_6   ContentCategory = 64  // Distance Learning
	ContentCategory_IAB5_7   ContentCategory = 65  // English as a 2nd Language
	ContentCategory_IAB5_8   ContentCategory = 66  // Language Learning
	ContentCategory_IAB5_9   ContentCategory = 67  // Graduate School
	ContentCategory_IAB5_10  ContentCategory = 68  // Homeschooling
	ContentCategory_IAB5_11  ContentCategory = 69  // Homework/Study Tips
	ContentCategory_IAB5_12  ContentCategory = 70  // K-6 Educators
	ContentCategory_IAB5_13  ContentCategory = 71  // Private School
	ContentCategory_IAB5_14  ContentCategory = 72  // Special Education
	ContentCategory_IAB5_15  ContentCategory = 73  // Studying Business
	ContentCategory_IAB6     ContentCategory = 74  // Family & Parenting
	ContentCategory_IAB6_1   ContentCategory = 75  // Adoption
	ContentCategory_IAB6_2   ContentCategory = 76  // Babies & Toddlers
	ContentCategory_IAB6_3   ContentCategory = 77  // Daycare/Pre School
	ContentCategory_IAB6_4   ContentCategory = 78  // Family Internet
	ContentCategory_IAB6_5   ContentCategory = 79  // Parenting - K-6 Kids
	ContentCategory_IAB6_6   ContentCategory = 80  // Parenting teens
	ContentCategory_IAB6_7   ContentCategory = 81  // Pregnancy
	ContentCategory_IAB6_8   ContentCategory = 82  // Special Needs Kids
	ContentCategory_IAB6_9   ContentCategory = 83  // Eldercare
	ContentCategory_IAB7     ContentCategory = 84  // Health & Fitness
	ContentCategory_IAB7_1   ContentCategory = 85  // Exercise
	ContentCategory_IAB7_2   ContentCategory = 86  // A.D.D.
	ContentCategory_IAB7_3   ContentCategory = 87  // AIDS/HIV
	ContentCategory_IAB7_4   ContentCategory = 88  // Allergies
	ContentCategory_IAB7_5   ContentCategory = 89  // Alternative Medicine
	ContentCategory_IAB7_6   ContentCategory = 90  // Arthritis
	ContentCategory_IAB7_7   ContentCategory = 91  // Asthma
	ContentCategory_IAB7_8   ContentCategory = 92  // Autism/PDD
	ContentCategory_IAB7_9   ContentCategory = 93  // Bipolar Disorder
	ContentCategory_IAB7_10  ContentCategory = 94  // Brain Tumor
	ContentCategory_IAB7_11  ContentCategory = 95  // Cancer
	ContentCategory_IAB7_12  ContentCategory = 96  // Cholesterol
	ContentCategory_IAB7_13  ContentCategory = 97  // Chronic Fatigue Syndrome
	ContentCategory_IAB7_14  ContentCategory = 98  // Chronic Pain
	ContentCategory_IAB7_15  ContentCategory = 99  // Cold & Flu
	ContentCategory_IAB7_16  ContentCategory = 100 // Deafness
	ContentCategory_IAB7_17  ContentCategory = 101 // Dental Care
	ContentCategory_IAB7_18  ContentCategory = 102 // Depression
	ContentCategory_IAB7_19  ContentCategory = 103 // Dermatology
	ContentCategory_IAB7_20  ContentCategory = 104 // Diabetes
	ContentCategory_IAB7_21  ContentCategory = 105 // Epilepsy
	ContentCategory_IAB7_22  ContentCategory = 106 // GERD/Acid Reflux
	ContentCategory_IAB7_23  ContentCategory = 107 // Headaches/Migraines
	ContentCategory_IAB7_24  ContentCategory = 108 // Heart Disease
	ContentCategory_IAB7_25  ContentCategory = 109 // Herbs for Health
	ContentCategory_IAB7_26  ContentCategory = 110 // Holistic Healing
	ContentCategory_IAB7_27  ContentCategory = 111 // IBS/Crohn's Disease
	ContentCategory_IAB7_28  ContentCategory = 112 // Incest/Abuse Support
	ContentCategory_IAB7_29  ContentCategory = 113 // Incontinence
	ContentCategory_IAB7_30  ContentCategory = 114 // Infertility
	ContentCategory_IAB7_31  ContentCategory = 115 // Men's Health
	ContentCategory_IAB7_32  ContentCategory = 116 // Nutrition
	ContentCategory_IAB7_33  ContentCategory = 117 // Orthopedics
	ContentCategory_IAB7_34  ContentCategory = 118 // Panic/Anxiety Disorders
	ContentCategory_IAB7_35  ContentCategory = 119 // Pediatrics
	ContentCategory_IAB7_36  ContentCategory = 120 // Physical Therapy
	ContentCategory_IAB7_37  ContentCategory = 121 // Psychology/Psychiatry
	ContentCategory_IAB7_38  ContentCategory = 122 // Senor Health
	ContentCategory_IAB7_39  ContentCategory = 123 // Sexuality
	ContentCategory_IAB7_40  ContentCategory = 124 // Sleep Disorders
	ContentCategory_IAB7_41  ContentCategory = 125 // Smoking Cessation
	ContentCategory_IAB7_42  ContentCategory = 126 // Substance Abuse
	ContentCategory_IAB7_43  ContentCategory = 127 // Thyroid Disease
	ContentCategory_IAB7_44  ContentCategory = 128 // Weight Loss
	ContentCategory_IAB7_45  ContentCategory = 129 // Women's Health
	ContentCategory_IAB8     ContentCategory = 130 // Food & Drink
	ContentCategory_IAB8_1   ContentCategory = 131 // American Cuisine
	ContentCategory_IAB8_2   ContentCategory = 132 // Barbecues & Grilling
	ContentCategory_IAB8_3   ContentCategory = 133 // Cajun/Creole
	ContentCategory_IAB8_4   ContentCategory = 134 // Chinese Cuisine
	ContentCategory_IAB8_5   ContentCategory = 135 // Cocktails/Beer
	ContentCategory_IAB8_6   ContentCategory = 136 // Coffee/Tea
	ContentCategory_IAB8_7   ContentCategory = 137 // Cuisine-Specific
	ContentCategory_IAB8_8   ContentCategory = 138 // Desserts & Baking
	ContentCategory_IAB8_9   ContentCategory = 139 // Dining Out
	ContentCategory_IAB8_10  ContentCategory = 140 // Food Allergies
	ContentCategory_IAB8_11  ContentCategory = 141 // French Cuisine
	ContentCategory_IAB8_12  ContentCategory = 142 // Health/Lowfat Cooking
	ContentCategory_IAB8_13  ContentCategory = 143 // Italian Cuisine
	ContentCategory_IAB8_14  ContentCategory = 144 // Japanese Cuisine
	ContentCategory_IAB8_15  ContentCategory = 145 // Mexican Cuisine
	ContentCategory_IAB8_16  ContentCategory = 146 // Vegan
	ContentCategory_IAB8_17  ContentCategory = 147 // Vegetarian
	ContentCategory_IAB8_18  ContentCategory = 148 // Wine
	ContentCategory_IAB9     ContentCategory = 149 // Hobbies & Interests
	ContentCategory_IAB9_1   ContentCategory = 150 // Art/Technology
	ContentCategory_IAB9_2   ContentCategory = 151 // Arts & Crafts
	ContentCategory_IAB9_3   ContentCategory = 152 // Beadwork
	ContentCategory_IAB9_4   ContentCategory = 153 // Birdwatching
	ContentCategory_IAB9_5   ContentCategory = 154 // Board Games/Puzzles
	ContentCategory_IAB9_6   ContentCategory = 155 // Candle & Soap Making
	ContentCategory_IAB9_7   ContentCategory = 156 // Card Games
	ContentCategory_IAB9_8   ContentCategory = 157 // Chess
	ContentCategory_IAB9_9   ContentCategory = 158 // Cigars
	ContentCategory_IAB9_10  ContentCategory = 159 // Collecting
	ContentCategory_IAB9_11  ContentCategory = 160 // Comic Books
	ContentCategory_IAB9_12  ContentCategory = 161 // Drawing/Sketching
	ContentCategory_IAB9_13  ContentCategory = 162 // Freelance Writing
	ContentCategory_IAB9_14  ContentCategory = 163 // Geneaology
	ContentCategory_IAB9_15  ContentCategory = 164 // Getting Published
	ContentCategory_IAB9_16  ContentCategory = 165 // Guitar
	ContentCategory_IAB9_17  ContentCategory = 166 // Home Recording
	ContentCategory_IAB9_18  ContentCategory = 167 // Investors & Patents
	ContentCategory_IAB9_19  ContentCategory = 168 // Jewelry Making
	ContentCategory_IAB9_20  ContentCategory = 169 // Magic & Illusion
	ContentCategory_IAB9_21  ContentCategory = 170 // Needlework
	ContentCategory_IAB9_22  ContentCategory = 171 // Painting
	ContentCategory_IAB9_23  ContentCategory = 172 // Photography
	ContentCategory_IAB9_24  ContentCategory = 173 // Radio
	ContentCategory_IAB9_25  ContentCategory = 174 // Roleplaying Games
	ContentCategory_IAB9_26  ContentCategory = 175 // Sci-Fi & Fantasy
	ContentCategory_IAB9_27  ContentCategory = 176 // Scrapbooking
	ContentCategory_IAB9_28  ContentCategory = 177 // Screenwriting
	ContentCategory_IAB9_29  ContentCategory = 178 // Stamps & Coins
	ContentCategory_IAB9_30  ContentCategory = 179 // Video & Computer Games
	ContentCategory_IAB9_31  ContentCategory = 180 // Woodworking
	ContentCategory_IAB10    ContentCategory = 181 // Home & Garden
	ContentCategory_IAB10_1  ContentCategory = 182 // Appliances
	ContentCategory_IAB10_2  ContentCategory = 183 // Entertaining
	ContentCategory_IAB10_3  ContentCategory = 184 // Environmental Safety
	ContentCategory_IAB10_4  ContentCategory = 185 // Gardening
	ContentCategory_IAB10_5  ContentCategory = 186 // Home Repair
	ContentCategory_IAB10_6  ContentCategory = 187 // Home Theater
	ContentCategory_IAB10_7  ContentCategory = 188 // Interior  Decorating
	ContentCategory_IAB10_8  ContentCategory = 189 // Landscaping
	ContentCategory_IAB10_9  ContentCategory = 190 // Remodeling & Construction
	ContentCategory_IAB11    ContentCategory = 191 // Law, Gov't & Politics
	ContentCategory_IAB11_1  ContentCategory = 192 // Immigration
	ContentCategory_IAB11_2  ContentCategory = 193 // Legal Issues
	ContentCategory_IAB11_3  ContentCategory = 194 // U.S. Government Resources
	ContentCategory_IAB11_4  ContentCategory = 195 // Politics
	ContentCategory_IAB11_5  ContentCategory = 196 // Commentary
	ContentCategory_IAB12    ContentCategory = 197 // News
	ContentCategory_IAB12_1  ContentCategory = 198 // International News
	ContentCategory_IAB12_2  ContentCategory = 199 // National News
	ContentCategory_IAB12_3  ContentCategory = 200 // Local News
	ContentCategory_IAB13    ContentCategory = 201 // Personal Finance
	ContentCategory_IAB13_1  ContentCategory = 202 // Beginning Investing
	ContentCategory_IAB13_2  ContentCategory = 203 // Credit/Debt & Loans
	ContentCategory_IAB13_3  ContentCategory = 204 // Financial News
	ContentCategory_IAB13_4  ContentCategory = 205 // Financial Planning
	ContentCategory_IAB13_5  ContentCategory = 206 // Hedge Fund
	ContentCategory_IAB13_6  ContentCategory = 207 // Insurance
	ContentCategory_IAB13_7  ContentCategory = 208 // Investing
	ContentCategory_IAB13_8  ContentCategory = 209 // Mutual Funds
	ContentCategory_IAB13_9  ContentCategory = 210 // Options
	ContentCategory_IAB13_10 ContentCategory = 211 // Retirement Planning
	ContentCategory_IAB13_11 ContentCategory = 212 // Stocks
	ContentCategory_IAB13_12 ContentCategory = 213 // Tax Planning
	ContentCategory_IAB14    ContentCategory = 214 // Society
	ContentCategory_IAB14_1  ContentCategory = 215 // Dating
	ContentCategory_IAB14_2  ContentCategory = 216 // Divorce Support
	ContentCategory_IAB14_3  ContentCategory = 217 // Gay Life
	ContentCategory_IAB14_4  ContentCategory = 218 // Marriage
	ContentCategory_IAB14_5  ContentCategory = 219 // Senior Living
	ContentCategory_IAB14_6  ContentCategory = 220 // Teens
	ContentCategory_IAB14_7  ContentCategory = 221 // Weddings
	ContentCategory_IAB14_8  ContentCategory = 222 // Ethnic Specific
	ContentCategory_IAB15    ContentCategory = 223 // Science
	ContentCategory_IAB15_1  ContentCategory = 224 // Astrology
	ContentCategory_IAB15_2  ContentCategory = 225 // Biology
	ContentCategory_IAB15_3  ContentCategory = 226 // Chemistry
	ContentCategory_IAB15_4  ContentCategory = 227 // Geology
	ContentCategory_IAB15_5  ContentCategory = 228 // Paranormal Phenomena
	ContentCategory_IAB15_6  ContentCategory = 229 // Physics
	ContentCategory_IAB15_7  ContentCategory = 230 // Space/Astronomy
	ContentCategory_IAB15_8  ContentCategory = 231 // Geography
	ContentCategory_IAB15_9  ContentCategory = 232 // Botany
	ContentCategory_IAB15_10 ContentCategory = 233 // Weather
	ContentCategory_IAB16    ContentCategory = 234 // Pets
	ContentCategory_IAB16_1  ContentCategory = 235 // Aquariums
	ContentCategory_IAB16_2  ContentCategory = 236 // Birds
	ContentCategory_IAB16_3  ContentCategory = 237 // Cats
	ContentCategory_IAB16_4  ContentCategory = 238 // Dogs
	ContentCategory_IAB16_5  ContentCategory = 239 // Large Animals
	ContentCategory_IAB16_6  ContentCategory = 240 // Reptiles
	ContentCategory_IAB16_7  ContentCategory = 241 // Veterinary Medicine
	ContentCategory_IAB17    ContentCategory = 242 // Sports
	ContentCategory_IAB17_1  ContentCategory = 243 // Auto Racing
	ContentCategory_IAB17_2  ContentCategory = 244 // Baseball
	ContentCategory_IAB17_3  ContentCategory = 245 // Bicycling
	ContentCategory_IAB17_4  ContentCategory = 246 // Bodybuilding
	ContentCategory_IAB17_5  ContentCategory = 247 // Boxing
	ContentCategory_IAB17_6  ContentCategory = 248 // Canoeing/Kayaking
	ContentCategory_IAB17_7  ContentCategory = 249 // Cheerleading
	ContentCategory_IAB17_8  ContentCategory = 250 // Climbing
	ContentCategory_IAB17_9  ContentCategory = 251 // Cricket
	ContentCategory_IAB17_10 ContentCategory = 252 // Figure Skating
	ContentCategory_IAB17_11 ContentCategory = 253 // Fly Fishing
	ContentCategory_IAB17_12 ContentCategory = 254 // Football
	ContentCategory_IAB17_13 ContentCategory = 255 // Freshwater Fishing
	ContentCategory_IAB17_14 ContentCategory = 256 // Game & Fish
	ContentCategory_IAB17_15 ContentCategory = 257 // Golf
	ContentCategory_IAB17_16 ContentCategory = 258 // Horse Racing
	ContentCategory_IAB17_17 ContentCategory = 259 // Horses
	ContentCategory_IAB17_18 ContentCategory = 260 // Hunting/Shooting
	ContentCategory_IAB17_19 ContentCategory = 261 // Inline  Skating
	ContentCategory_IAB17_20 ContentCategory = 262 // Martial Arts
	ContentCategory_IAB17_21 ContentCategory = 263 // Mountain Biking
	ContentCategory_IAB17_22 ContentCategory = 264 // NASCAR Racing
	ContentCategory_IAB17_23 ContentCategory = 265 // Olympics
	ContentCategory_IAB17_24 ContentCategory = 266 // Paintball
	ContentCategory_IAB17_25 ContentCategory = 267 // Power & Motorcycles
	ContentCategory_IAB17_26 ContentCategory = 268 // Pro Basketball
	ContentCategory_IAB17_27 ContentCategory = 269 // Pro Ice Hockey
	ContentCategory_IAB17_28 ContentCategory = 270 // Rodeo
	ContentCategory_IAB17_29 ContentCategory = 271 // Rugby
	ContentCategory_IAB17_30 ContentCategory = 272 // Running/Jogging
	ContentCategory_IAB17_31 ContentCategory = 273 // Sailing
	ContentCategory_IAB17_32 ContentCategory = 274 // Saltwater Fishing
	ContentCategory_IAB17_33 ContentCategory = 275 // Scuba Diving
	ContentCategory_IAB17_34 ContentCategory = 276 // Skateboarding
	ContentCategory_IAB17_35 ContentCategory = 277 // Skiing
	ContentCategory_IAB17_36 ContentCategory = 278 // Snowboarding
	ContentCategory_IAB17_37 ContentCategory = 279 // Surfing/Bodyboarding
	ContentCategory_IAB17_38 ContentCategory = 280 // Swimming
	ContentCategory_IAB17_39 ContentCategory = 281 // Table Tennis/Ping-Pong
	ContentCategory_IAB17_40 ContentCategory = 282 // Tennis
	ContentCategory_IAB17_41 ContentCategory = 283 // Volleyball
	ContentCategory_IAB17_42 ContentCategory = 284 // Walking
	ContentCategory_IAB17_43 ContentCategory = 285 // Waterski/Wakeboard
	ContentCategory_IAB17_44 ContentCategory = 286 // World Soccer
	ContentCategory_IAB18    ContentCategory = 287 // Style & Fashion
	ContentCategory_IAB18_1  ContentCategory = 288 // Beauty
	ContentCategory_IAB18_2  ContentCategory = 289 // Body Art
	ContentCategory_IAB18_3  ContentCategory = 290 // Fashion
	ContentCategory_IAB18_4  ContentCategory = 291 // Jewelry
	ContentCategory_IAB18_5  ContentCategory = 292 // Clothing
	ContentCategory_IAB18_6  ContentCategory = 293 // Accessories
	ContentCategory_IAB19    ContentCategory = 294 // Technology & Computing
	ContentCategory_IAB19_1  ContentCategory = 295 // 3-D Graphics
	ContentCategory_IAB19_2  ContentCategory = 296 // Animation
	ContentCategory_IAB19_3  ContentCategory = 297 // Antivirus Software
	ContentCategory_IAB19_4  ContentCategory = 298 // C/C++
	ContentCategory_IAB19_5  ContentCategory = 299 // Cameras & Camcorders
	ContentCategory_IAB19_6  ContentCategory = 300 // Cell  Phones
	ContentCategory_IAB19_7  ContentCategory = 301 // Computer Certification
	ContentCategory_IAB19_8  ContentCategory = 302 // Computer Networking
	ContentCategory_IAB19_9  ContentCategory = 303 // Computer Peripherals
	ContentCategory_IAB19_10 ContentCategory = 304 // Computer Reviews
	ContentCategory_IAB19_11 ContentCategory = 305 // Data Centers
	ContentCategory_IAB19_12 ContentCategory = 306 // Databases
	ContentCategory_IAB19_13 ContentCategory = 307 // Desktop Publishing
	ContentCategory_IAB19_14 ContentCategory = 308 // Desktop Video
	ContentCategory_IAB19_15 ContentCategory = 309 // Email
	ContentCategory_IAB19_16 ContentCategory = 310 // Graphics Software
	ContentCategory_IAB19_17 ContentCategory = 311 // Home Video/DVD
	ContentCategory_IAB19_18 ContentCategory = 312 // Internet Technology
	ContentCategory_IAB19_19 ContentCategory = 313 // Java
	ContentCategory_IAB19_20 ContentCategory = 314 // Javascript
	ContentCategory_IAB19_21 ContentCategory = 315 // Mac Support
	ContentCategory_IAB19_22 ContentCategory = 316 // MP3/MIDI
	ContentCategory_IAB19_23 ContentCategory = 317 // Net Conferencing
	ContentCategory_IAB19_24 ContentCategory = 318 // Net for Beginners
	ContentCategory_IAB19_25 ContentCategory = 319 // Network Security
	ContentCategory_IAB19_26 ContentCategory = 320 // Palmtops/PDAs
	ContentCategory_IAB19_27 ContentCategory = 321 // PC Support
	ContentCategory_IAB19_28 ContentCategory = 322 // Portable
	ContentCategory_IAB19_29 ContentCategory = 323 // Entertainment
	ContentCategory_IAB19_30 ContentCategory = 324 // Shareware/Freeware
	ContentCategory_IAB19_31 ContentCategory = 325 // Unix
	ContentCategory_IAB19_32 ContentCategory = 326 // Visual Basic
	ContentCategory_IAB19_33 ContentCategory = 327 // Web Clip Art
	ContentCategory_IAB19_34 ContentCategory = 328 // Web Design/HTML
	ContentCategory_IAB19_35 ContentCategory = 329 // Web Search
	ContentCategory_IAB19_36 ContentCategory = 330 // Windows
	ContentCategory_IAB20    ContentCategory = 331 // Travel
	ContentCategory_IAB20_1  ContentCategory = 332 // Adventure Travel
	ContentCategory_IAB20_2  ContentCategory = 333 // Africa
	ContentCategory_IAB20_3  ContentCategory = 334 // Air Travel
	ContentCategory_IAB20_4  ContentCategory = 335 // Australia & New Zealand
	ContentCategory_IAB20_5  ContentCategory = 336 // Bed & Breakfasts
	ContentCategory_IAB20_6  ContentCategory = 337 // Budget Travel
	ContentCategory_IAB20_7  ContentCategory = 338 // Business Travel
	ContentCategory_IAB20_8  ContentCategory = 339 // By US Locale
	ContentCategory_IAB20_9  ContentCategory = 340 // Camping
	ContentCategory_IAB20_10 ContentCategory = 341 // Canada
	ContentCategory_IAB20_11 ContentCategory = 342 // Caribbean
	ContentCategory_IAB20_12 ContentCategory = 343 // Cruises
	ContentCategory_IAB20_13 ContentCategory = 344 // Eastern  Europe
	ContentCategory_IAB20_14 ContentCategory = 345 // Europe
	ContentCategory_IAB20_15 ContentCategory = 346 // France
	ContentCategory_IAB20_16 ContentCategory = 347 // Greece
	ContentCategory_IAB20_17 ContentCategory = 348 // Honeymoons/Getaways
	ContentCategory_IAB20_18 ContentCategory = 349 // Hotels
	ContentCategory_IAB20_19 ContentCategory = 350 // Italy
	ContentCategory_IAB20_20 ContentCategory = 351 // Japan
	ContentCategory_IAB20_21 ContentCategory = 352 // Mexico & Central America
	ContentCategory_IAB20_22 ContentCategory = 353 // National Parks
	ContentCategory_IAB20_23 ContentCategory = 354 // South America
	ContentCategory_IAB20_24 ContentCategory = 355 // Spas
	ContentCategory_IAB20_25 ContentCategory = 356 // Theme Parks
	ContentCategory_IAB20_26 ContentCategory = 357 // Traveling with Kids
	ContentCategory_IAB20_27 ContentCategory = 358 // United Kingdom
	ContentCategory_IAB21    ContentCategory = 359 // Real Estate
	ContentCategory_IAB21_1  ContentCategory = 360 // Apartments
	ContentCategory_IAB21_2  ContentCategory = 361 // Architects
	ContentCategory_IAB21_3  ContentCategory = 362 // Buying/Selling Homes
	ContentCategory_IAB22    ContentCategory = 363 // Shopping
	ContentCategory_IAB22_1  ContentCategory = 364 // Contests & Freebies
	ContentCategory_IAB22_2  ContentCategory = 365 // Couponing
	ContentCategory_IAB22_3  ContentCategory = 366 // Comparison
	ContentCategory_IAB22_4  ContentCategory = 367 // Engines
	ContentCategory_IAB23    ContentCategory = 368 // Religion & Spirituality
	ContentCategory_IAB23_1  ContentCategory = 369 // Alternative Religions
	ContentCategory_IAB23_2  ContentCategory = 370 // Atheism/Agnosticism
	ContentCategory_IAB23_3  ContentCategory = 371 // Buddhism
	ContentCategory_IAB23_4  ContentCategory = 372 // Catholicism
	ContentCategory_IAB23_5  ContentCategory = 373 // Christianity
	ContentCategory_IAB23_6  ContentCategory = 374 // Hinduism
	ContentCategory_IAB23_7  ContentCategory = 375 // Islam
	ContentCategory_IAB23_8  ContentCategory = 376 // Judaism
	ContentCategory_IAB23_9  ContentCategory = 377 // Latter-Day Saints
	ContentCategory_IAB23_10 ContentCategory = 378 // Paga/Wiccan
	ContentCategory_IAB24    ContentCategory = 379 // Uncategorized
	ContentCategory_IAB25    ContentCategory = 380 // Non-Standard Content
	ContentCategory_IAB25_1  ContentCategory = 381 // Unmoderated UGC
	ContentCategory_IAB25_2  ContentCategory = 382 // Extreme Graphic/Explicit Violence
	ContentCategory_IAB25_3  ContentCategory = 383 // Pornography
	ContentCategory_IAB25_4  ContentCategory = 384 // Profane Content
	ContentCategory_IAB25_5  ContentCategory = 385 // Hate Content
	ContentCategory_IAB25_6  ContentCategory = 386 // Under Construction
	ContentCategory_IAB25_7  ContentCategory = 387 // Incentivized
	ContentCategory_IAB26    ContentCategory = 388 // Illegal Content
	ContentCategory_IAB26_1  ContentCategory = 389 // Illegal Content
	ContentCategory_IAB26_2  ContentCategory = 390 // Warez
	ContentCategory_IAB26_3  ContentCategory = 391 // Spyware/Malware
	ContentCategory_IAB26_4  ContentCategory = 392 // Copyright Infringement
)

// Enum value maps for ContentCategory.
var (
	ContentCategory_name = map[int32]string{
		1:   "IAB1",
		2:   "IAB1_1",
		3:   "IAB1_2",
		4:   "IAB1_3",
		5:   "IAB1_4",
		6:   "IAB1_5",
		7:   "IAB1_6",
		8:   "IAB1_7",
		9:   "IAB2",
		10:  "IAB2_1",
		11:  "IAB2_2",
		12:  "IAB2_3",
		13:  "IAB2_4",
		14:  "IAB2_5",
		15:  "IAB2_6",
		16:  "IAB2_7",
		17:  "IAB2_8",
		18:  "IAB2_9",
		19:  "IAB2_10",
		20:  "IAB2_11",
		21:  "IAB2_12",
		22:  "IAB2_13",
		23:  "IAB2_14",
		24:  "IAB2_15",
		25:  "IAB2_16",
		26:  "IAB2_17",
		27:  "IAB2_18",
		28:  "IAB2_19",
		29:  "IAB2_20",
		30:  "IAB2_21",
		31:  "IAB2_22",
		32:  "IAB2_23",
		33:  "IAB3",
		34:  "IAB3_1",
		35:  "IAB3_2",
		36:  "IAB3_3",
		37:  "IAB3_4",
		38:  "IAB3_5",
		39:  "IAB3_6",
		40:  "IAB3_7",
		41:  "IAB3_8",
		42:  "IAB3_9",
		43:  "IAB3_10",
		44:  "IAB3_11",
		45:  "IAB3_12",
		46:  "IAB4",
		47:  "IAB4_1",
		48:  "IAB4_2",
		49:  "IAB4_3",
		50:  "IAB4_4",
		51:  "IAB4_5",
		52:  "IAB4_6",
		53:  "IAB4_7",
		54:  "IAB4_8",
		55:  "IAB4_9",
		56:  "IAB4_10",
		57:  "IAB4_11",
		58:  "IAB5",
		59:  "IAB5_1",
		60:  "IAB5_2",
		61:  "IAB5_3",
		62:  "IAB5_4",
		63:  "IAB5_5",
		64:  "IAB5_6",
		65:  "IAB5_7",
		66:  "IAB5_8",
		67:  "IAB5_9",
		68:  "IAB5_10",
		69:  "IAB5_11",
		70:  "IAB5_12",
		71:  "IAB5_13",
		72:  "IAB5_14",
		73:  "IAB5_15",
		74:  "IAB6",
		75:  "IAB6_1",
		76:  "IAB6_2",
		77:  "IAB6_3",
		78:  "IAB6_4",
		79:  "IAB6_5",
		80:  "IAB6_6",
		81:  "IAB6_7",
		82:  "IAB6_8",
		83:  "IAB6_9",
		84:  "IAB7",
		85:  "IAB7_1",
		86:  "IAB7_2",
		87:  "IAB7_3",
		88:  "IAB7_4",
		89:  "IAB7_5",
		90:  "IAB7_6",
		91:  "IAB7_7",
		92:  "IAB7_8",
		93:  "IAB7_9",
		94:  "IAB7_10",
		95:  "IAB7_11",
		96:  "IAB7_12",
		97:  "IAB7_13",
		98:  "IAB7_14",
		99:  "IAB7_15",
		100: "IAB7_16",
		101: "IAB7_17",
		102: "IAB7_18",
		103: "IAB7_19",
		104: "IAB7_20",
		105: "IAB7_21",
		106: "IAB7_22",
		107: "IAB7_23",
		108: "IAB7_24",
		109: "IAB7_25",
		110: "IAB7_26",
		111: "IAB7_27",
		112: "IAB7_28",
		113: "IAB7_29",
		114: "IAB7_30",
		115: "IAB7_31",
		116: "IAB7_32",
		117: "IAB7_33",
		118: "IAB7_34",
		119: "IAB7_35",
		120: "IAB7_36",
		121: "IAB7_37",
		122: "IAB7_38",
		123: "IAB7_39",
		124: "IAB7_40",
		125: "IAB7_41",
		126: "IAB7_42",
		127: "IAB7_43",
		128: "IAB7_44",
		129: "IAB7_45",
		130: "IAB8",
		131: "IAB8_1",
		132: "IAB8_2",
		133: "IAB8_3",
		134: "IAB8_4",
		135: "IAB8_5",
		136: "IAB8_6",
		137: "IAB8_7",
		138: "IAB8_8",
		139: "IAB8_9",
		140: "IAB8_10",
		141: "IAB8_11",
		142: "IAB8_12",
		143: "IAB8_13",
		144: "IAB8_14",
		145: "IAB8_15",
		146: "IAB8_16",
		147: "IAB8_17",
		148: "IAB8_18",
		149: "IAB9",
		150: "IAB9_1",
		151: "IAB9_2",
		152: "IAB9_3",
		153: "IAB9_4",
		154: "IAB9_5",
		155: "IAB9_6",
		156: "IAB9_7",
		157: "IAB9_8",
		158: "IAB9_9",
		159: "IAB9_10",
		160: "IAB9_11",
		161: "IAB9_12",
		162: "IAB9_13",
		163: "IAB9_14",
		164: "IAB9_15",
		165: "IAB9_16",
		166: "IAB9_17",
		167: "IAB9_18",
		168: "IAB9_19",
		169: "IAB9_20",
		170: "IAB9_21",
		171: "IAB9_22",
		172: "IAB9_23",
		173: "IAB9_24",
		174: "IAB9_25",
		175: "IAB9_26",
		176: "IAB9_27",
		177: "IAB9_28",
		178: "IAB9_29",
		179: "IAB9_30",
		180: "IAB9_31",
		181: "IAB10",
		182: "IAB10_1",
		183: "IAB10_2",
		184: "IAB10_3",
		185: "IAB10_4",
		186: "IAB10_5",
		187: "IAB10_6",
		188: "IAB10_7",
		189: "IAB10_8",
		190: "IAB10_9",
		191: "IAB11",
		192: "IAB11_1",
		193: "IAB11_2",
		194: "IAB11_3",
		195: "IAB11_4",
		196: "IAB11_5",
		197: "IAB12",
		198: "IAB12_1",
		199: "IAB12_2",
		200: "IAB12_3",
		201: "IAB13",
		202: "IAB13_1",
		203: "IAB13_2",
		204: "IAB13_3",
		205: "IAB13_4",
		206: "IAB13_5",
		207: "IAB13_6",
		208: "IAB13_7",
		209: "IAB13_8",
		210: "IAB13_9",
		211: "IAB13_10",
		212: "IAB13_11",
		213: "IAB13_12",
		214: "IAB14",
		215: "IAB14_1",
		216: "IAB14_2",
		217: "IAB14_3",
		218: "IAB14_4",
		219: "IAB14_5",
		220: "IAB14_6",
		221: "IAB14_7",
		222: "IAB14_8",
		223: "IAB15",
		224: "IAB15_1",
		225: "IAB15_2",
		226: "IAB15_3",
		227: "IAB15_4",
		228: "IAB15_5",
		229: "IAB15_6",
		230: "IAB15_7",
		231: "IAB15_8",
		232: "IAB15_9",
		233: "IAB15_10",
		234: "IAB16",
		235: "IAB16_1",
		236: "IAB16_2",
		237: "IAB16_3",
		238: "IAB16_4",
		239: "IAB16_5",
		240: "IAB16_6",
		241: "IAB16_7",
		242: "IAB17",
		243: "IAB17_1",
		244: "IAB17_2",
		245: "IAB17_3",
		246: "IAB17_4",
		247: "IAB17_5",
		248: "IAB17_6",
		249: "IAB17_7",
		250: "IAB17_8",
		251: "IAB17_9",
		252: "IAB17_10",
		253: "IAB17_11",
		254: "IAB17_12",
		255: "IAB17_13",
		256: "IAB17_14",
		257: "IAB17_15",
		258: "IAB17_16",
		259: "IAB17_17",
		260: "IAB17_18",
		261: "IAB17_19",
		262: "IAB17_20",
		263: "IAB17_21",
		264: "IAB17_22",
		265: "IAB17_23",
		266: "IAB17_24",
		267: "IAB17_25",
		268: "IAB17_26",
		269: "IAB17_27",
		270: "IAB17_28",
		271: "IAB17_29",
		272: "IAB17_30",
		273: "IAB17_31",
		274: "IAB17_32",
		275: "IAB17_33",
		276: "IAB17_34",
		277: "IAB17_35",
		278: "IAB17_36",
		279: "IAB17_37",
		280: "IAB17_38",
		281: "IAB17_39",
		282: "IAB17_40",
		283: "IAB17_41",
		284: "IAB17_42",
		285: "IAB17_43",
		286: "IAB17_44",
		287: "IAB18",
		288: "IAB18_1",
		289: "IAB18_2",
		290: "IAB18_3",
		291: "IAB18_4",
		292: "IAB18_5",
		293: "IAB18_6",
		294: "IAB19",
		295: "IAB19_1",
		296: "IAB19_2",
		297: "IAB19_3",
		298: "IAB19_4",
		299: "IAB19_5",
		300: "IAB19_6",
		301: "IAB19_7",
		302: "IAB19_8",
		303: "IAB19_9",
		304: "IAB19_10",
		305: "IAB19_11",
		306: "IAB19_12",
		307: "IAB19_13",
		308: "IAB19_14",
		309: "IAB19_15",
		310: "IAB19_16",
		311: "IAB19_17",
		312: "IAB19_18",
		313: "IAB19_19",
		314: "IAB19_20",
		315: "IAB19_21",
		316: "IAB19_22",
		317: "IAB19_23",
		318: "IAB19_24",
		319: "IAB19_25",
		320: "IAB19_26",
		321: "IAB19_27",
		322: "IAB19_28",
		323: "IAB19_29",
		324: "IAB19_30",
		325: "IAB19_31",
		326: "IAB19_32",
		327: "IAB19_33",
		328: "IAB19_34",
		329: "IAB19_35",
		330: "IAB19_36",
		331: "IAB20",
		332: "IAB20_1",
		333: "IAB20_2",
		334: "IAB20_3",
		335: "IAB20_4",
		336: "IAB20_5",
		337: "IAB20_6",
		338: "IAB20_7",
		339: "IAB20_8",
		340: "IAB20_9",
		341: "IAB20_10",
		342: "IAB20_11",
		343: "IAB20_12",
		344: "IAB20_13",
		345: "IAB20_14",
		346: "IAB20_15",
		347: "IAB20_16",
		348: "IAB20_17",
		349: "IAB20_18",
		350: "IAB20_19",
		351: "IAB20_20",
		352: "IAB20_21",
		353: "IAB20_22",
		354: "IAB20_23",
		355: "IAB20_24",
		356: "IAB20_25",
		357: "IAB20_26",
		358: "IAB20_27",
		359: "IAB21",
		360: "IAB21_1",
		361: "IAB21_2",
		362: "IAB21_3",
		363: "IAB22",
		364: "IAB22_1",
		365: "IAB22_2",
		366: "IAB22_3",
		367: "IAB22_4",
		368: "IAB23",
		369: "IAB23_1",
		370: "IAB23_2",
		371: "IAB23_3",
		372: "IAB23_4",
		373: "IAB23_5",
		374: "IAB23_6",
		375: "IAB23_7",
		376: "IAB23_8",
		377: "IAB23_9",
		378: "IAB23_10",
		379: "IAB24",
		380: "IAB25",
		381: "IAB25_1",
		382: "IAB25_2",
		383: "IAB25_3",
		384: "IAB25_4",
		385: "IAB25_5",
		386: "IAB25_6",
		387: "IAB25_7",
		388: "IAB26",
		389: "IAB26_1",
		390: "IAB26_2",
		391: "IAB26_3",
		392: "IAB26_4",
	}
	ContentCategory_value = map[string]int32{
		"IAB1":     1,
		"IAB1_1":   2,
		"IAB1_2":   3,
		"IAB1_3":   4,
		"IAB1_4":   5,
		"IAB1_5":   6,
		"IAB1_6":   7,
		"IAB1_7":   8,
		"IAB2":     9,
		"IAB2_1":   10,
		"IAB2_2":   11,
		"IAB2_3":   12,
		"IAB2_4":   13,
		"IAB2_5":   14,
		"IAB2_6":   15,
		"IAB2_7":   16,
		"IAB2_8":   17,
		"IAB2_9":   18,
		"IAB2_10":  19,
		"IAB2_11":  20,
		"IAB2_12":  21,
		"IAB2_13":  22,
		"IAB2_14":  23,
		"IAB2_15":  24,
		"IAB2_16":  25,
		"IAB2_17":  26,
		"IAB2_18":  27,
		"IAB2_19":  28,
		"IAB2_20":  29,
		"IAB2_21":  30,
		"IAB2_22":  31,
		"IAB2_23":  32,
		"IAB3":     33,
		"IAB3_1":   34,
		"IAB3_2":   35,
		"IAB3_3":   36,
		"IAB3_4":   37,
		"IAB3_5":   38,
		"IAB3_6":   39,
		"IAB3_7":   40,
		"IAB3_8":   41,
		"IAB3_9":   42,
		"IAB3_10":  43,
		"IAB3_11":  44,
		"IAB3_12":  45,
		"IAB4":     46,
		"IAB4_1":   47,
		"IAB4_2":   48,
		"IAB4_3":   49,
		"IAB4_4":   50,
		"IAB4_5":   51,
		"IAB4_6":   52,
		"IAB4_7":   53,
		"IAB4_8":   54,
		"IAB4_9":   55,
		"IAB4_10":  56,
		"IAB4_11":  57,
		"IAB5":     58,
		"IAB5_1":   59,
		"IAB5_2":   60,
		"IAB5_3":   61,
		"IAB5_4":   62,
		"IAB5_5":   63,
		"IAB5_6":   64,
		"IAB5_7":   65,
		"IAB5_8":   66,
		"IAB5_9":   67,
		"IAB5_10":  68,
		"IAB5_11":  69,
		"IAB5_12":  70,
		"IAB5_13":  71,
		"IAB5_14":  72,
		"IAB5_15":  73,
		"IAB6":     74,
		"IAB6_1":   75,
		"IAB6_2":   76,
		"IAB6_3":   77,
		"IAB6_4":   78,
		"IAB6_5":   79,
		"IAB6_6":   80,
		"IAB6_7":   81,
		"IAB6_8":   82,
		"IAB6_9":   83,
		"IAB7":     84,
		"IAB7_1":   85,
		"IAB7_2":   86,
		"IAB7_3":   87,
		"IAB7_4":   88,
		"IAB7_5":   89,
		"IAB7_6":   90,
		"IAB7_7":   91,
		"IAB7_8":   92,
		"IAB7_9":   93,
		"IAB7_10":  94,
		"IAB7_11":  95,
		"IAB7_12":  96,
		"IAB7_13":  97,
		"IAB7_14":  98,
		"IAB7_15":  99,
		"IAB7_16":  100,
		"IAB7_17":  101,
		"IAB7_18":  102,
		"IAB7_19":  103,
		"IAB7_20":  104,
		"IAB7_21":  105,
		"IAB7_22":  106,
		"IAB7_23":  107,
		"IAB7_24":  108,
		"IAB7_25":  109,
		"IAB7_26":  110,
		"IAB7_27":  111,
		"IAB7_28":  112,
		"IAB7_29":  113,
		"IAB7_30":  114,
		"IAB7_31":  115,
		"IAB7_32":  116,
		"IAB7_33":  117,
		"IAB7_34":  118,
		"IAB7_35":  119,
		"IAB7_36":  120,
		"IAB7_37":  121,
		"IAB7_38":  122,
		"IAB7_39":  123,
		"IAB7_40":  124,
		"IAB7_41":  125,
		"IAB7_42":  126,
		"IAB7_43":  127,
		"IAB7_44":  128,
		"IAB7_45":  129,
		"IAB8":     130,
		"IAB8_1":   131,
		"IAB8_2":   132,
		"IAB8_3":   133,
		"IAB8_4":   134,
		"IAB8_5":   135,
		"IAB8_6":   136,
		"IAB8_7":   137,
		"IAB8_8":   138,
		"IAB8_9":   139,
		"IAB8_10":  140,
		"IAB8_11":  141,
		"IAB8_12":  142,
		"IAB8_13":  143,
		"IAB8_14":  144,
		"IAB8_15":  145,
		"IAB8_16":  146,
		"IAB8_17":  147,
		"IAB8_18":  148,
		"IAB9":     149,
		"IAB9_1":   150,
		"IAB9_2":   151,
		"IAB9_3":   152,
		"IAB9_4":   153,
		"IAB9_5":   154,
		"IAB9_6":   155,
		"IAB9_7":   156,
		"IAB9_8":   157,
		"IAB9_9":   158,
		"IAB9_10":  159,
		"IAB9_11":  160,
		"IAB9_12":  161,
		"IAB9_13":  162,
		"IAB9_14":  163,
		"IAB9_15":  164,
		"IAB9_16":  165,
		"IAB9_17":  166,
		"IAB9_18":  167,
		"IAB9_19":  168,
		"IAB9_20":  169,
		"IAB9_21":  170,
		"IAB9_22":  171,
		"IAB9_23":  172,
		"IAB9_24":  173,
		"IAB9_25":  174,
		"IAB9_26":  175,
		"IAB9_27":  176,
		"IAB9_28":  177,
		"IAB9_29":  178,
		"IAB9_30":  179,
		"IAB9_31":  180,
		"IAB10":    181,
		"IAB10_1":  182,
		"IAB10_2":  183,
		"IAB10_3":  184,
		"IAB10_4":  185,
		"IAB10_5":  186,
		"IAB10_6":  187,
		"IAB10_7":  188,
		"IAB10_8":  189,
		"IAB10_9":  190,
		"IAB11":    191,
		"IAB11_1":  192,
		"IAB11_2":  193,
		"IAB11_3":  194,
		"IAB11_4":  195,
		"IAB11_5":  196,
		"IAB12":    197,
		"IAB12_1":  198,
		"IAB12_2":  199,
		"IAB12_3":  200,
		"IAB13":    201,
		"IAB13_1":  202,
		"IAB13_2":  203,
		"IAB13_3":  204,
		"IAB13_4":  205,
		"IAB13_5":  206,
		"IAB13_6":  207,
		"IAB13_7":  208,
		"IAB13_8":  209,
		"IAB13_9":  210,
		"IAB13_10": 211,
		"IAB13_11": 212,
		"IAB13_12": 213,
		"IAB14":    214,
		"IAB14_1":  215,
		"IAB14_2":  216,
		"IAB14_3":  217,
		"IAB14_4":  218,
		"IAB14_5":  219,
		"IAB14_6":  220,
		"IAB14_7":  221,
		"IAB14_8":  222,
		"IAB15":    223,
		"IAB15_1":  224,
		"IAB15_2":  225,
		"IAB15_3":  226,
		"IAB15_4":  227,
		"IAB15_5":  228,
		"IAB15_6":  229,
		"IAB15_7":  230,
		"IAB15_8":  231,
		"IAB15_9":  232,
		"IAB15_10": 233,
		"IAB16":    234,
		"IAB16_1":  235,
		"IAB16_2":  236,
		"IAB16_3":  237,
		"IAB16_4":  238,
		"IAB16_5":  239,
		"IAB16_6":  240,
		"IAB16_7":  241,
		"IAB17":    242,
		"IAB17_1":  243,
		"IAB17_2":  244,
		"IAB17_3":  245,
		"IAB17_4":  246,
		"IAB17_5":  247,
		"IAB17_6":  248,
		"IAB17_7":  249,
		"IAB17_8":  250,
		"IAB17_9":  251,
		"IAB17_10": 252,
		"IAB17_11": 253,
		"IAB17_12": 254,
		"IAB17_13": 255,
		"IAB17_14": 256,
		"IAB17_15": 257,
		"IAB17_16": 258,
		"IAB17_17": 259,
		"IAB17_18": 260,
		"IAB17_19": 261,
		"IAB17_20": 262,
		"IAB17_21": 263,
		"IAB17_22": 264,
		"IAB17_23": 265,
		"IAB17_24": 266,
		"IAB17_25": 267,
		"IAB17_26": 268,
		"IAB17_27": 269,
		"IAB17_28": 270,
		"IAB17_29": 271,
		"IAB17_30": 272,
		"IAB17_31": 273,
		"IAB17_32": 274,
		"IAB17_33": 275,
		"IAB17_34": 276,
		"IAB17_35": 277,
		"IAB17_36": 278,
		"IAB17_37": 279,
		"IAB17_38": 280,
		"IAB17_39": 281,
		"IAB17_40": 282,
		"IAB17_41": 283,
		"IAB17_42": 284,
		"IAB17_43": 285,
		"IAB17_44": 286,
		"IAB18":    287,
		"IAB18_1":  288,
		"IAB18_2":  289,
		"IAB18_3":  290,
		"IAB18_4":  291,
		"IAB18_5":  292,
		"IAB18_6":  293,
		"IAB19":    294,
		"IAB19_1":  295,
		"IAB19_2":  296,
		"IAB19_3":  297,
		"IAB19_4":  298,
		"IAB19_5":  299,
		"IAB19_6":  300,
		"IAB19_7":  301,
		"IAB19_8":  302,
		"IAB19_9":  303,
		"IAB19_10": 304,
		"IAB19_11": 305,
		"IAB19_12": 306,
		"IAB19_13": 307,
		"IAB19_14": 308,
		"IAB19_15": 309,
		"IAB19_16": 310,
		"IAB19_17": 311,
		"IAB19_18": 312,
		"IAB19_19": 313,
		"IAB19_20": 314,
		"IAB19_21": 315,
		"IAB19_22": 316,
		"IAB19_23": 317,
		"IAB19_24": 318,
		"IAB19_25": 319,
		"IAB19_26": 320,
		"IAB19_27": 321,
		"IAB19_28": 322,
		"IAB19_29": 323,
		"IAB19_30": 324,
		"IAB19_31": 325,
		"IAB19_32": 326,
		"IAB19_33": 327,
		"IAB19_34": 328,
		"IAB19_35": 329,
		"IAB19_36": 330,
		"IAB20":    331,
		"IAB20_1":  332,
		"IAB20_2":  333,
		"IAB20_3":  334,
		"IAB20_4":  335,
		"IAB20_5":  336,
		"IAB20_6":  337,
		"IAB20_7":  338,
		"IAB20_8":  339,
		"IAB20_9":  340,
		"IAB20_10": 341,
		"IAB20_11": 342,
		"IAB20_12": 343,
		"IAB20_13": 344,
		"IAB20_14": 345,
		"IAB20_15": 346,
		"IAB20_16": 347,
		"IAB20_17": 348,
		"IAB20_18": 349,
		"IAB20_19": 350,
		"IAB20_20": 351,
		"IAB20_21": 352,
		"IAB20_22": 353,
		"IAB20_23": 354,
		"IAB20_24": 355,
		"IAB20_25": 356,
		"IAB20_26": 357,
		"IAB20_27": 358,
		"IAB21":    359,
		"IAB21_1":  360,
		"IAB21_2":  361,
		"IAB21_3":  362,
		"IAB22":    363,
		"IAB22_1":  364,
		"IAB22_2":  365,
		"IAB22_3":  366,
		"IAB22_4":  367,
		"IAB23":    368,
		"IAB23_1":  369,
		"IAB23_2":  370,
		"IAB23_3":  371,
		"IAB23_4":  372,
		"IAB23_5":  373,
		"IAB23_6":  374,
		"IAB23_7":  375,
		"IAB23_8":  376,
		"IAB23_9":  377,
		"IAB23_10": 378,
		"IAB24":    379,
		"IAB25":    380,
		"IAB25_1":  381,
		"IAB25_2":  382,
		"IAB25_3":  383,
		"IAB25_4":  384,
		"IAB25_5":  385,
		"IAB25_6":  386,
		"IAB25_7":  387,
		"IAB26":    388,
		"IAB26_1":  389,
		"IAB26_2":  390,
		"IAB26_3":  391,
		"IAB26_4":  392,
	}
)

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}

func (x ContentCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[0].Descriptor()
}

func (ContentCategory) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[0]
}

func (x ContentCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentCategory(num)
	return nil
}

// Deprecated: Use ContentCategory.Descriptor instead.
func (ContentCategory) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0}
}

// creative attributes that can describe an ad being served
// or serve as restrictions of thereof.
type CreativeAttribute int32

const (
	CreativeAttribute_AUDIO_AUTO_PLAY                CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED           CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC           CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED     CreativeAttribute = 4
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED  CreativeAttribute = 5
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY      CreativeAttribute = 6
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP_UP                         CreativeAttribute = 8
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	CreativeAttribute_ANNOYING                       CreativeAttribute = 10
	CreativeAttribute_SURVEYS                        CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                      CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE               CreativeAttribute = 13
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE  CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON        CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED              CreativeAttribute = 16
	CreativeAttribute_AD_HAS_THUMBNAIL               CreativeAttribute = 101 // Creative needs to have a "thumbnail_url"
	CreativeAttribute_AD_SIZE_IS_FLEXIBLE            CreativeAttribute = 102 // Exact size match may be avoided during serving
	CreativeAttribute_AD_CAN_EXPAND_LEFT             CreativeAttribute = 103
	CreativeAttribute_AD_CAN_EXPAND_RIGHT            CreativeAttribute = 104
	CreativeAttribute_AD_CAN_EXPAND_UP               CreativeAttribute = 105
	CreativeAttribute_AD_CAN_EXPAND_DOWN             CreativeAttribute = 106
	CreativeAttribute_AD_CAN_EXPAND_FULLSCREEN       CreativeAttribute = 107
	CreativeAttribute_AD_SUPPORTS_DYNAMIC_PIXELS     CreativeAttribute = 108
	CreativeAttribute_AD_SUPPORTS_DYNAMIC_CLICK_URL  CreativeAttribute = 109
)

// Enum value maps for CreativeAttribute.
var (
	CreativeAttribute_name = map[int32]string{
		1:   "AUDIO_AUTO_PLAY",
		2:   "AUDIO_USER_INITIATED",
		3:   "EXPANDABLE_AUTOMATIC",
		4:   "EXPANDABLE_CLICK_INITIATED",
		5:   "EXPANDABLE_ROLLOVER_INITIATED",
		6:   "VIDEO_IN_BANNER_AUTO_PLAY",
		7:   "VIDEO_IN_BANNER_USER_INITIATED",
		8:   "POP_UP",
		9:   "PROVOCATIVE_OR_SUGGESTIVE",
		10:  "ANNOYING",
		11:  "SURVEYS",
		12:  "TEXT_ONLY",
		13:  "USER_INTERACTIVE",
		14:  "WINDOWS_DIALOG_OR_ALERT_STYLE",
		15:  "HAS_AUDIO_ON_OFF_BUTTON",
		16:  "AD_CAN_BE_SKIPPED",
		101: "AD_HAS_THUMBNAIL",
		102: "AD_SIZE_IS_FLEXIBLE",
		103: "AD_CAN_EXPAND_LEFT",
		104: "AD_CAN_EXPAND_RIGHT",
		105: "AD_CAN_EXPAND_UP",
		106: "AD_CAN_EXPAND_DOWN",
		107: "AD_CAN_EXPAND_FULLSCREEN",
		108: "AD_SUPPORTS_DYNAMIC_PIXELS",
		109: "AD_SUPPORTS_DYNAMIC_CLICK_URL",
	}
	CreativeAttribute_value = map[string]int32{
		"AUDIO_AUTO_PLAY":                1,
		"AUDIO_USER_INITIATED":           2,
		"EXPANDABLE_AUTOMATIC":           3,
		"EXPANDABLE_CLICK_INITIATED":     4,
		"EXPANDABLE_ROLLOVER_INITIATED":  5,
		"VIDEO_IN_BANNER_AUTO_PLAY":      6,
		"VIDEO_IN_BANNER_USER_INITIATED": 7,
		"POP_UP":                         8,
		"PROVOCATIVE_OR_SUGGESTIVE":      9,
		"ANNOYING":                       10,
		"SURVEYS":                        11,
		"TEXT_ONLY":                      12,
		"USER_INTERACTIVE":               13,
		"WINDOWS_DIALOG_OR_ALERT_STYLE":  14,
		"HAS_AUDIO_ON_OFF_BUTTON":        15,
		"AD_CAN_BE_SKIPPED":              16,
		"AD_HAS_THUMBNAIL":               101,
		"AD_SIZE_IS_FLEXIBLE":            102,
		"AD_CAN_EXPAND_LEFT":             103,
		"AD_CAN_EXPAND_RIGHT":            104,
		"AD_CAN_EXPAND_UP":               105,
		"AD_CAN_EXPAND_DOWN":             106,
		"AD_CAN_EXPAND_FULLSCREEN":       107,
		"AD_SUPPORTS_DYNAMIC_PIXELS":     108,
		"AD_SUPPORTS_DYNAMIC_CLICK_URL":  109,
	}
)

func (x CreativeAttribute) Enum() *CreativeAttribute {
	p := new(CreativeAttribute)
	*p = x
	return p
}

func (x CreativeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreativeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[1].Descriptor()
}

func (CreativeAttribute) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[1]
}

func (x CreativeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CreativeAttribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CreativeAttribute(num)
	return nil
}

// Deprecated: Use CreativeAttribute.Descriptor instead.
func (CreativeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{1}
}

// Boolean-like enumeration used in various attributes.
type Flag int32

const (
	Flag_NO  Flag = 0
	Flag_YES Flag = 1
)

// Enum value maps for Flag.
var (
	Flag_name = map[int32]string{
		0: "NO",
		1: "YES",
	}
	Flag_value = map[string]int32{
		"NO":  0,
		"YES": 1,
	}
)

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}

func (x Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[2].Descriptor()
}

func (Flag) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[2]
}

func (x Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Flag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Flag(num)
	return nil
}

// Deprecated: Use Flag.Descriptor instead.
func (Flag) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{2}
}

// OpenRTB 6.4: API frameworks.
type Enums_BidRequest_Impression_ApiFramework int32

const (
	Enums_BidRequest_Impression_VPAID_1_0 Enums_BidRequest_Impression_ApiFramework = 1
	Enums_BidRequest_Impression_VPAID_2_0 Enums_BidRequest_Impression_ApiFramework = 2
	Enums_BidRequest_Impression_MRAID     Enums_BidRequest_Impression_ApiFramework = 3 // OpenRTB 2.2
	Enums_BidRequest_Impression_MRAID_1   Enums_BidRequest_Impression_ApiFramework = 3 // OpenRTB 2.3
	Enums_BidRequest_Impression_ORMMA     Enums_BidRequest_Impression_ApiFramework = 4
	Enums_BidRequest_Impression_MRAID_2   Enums_BidRequest_Impression_ApiFramework = 5 // Following values are not in openRTB standard.
	// Mopub requests will have MRAID_PLAYABLE in banner.ext.bapis
	// if USER_INTERACTIVE is in banner.battr. Stinger will filter
	// MRAID_PLAYABLE creatives.
	Enums_BidRequest_Impression_MRAID_PLAYABLE Enums_BidRequest_Impression_ApiFramework = 10001
)

// Enum value maps for Enums_BidRequest_Impression_ApiFramework.
var (
	Enums_BidRequest_Impression_ApiFramework_name = map[int32]string{
		1: "VPAID_1_0",
		2: "VPAID_2_0",
		3: "MRAID",
		// Duplicate value: 3: "MRAID_1",
		4:     "ORMMA",
		5:     "MRAID_2",
		10001: "MRAID_PLAYABLE",
	}
	Enums_BidRequest_Impression_ApiFramework_value = map[string]int32{
		"VPAID_1_0":      1,
		"VPAID_2_0":      2,
		"MRAID":          3,
		"MRAID_1":        3,
		"ORMMA":          4,
		"MRAID_2":        5,
		"MRAID_PLAYABLE": 10001,
	}
)

func (x Enums_BidRequest_Impression_ApiFramework) Enum() *Enums_BidRequest_Impression_ApiFramework {
	p := new(Enums_BidRequest_Impression_ApiFramework)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_ApiFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_ApiFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[3].Descriptor()
}

func (Enums_BidRequest_Impression_ApiFramework) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[3]
}

func (x Enums_BidRequest_Impression_ApiFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_ApiFramework) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_ApiFramework(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_ApiFramework.Descriptor instead.
func (Enums_BidRequest_Impression_ApiFramework) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// OpenRTB 6.5: the position of the ad as a relative measure of visibility or
// prominence.
type Enums_BidRequest_Impression_AdPosition int32

const (
	Enums_BidRequest_Impression_POSITION_UNKNOWN         Enums_BidRequest_Impression_AdPosition = 0
	Enums_BidRequest_Impression_ABOVE_THE_FOLD           Enums_BidRequest_Impression_AdPosition = 1
	Enums_BidRequest_Impression_DEPRECATED_MAYBE_VISIBLE Enums_BidRequest_Impression_AdPosition = 2
	Enums_BidRequest_Impression_BELOW_THE_FOLD           Enums_BidRequest_Impression_AdPosition = 3
	Enums_BidRequest_Impression_HEADER                   Enums_BidRequest_Impression_AdPosition = 4
	Enums_BidRequest_Impression_FOOTER                   Enums_BidRequest_Impression_AdPosition = 5
	Enums_BidRequest_Impression_SIDEBAR                  Enums_BidRequest_Impression_AdPosition = 6
	Enums_BidRequest_Impression_FULLSCREEN               Enums_BidRequest_Impression_AdPosition = 7
)

// Enum value maps for Enums_BidRequest_Impression_AdPosition.
var (
	Enums_BidRequest_Impression_AdPosition_name = map[int32]string{
		0: "POSITION_UNKNOWN",
		1: "ABOVE_THE_FOLD",
		2: "DEPRECATED_MAYBE_VISIBLE",
		3: "BELOW_THE_FOLD",
		4: "HEADER",
		5: "FOOTER",
		6: "SIDEBAR",
		7: "FULLSCREEN",
	}
	Enums_BidRequest_Impression_AdPosition_value = map[string]int32{
		"POSITION_UNKNOWN":         0,
		"ABOVE_THE_FOLD":           1,
		"DEPRECATED_MAYBE_VISIBLE": 2,
		"BELOW_THE_FOLD":           3,
		"HEADER":                   4,
		"FOOTER":                   5,
		"SIDEBAR":                  6,
		"FULLSCREEN":               7,
	}
)

func (x Enums_BidRequest_Impression_AdPosition) Enum() *Enums_BidRequest_Impression_AdPosition {
	p := new(Enums_BidRequest_Impression_AdPosition)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_AdPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_AdPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[4].Descriptor()
}

func (Enums_BidRequest_Impression_AdPosition) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[4]
}

func (x Enums_BidRequest_Impression_AdPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_AdPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_AdPosition(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_AdPosition.Descriptor instead.
func (Enums_BidRequest_Impression_AdPosition) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

// OpenRTB 6.2: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type Enums_BidRequest_Impression_Banner_AdType int32

const (
	// "Usually mobile".
	Enums_BidRequest_Impression_Banner_XHTML_TEXT Enums_BidRequest_Impression_Banner_AdType = 1
	// "Usually mobile".
	Enums_BidRequest_Impression_Banner_XHTML_BANNER Enums_BidRequest_Impression_Banner_AdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	Enums_BidRequest_Impression_Banner_JAVASCRIPT Enums_BidRequest_Impression_Banner_AdType = 3
	// Iframe.
	Enums_BidRequest_Impression_Banner_IFRAME Enums_BidRequest_Impression_Banner_AdType = 4
)

// Enum value maps for Enums_BidRequest_Impression_Banner_AdType.
var (
	Enums_BidRequest_Impression_Banner_AdType_name = map[int32]string{
		1: "XHTML_TEXT",
		2: "XHTML_BANNER",
		3: "JAVASCRIPT",
		4: "IFRAME",
	}
	Enums_BidRequest_Impression_Banner_AdType_value = map[string]int32{
		"XHTML_TEXT":   1,
		"XHTML_BANNER": 2,
		"JAVASCRIPT":   3,
		"IFRAME":       4,
	}
)

func (x Enums_BidRequest_Impression_Banner_AdType) Enum() *Enums_BidRequest_Impression_Banner_AdType {
	p := new(Enums_BidRequest_Impression_Banner_AdType)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Banner_AdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Banner_AdType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[5].Descriptor()
}

func (Enums_BidRequest_Impression_Banner_AdType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[5]
}

func (x Enums_BidRequest_Impression_Banner_AdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Banner_AdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Banner_AdType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Banner_AdType.Descriptor instead.
func (Enums_BidRequest_Impression_Banner_AdType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

// OpenRTB 6.11: the directions in which an expandable ad may expand, given the
// positioning of the ad unit on the page and constraints imposed by the content.
type Enums_BidRequest_Impression_Banner_ExpandableDirection int32

const (
	Enums_BidRequest_Impression_Banner_LEFT       Enums_BidRequest_Impression_Banner_ExpandableDirection = 1
	Enums_BidRequest_Impression_Banner_RIGHT      Enums_BidRequest_Impression_Banner_ExpandableDirection = 2
	Enums_BidRequest_Impression_Banner_UP         Enums_BidRequest_Impression_Banner_ExpandableDirection = 3
	Enums_BidRequest_Impression_Banner_DOWN       Enums_BidRequest_Impression_Banner_ExpandableDirection = 4
	Enums_BidRequest_Impression_Banner_FULLSCREEN Enums_BidRequest_Impression_Banner_ExpandableDirection = 5
)

// Enum value maps for Enums_BidRequest_Impression_Banner_ExpandableDirection.
var (
	Enums_BidRequest_Impression_Banner_ExpandableDirection_name = map[int32]string{
		1: "LEFT",
		2: "RIGHT",
		3: "UP",
		4: "DOWN",
		5: "FULLSCREEN",
	}
	Enums_BidRequest_Impression_Banner_ExpandableDirection_value = map[string]int32{
		"LEFT":       1,
		"RIGHT":      2,
		"UP":         3,
		"DOWN":       4,
		"FULLSCREEN": 5,
	}
)

func (x Enums_BidRequest_Impression_Banner_ExpandableDirection) Enum() *Enums_BidRequest_Impression_Banner_ExpandableDirection {
	p := new(Enums_BidRequest_Impression_Banner_ExpandableDirection)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Banner_ExpandableDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Banner_ExpandableDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[6].Descriptor()
}

func (Enums_BidRequest_Impression_Banner_ExpandableDirection) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[6]
}

func (x Enums_BidRequest_Impression_Banner_ExpandableDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Banner_ExpandableDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Banner_ExpandableDirection(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Banner_ExpandableDirection.Descriptor instead.
func (Enums_BidRequest_Impression_Banner_ExpandableDirection) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

// OpenRTB 6.7: video bid response protocols that could be supported by an
// exchange.
type Enums_BidRequest_Impression_Video_Protocol int32

const (
	Enums_BidRequest_Impression_Video_VAST_1_0         Enums_BidRequest_Impression_Video_Protocol = 1
	Enums_BidRequest_Impression_Video_VAST_2_0         Enums_BidRequest_Impression_Video_Protocol = 2
	Enums_BidRequest_Impression_Video_VAST_3_0         Enums_BidRequest_Impression_Video_Protocol = 3
	Enums_BidRequest_Impression_Video_VAST_1_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 4
	Enums_BidRequest_Impression_Video_VAST_2_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 5
	Enums_BidRequest_Impression_Video_VAST_3_0_WRAPPER Enums_BidRequest_Impression_Video_Protocol = 6
)

// Enum value maps for Enums_BidRequest_Impression_Video_Protocol.
var (
	Enums_BidRequest_Impression_Video_Protocol_name = map[int32]string{
		1: "VAST_1_0",
		2: "VAST_2_0",
		3: "VAST_3_0",
		4: "VAST_1_0_WRAPPER",
		5: "VAST_2_0_WRAPPER",
		6: "VAST_3_0_WRAPPER",
	}
	Enums_BidRequest_Impression_Video_Protocol_value = map[string]int32{
		"VAST_1_0":         1,
		"VAST_2_0":         2,
		"VAST_3_0":         3,
		"VAST_1_0_WRAPPER": 4,
		"VAST_2_0_WRAPPER": 5,
		"VAST_3_0_WRAPPER": 6,
	}
)

func (x Enums_BidRequest_Impression_Video_Protocol) Enum() *Enums_BidRequest_Impression_Video_Protocol {
	p := new(Enums_BidRequest_Impression_Video_Protocol)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[7].Descriptor()
}

func (Enums_BidRequest_Impression_Video_Protocol) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[7]
}

func (x Enums_BidRequest_Impression_Video_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_Protocol(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_Protocol.Descriptor instead.
func (Enums_BidRequest_Impression_Video_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

// OpenRTB 6.17: markup types allowed for video companion ads.
// This table is derived from IAB VAST 2.0+. See www.iab.net/vast/ for more
// information.
type Enums_BidRequest_Impression_Video_CompanionType int32

const (
	Enums_BidRequest_Impression_Video_STATIC Enums_BidRequest_Impression_Video_CompanionType = 1
	Enums_BidRequest_Impression_Video_HTML   Enums_BidRequest_Impression_Video_CompanionType = 2
	Enums_BidRequest_Impression_Video_IFRAME Enums_BidRequest_Impression_Video_CompanionType = 3
)

// Enum value maps for Enums_BidRequest_Impression_Video_CompanionType.
var (
	Enums_BidRequest_Impression_Video_CompanionType_name = map[int32]string{
		1: "STATIC",
		2: "HTML",
		3: "IFRAME",
	}
	Enums_BidRequest_Impression_Video_CompanionType_value = map[string]int32{
		"STATIC": 1,
		"HTML":   2,
		"IFRAME": 3,
	}
)

func (x Enums_BidRequest_Impression_Video_CompanionType) Enum() *Enums_BidRequest_Impression_Video_CompanionType {
	p := new(Enums_BidRequest_Impression_Video_CompanionType)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_CompanionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_CompanionType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[8].Descriptor()
}

func (Enums_BidRequest_Impression_Video_CompanionType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[8]
}

func (x Enums_BidRequest_Impression_Video_CompanionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_CompanionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_CompanionType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_CompanionType.Descriptor instead.
func (Enums_BidRequest_Impression_Video_CompanionType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

// OpenRTB 6.6: "In-stream" or "linear" video refers to pre-roll, post-roll, or
// mid-roll
// video ads where the user is forced to watch ad in order to see the video
// content.
// “Overlay” or “non-linear” refer to ads that are shown on top of the video
// content.
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG).
type Enums_BidRequest_Impression_Video_Linearity int32

const (
	Enums_BidRequest_Impression_Video_LINEAR     Enums_BidRequest_Impression_Video_Linearity = 1
	Enums_BidRequest_Impression_Video_NON_LINEAR Enums_BidRequest_Impression_Video_Linearity = 2
)

// Enum value maps for Enums_BidRequest_Impression_Video_Linearity.
var (
	Enums_BidRequest_Impression_Video_Linearity_name = map[int32]string{
		1: "LINEAR",
		2: "NON_LINEAR",
	}
	Enums_BidRequest_Impression_Video_Linearity_value = map[string]int32{
		"LINEAR":     1,
		"NON_LINEAR": 2,
	}
)

func (x Enums_BidRequest_Impression_Video_Linearity) Enum() *Enums_BidRequest_Impression_Video_Linearity {
	p := new(Enums_BidRequest_Impression_Video_Linearity)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_Linearity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_Linearity) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[9].Descriptor()
}

func (Enums_BidRequest_Impression_Video_Linearity) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[9]
}

func (x Enums_BidRequest_Impression_Video_Linearity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_Linearity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_Linearity(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_Linearity.Descriptor instead.
func (Enums_BidRequest_Impression_Video_Linearity) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2}
}

// OpenRTB 6.8: video playback methods.
type Enums_BidRequest_Impression_Video_PlaybackMethod int32

const (
	Enums_BidRequest_Impression_Video_AUTOPLAY_SOUND_ON  Enums_BidRequest_Impression_Video_PlaybackMethod = 1
	Enums_BidRequest_Impression_Video_AUTOPLAY_SOUND_OFF Enums_BidRequest_Impression_Video_PlaybackMethod = 2
	Enums_BidRequest_Impression_Video_CLICK_TO_PLAY      Enums_BidRequest_Impression_Video_PlaybackMethod = 3
	Enums_BidRequest_Impression_Video_MOUSE_OVER         Enums_BidRequest_Impression_Video_PlaybackMethod = 4
	Enums_BidRequest_Impression_Video_VIEWPORT_SOUND_ON  Enums_BidRequest_Impression_Video_PlaybackMethod = 5
	Enums_BidRequest_Impression_Video_VIEWPORT_SOUND_OFF Enums_BidRequest_Impression_Video_PlaybackMethod = 6
)

// Enum value maps for Enums_BidRequest_Impression_Video_PlaybackMethod.
var (
	Enums_BidRequest_Impression_Video_PlaybackMethod_name = map[int32]string{
		1: "AUTOPLAY_SOUND_ON",
		2: "AUTOPLAY_SOUND_OFF",
		3: "CLICK_TO_PLAY",
		4: "MOUSE_OVER",
		5: "VIEWPORT_SOUND_ON",
		6: "VIEWPORT_SOUND_OFF",
	}
	Enums_BidRequest_Impression_Video_PlaybackMethod_value = map[string]int32{
		"AUTOPLAY_SOUND_ON":  1,
		"AUTOPLAY_SOUND_OFF": 2,
		"CLICK_TO_PLAY":      3,
		"MOUSE_OVER":         4,
		"VIEWPORT_SOUND_ON":  5,
		"VIEWPORT_SOUND_OFF": 6,
	}
)

func (x Enums_BidRequest_Impression_Video_PlaybackMethod) Enum() *Enums_BidRequest_Impression_Video_PlaybackMethod {
	p := new(Enums_BidRequest_Impression_Video_PlaybackMethod)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_PlaybackMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_PlaybackMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[10].Descriptor()
}

func (Enums_BidRequest_Impression_Video_PlaybackMethod) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[10]
}

func (x Enums_BidRequest_Impression_Video_PlaybackMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_PlaybackMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_PlaybackMethod(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_PlaybackMethod.Descriptor instead.
func (Enums_BidRequest_Impression_Video_PlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3}
}

// OpenRTB 6.9: Various options for the video start delay. If the start delay
// value is greater than 0 then the position is mid-roll, and the value
// represents the number of seconds into the content that the ad will be
// displayed. If the start delay time is not available, the exchange can report
// the position of the ad in general terms using this table of negative numbers.
// Beeswax extends this enum to indiciate requests with unknown VideoStartDelay.
type Enums_BidRequest_Impression_Video_VideoStartDelay int32

const (
	Enums_BidRequest_Impression_Video_PRE_ROLL          Enums_BidRequest_Impression_Video_VideoStartDelay = 0
	Enums_BidRequest_Impression_Video_GENERIC_MID_ROLL  Enums_BidRequest_Impression_Video_VideoStartDelay = -1
	Enums_BidRequest_Impression_Video_GENERIC_POST_ROLL Enums_BidRequest_Impression_Video_VideoStartDelay = -2
	Enums_BidRequest_Impression_Video_UNKNOWN           Enums_BidRequest_Impression_Video_VideoStartDelay = -3 // Keep in sync with the default value of startdelay field.
)

// Enum value maps for Enums_BidRequest_Impression_Video_VideoStartDelay.
var (
	Enums_BidRequest_Impression_Video_VideoStartDelay_name = map[int32]string{
		0:  "PRE_ROLL",
		-1: "GENERIC_MID_ROLL",
		-2: "GENERIC_POST_ROLL",
		-3: "UNKNOWN",
	}
	Enums_BidRequest_Impression_Video_VideoStartDelay_value = map[string]int32{
		"PRE_ROLL":          0,
		"GENERIC_MID_ROLL":  -1,
		"GENERIC_POST_ROLL": -2,
		"UNKNOWN":           -3,
	}
)

func (x Enums_BidRequest_Impression_Video_VideoStartDelay) Enum() *Enums_BidRequest_Impression_Video_VideoStartDelay {
	p := new(Enums_BidRequest_Impression_Video_VideoStartDelay)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_VideoStartDelay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_VideoStartDelay) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[11].Descriptor()
}

func (Enums_BidRequest_Impression_Video_VideoStartDelay) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[11]
}

func (x Enums_BidRequest_Impression_Video_VideoStartDelay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_VideoStartDelay) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_VideoStartDelay(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_VideoStartDelay.Descriptor instead.
func (Enums_BidRequest_Impression_Video_VideoStartDelay) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4}
}

// OpenRTB 6.12: delivery of video content.
type Enums_BidRequest_Impression_Video_ContentDelivery int32

const (
	Enums_BidRequest_Impression_Video_STREAMING   Enums_BidRequest_Impression_Video_ContentDelivery = 1
	Enums_BidRequest_Impression_Video_PROGRESSIVE Enums_BidRequest_Impression_Video_ContentDelivery = 2
)

// Enum value maps for Enums_BidRequest_Impression_Video_ContentDelivery.
var (
	Enums_BidRequest_Impression_Video_ContentDelivery_name = map[int32]string{
		1: "STREAMING",
		2: "PROGRESSIVE",
	}
	Enums_BidRequest_Impression_Video_ContentDelivery_value = map[string]int32{
		"STREAMING":   1,
		"PROGRESSIVE": 2,
	}
)

func (x Enums_BidRequest_Impression_Video_ContentDelivery) Enum() *Enums_BidRequest_Impression_Video_ContentDelivery {
	p := new(Enums_BidRequest_Impression_Video_ContentDelivery)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_ContentDelivery) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_ContentDelivery) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[12].Descriptor()
}

func (Enums_BidRequest_Impression_Video_ContentDelivery) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[12]
}

func (x Enums_BidRequest_Impression_Video_ContentDelivery) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_ContentDelivery) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_ContentDelivery(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_ContentDelivery.Descriptor instead.
func (Enums_BidRequest_Impression_Video_ContentDelivery) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5}
}

// OpenRTB 2.5: The following table lists the various types of video placements
// derived largely from the IAB Digital Video Guidelines.
type Enums_BidRequest_Impression_Video_VideoPlacementType int32

const (
	// The video placement is not defined.
	// Default value.
	Enums_BidRequest_Impression_Video_UNDEFINED_VIDEO_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 0
	// Played before, during or after the streaming video content
	// that the consumer has requested.
	// E.G.: Pre-roll, Mid-roll, Post-roll.
	Enums_BidRequest_Impression_Video_IN_STREAM_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 1
	// Exists within a web banner that leverages the banner space
	// to deliver a video experience as opposed to another static
	// or rich media format.
	// The format relies on the existence of display ad inventory
	// on the page for its delivery.
	Enums_BidRequest_Impression_Video_IN_BANNER_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 2
	// Loads and plays dynamically between paragraphs of editorial content;
	// existing as a standalone branded message.
	Enums_BidRequest_Impression_Video_IN_ARTICLE_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 3
	// In-Feed - Found in content, social, or product feeds.
	Enums_BidRequest_Impression_Video_IN_FEED_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 4
	// Interstitial/Slider/Floating.
	// Covers the entire or a portion of screen area,
	// but is always on screen while displayed
	// (i.e. cannot be scrolled out of view).
	// Note that a full-screen interstitial (e.g., in mobile)
	// can be distinguished from a floating/slider unit by the imp.instl field.
	Enums_BidRequest_Impression_Video_FLOATING_PLACEMENT Enums_BidRequest_Impression_Video_VideoPlacementType = 5
)

// Enum value maps for Enums_BidRequest_Impression_Video_VideoPlacementType.
var (
	Enums_BidRequest_Impression_Video_VideoPlacementType_name = map[int32]string{
		0: "UNDEFINED_VIDEO_PLACEMENT",
		1: "IN_STREAM_PLACEMENT",
		2: "IN_BANNER_PLACEMENT",
		3: "IN_ARTICLE_PLACEMENT",
		4: "IN_FEED_PLACEMENT",
		5: "FLOATING_PLACEMENT",
	}
	Enums_BidRequest_Impression_Video_VideoPlacementType_value = map[string]int32{
		"UNDEFINED_VIDEO_PLACEMENT": 0,
		"IN_STREAM_PLACEMENT":       1,
		"IN_BANNER_PLACEMENT":       2,
		"IN_ARTICLE_PLACEMENT":      3,
		"IN_FEED_PLACEMENT":         4,
		"FLOATING_PLACEMENT":        5,
	}
)

func (x Enums_BidRequest_Impression_Video_VideoPlacementType) Enum() *Enums_BidRequest_Impression_Video_VideoPlacementType {
	p := new(Enums_BidRequest_Impression_Video_VideoPlacementType)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_VideoPlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_VideoPlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[13].Descriptor()
}

func (Enums_BidRequest_Impression_Video_VideoPlacementType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[13]
}

func (x Enums_BidRequest_Impression_Video_VideoPlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_VideoPlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_VideoPlacementType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_VideoPlacementType.Descriptor instead.
func (Enums_BidRequest_Impression_Video_VideoPlacementType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 6}
}

// OpenRTB 2.5: The various modes for when playback terminates.
type Enums_BidRequest_Impression_Video_PlaybackCessationMode int32

const (
	// On Video Completion or when Terminated by User
	Enums_BidRequest_Impression_Video_COMPLETION_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 1
	// On Leaving Viewport or when Terminated by User
	Enums_BidRequest_Impression_Video_LEAVING_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 2
	// On Leaving Viewport Continues as a Floating/Slider Unit until
	// Video Completion or when Terminated by User
	Enums_BidRequest_Impression_Video_LEAVING_CONTINUES_OR_USER Enums_BidRequest_Impression_Video_PlaybackCessationMode = 3
)

// Enum value maps for Enums_BidRequest_Impression_Video_PlaybackCessationMode.
var (
	Enums_BidRequest_Impression_Video_PlaybackCessationMode_name = map[int32]string{
		1: "COMPLETION_OR_USER",
		2: "LEAVING_OR_USER",
		3: "LEAVING_CONTINUES_OR_USER",
	}
	Enums_BidRequest_Impression_Video_PlaybackCessationMode_value = map[string]int32{
		"COMPLETION_OR_USER":        1,
		"LEAVING_OR_USER":           2,
		"LEAVING_CONTINUES_OR_USER": 3,
	}
)

func (x Enums_BidRequest_Impression_Video_PlaybackCessationMode) Enum() *Enums_BidRequest_Impression_Video_PlaybackCessationMode {
	p := new(Enums_BidRequest_Impression_Video_PlaybackCessationMode)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_Video_PlaybackCessationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_Video_PlaybackCessationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[14].Descriptor()
}

func (Enums_BidRequest_Impression_Video_PlaybackCessationMode) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[14]
}

func (x Enums_BidRequest_Impression_Video_PlaybackCessationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_Video_PlaybackCessationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_Video_PlaybackCessationMode(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_Video_PlaybackCessationMode.Descriptor instead.
func (Enums_BidRequest_Impression_Video_PlaybackCessationMode) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1, 7}
}

// OpenRTB Native 7.1: Core layouts. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type Enums_BidRequest_Impression_NativeRequest_LayoutId int32

const (
	Enums_BidRequest_Impression_NativeRequest_CONTENT_WALL   Enums_BidRequest_Impression_NativeRequest_LayoutId = 1
	Enums_BidRequest_Impression_NativeRequest_APP_WALL       Enums_BidRequest_Impression_NativeRequest_LayoutId = 2
	Enums_BidRequest_Impression_NativeRequest_NEWS_FEED      Enums_BidRequest_Impression_NativeRequest_LayoutId = 3
	Enums_BidRequest_Impression_NativeRequest_CHAT_LIST      Enums_BidRequest_Impression_NativeRequest_LayoutId = 4
	Enums_BidRequest_Impression_NativeRequest_CAROUSEL       Enums_BidRequest_Impression_NativeRequest_LayoutId = 5
	Enums_BidRequest_Impression_NativeRequest_CONTENT_STREAM Enums_BidRequest_Impression_NativeRequest_LayoutId = 6
	Enums_BidRequest_Impression_NativeRequest_GRID           Enums_BidRequest_Impression_NativeRequest_LayoutId = 7 // Exchange-specific values above 500.
)

// Enum value maps for Enums_BidRequest_Impression_NativeRequest_LayoutId.
var (
	Enums_BidRequest_Impression_NativeRequest_LayoutId_name = map[int32]string{
		1: "CONTENT_WALL",
		2: "APP_WALL",
		3: "NEWS_FEED",
		4: "CHAT_LIST",
		5: "CAROUSEL",
		6: "CONTENT_STREAM",
		7: "GRID",
	}
	Enums_BidRequest_Impression_NativeRequest_LayoutId_value = map[string]int32{
		"CONTENT_WALL":   1,
		"APP_WALL":       2,
		"NEWS_FEED":      3,
		"CHAT_LIST":      4,
		"CAROUSEL":       5,
		"CONTENT_STREAM": 6,
		"GRID":           7,
	}
)

func (x Enums_BidRequest_Impression_NativeRequest_LayoutId) Enum() *Enums_BidRequest_Impression_NativeRequest_LayoutId {
	p := new(Enums_BidRequest_Impression_NativeRequest_LayoutId)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_NativeRequest_LayoutId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_NativeRequest_LayoutId) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[15].Descriptor()
}

func (Enums_BidRequest_Impression_NativeRequest_LayoutId) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[15]
}

func (x Enums_BidRequest_Impression_NativeRequest_LayoutId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_NativeRequest_LayoutId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_LayoutId(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest_LayoutId.Descriptor instead.
func (Enums_BidRequest_Impression_NativeRequest_LayoutId) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

// OpenRTB Native 7.2: Below is a list of the core ad unit ids described
// by IAB here:
// http://www.iab.net/media/file/IABNativeAdvertisingPlaybook120413.pdf
// In feed unit is essentially a layout, it has been removed from the list.
// The in feed units can be identified via the layout parameter on the
// request. An implementing exchange may not support all asset variants
// or introduce new ones unique to that system.
type Enums_BidRequest_Impression_NativeRequest_AdUnitId int32

const (
	Enums_BidRequest_Impression_NativeRequest_PAID_SEARCH_UNIT      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 1
	Enums_BidRequest_Impression_NativeRequest_RECOMMENDATION_WIDGET Enums_BidRequest_Impression_NativeRequest_AdUnitId = 2
	Enums_BidRequest_Impression_NativeRequest_PROMOTED_LISTING      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 3
	Enums_BidRequest_Impression_NativeRequest_IAB_IN_AD_NATIVE      Enums_BidRequest_Impression_NativeRequest_AdUnitId = 4
	Enums_BidRequest_Impression_NativeRequest_CUSTOM                Enums_BidRequest_Impression_NativeRequest_AdUnitId = 5 // Exchange-specific values above 500.
)

// Enum value maps for Enums_BidRequest_Impression_NativeRequest_AdUnitId.
var (
	Enums_BidRequest_Impression_NativeRequest_AdUnitId_name = map[int32]string{
		1: "PAID_SEARCH_UNIT",
		2: "RECOMMENDATION_WIDGET",
		3: "PROMOTED_LISTING",
		4: "IAB_IN_AD_NATIVE",
		5: "CUSTOM",
	}
	Enums_BidRequest_Impression_NativeRequest_AdUnitId_value = map[string]int32{
		"PAID_SEARCH_UNIT":      1,
		"RECOMMENDATION_WIDGET": 2,
		"PROMOTED_LISTING":      3,
		"IAB_IN_AD_NATIVE":      4,
		"CUSTOM":                5,
	}
)

func (x Enums_BidRequest_Impression_NativeRequest_AdUnitId) Enum() *Enums_BidRequest_Impression_NativeRequest_AdUnitId {
	p := new(Enums_BidRequest_Impression_NativeRequest_AdUnitId)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_NativeRequest_AdUnitId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_NativeRequest_AdUnitId) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[16].Descriptor()
}

func (Enums_BidRequest_Impression_NativeRequest_AdUnitId) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[16]
}

func (x Enums_BidRequest_Impression_NativeRequest_AdUnitId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_NativeRequest_AdUnitId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_AdUnitId(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest_AdUnitId.Descriptor instead.
func (Enums_BidRequest_Impression_NativeRequest_AdUnitId) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

// The context in which the ad appears - what type of content is
// surrounding the ad on the page at a high level. This maps directly to
// the new Deep Dive on In-Feed Ad Units. This denotes the primary
// context, but does not imply other content may not exist on the page -
// for example it's expected that most content platforms have some
// social components, etc.
type Enums_BidRequest_Impression_NativeRequest_Context int32

const (
	// Content-centric context such as newsfeed, article, image gallery, video
	// gallery, or similar.
	Enums_BidRequest_Impression_NativeRequest_CONTENT_CENTRIC Enums_BidRequest_Impression_NativeRequest_Context = 1
	// Social-centric context such as social network feed, email, chat, or
	// similar.
	Enums_BidRequest_Impression_NativeRequest_SOCIAL_CENTRIC Enums_BidRequest_Impression_NativeRequest_Context = 2
	// Product context such as product listings, details, recommendations,
	// reviews, or similar.
	Enums_BidRequest_Impression_NativeRequest_PRODUCT Enums_BidRequest_Impression_NativeRequest_Context = 3 // Exchange-specific values above 500.
)

// Enum value maps for Enums_BidRequest_Impression_NativeRequest_Context.
var (
	Enums_BidRequest_Impression_NativeRequest_Context_name = map[int32]string{
		1: "CONTENT_CENTRIC",
		2: "SOCIAL_CENTRIC",
		3: "PRODUCT",
	}
	Enums_BidRequest_Impression_NativeRequest_Context_value = map[string]int32{
		"CONTENT_CENTRIC": 1,
		"SOCIAL_CENTRIC":  2,
		"PRODUCT":         3,
	}
)

func (x Enums_BidRequest_Impression_NativeRequest_Context) Enum() *Enums_BidRequest_Impression_NativeRequest_Context {
	p := new(Enums_BidRequest_Impression_NativeRequest_Context)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_NativeRequest_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_NativeRequest_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[17].Descriptor()
}

func (Enums_BidRequest_Impression_NativeRequest_Context) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[17]
}

func (x Enums_BidRequest_Impression_NativeRequest_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_NativeRequest_Context) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_Context(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest_Context.Descriptor instead.
func (Enums_BidRequest_Impression_NativeRequest_Context) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2, 2}
}

// Next-level context in which the ad appears. Again this reflects the
// primary context, and does not imply no presence of other
// elements. For example, an article is likely to contain images but is
// still first and foremost an article. SubType should only be combined
// with the primary context type as indicated (ie for a context type of 1,
// only context subtypes that start with 1 are valid).
type Enums_BidRequest_Impression_NativeRequest_ContextSubtype int32

const (
	// General or mixed content.
	Enums_BidRequest_Impression_NativeRequest_GENERAL_OR_MIXED Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 10
	// Primarily article content (which of course could include images, etc
	// as part of the article)
	Enums_BidRequest_Impression_NativeRequest_ARTICLE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 11
	// Primarily video content
	Enums_BidRequest_Impression_NativeRequest_VIDEO Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 12
	// Primarily audio content
	Enums_BidRequest_Impression_NativeRequest_AUDIO Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 13
	// Primarily image content
	Enums_BidRequest_Impression_NativeRequest_IMAGE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 14
	// User-generated content - forums, comments, etc
	Enums_BidRequest_Impression_NativeRequest_USER_GENERATED Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 15
	// General social content such as a general social network
	Enums_BidRequest_Impression_NativeRequest_GENERAL_SOCIAL Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 20
	// Primarily email content
	Enums_BidRequest_Impression_NativeRequest_EMAIL Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 21
	// Primarily chat/IM content
	Enums_BidRequest_Impression_NativeRequest_CHAT_IM Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 22
	// Content focused on selling products, whether digital or physical
	Enums_BidRequest_Impression_NativeRequest_SELLING_PRODUCTS Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 30
	// Application store/marketplace
	Enums_BidRequest_Impression_NativeRequest_APPLICATION Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 31
	// Product reviews site primarily (which may sell product secondarily)
	Enums_BidRequest_Impression_NativeRequest_REVIEW_SITE Enums_BidRequest_Impression_NativeRequest_ContextSubtype = 32 // Exchange-specific values above 500.
)

// Enum value maps for Enums_BidRequest_Impression_NativeRequest_ContextSubtype.
var (
	Enums_BidRequest_Impression_NativeRequest_ContextSubtype_name = map[int32]string{
		10: "GENERAL_OR_MIXED",
		11: "ARTICLE",
		12: "VIDEO",
		13: "AUDIO",
		14: "IMAGE",
		15: "USER_GENERATED",
		20: "GENERAL_SOCIAL",
		21: "EMAIL",
		22: "CHAT_IM",
		30: "SELLING_PRODUCTS",
		31: "APPLICATION",
		32: "REVIEW_SITE",
	}
	Enums_BidRequest_Impression_NativeRequest_ContextSubtype_value = map[string]int32{
		"GENERAL_OR_MIXED": 10,
		"ARTICLE":          11,
		"VIDEO":            12,
		"AUDIO":            13,
		"IMAGE":            14,
		"USER_GENERATED":   15,
		"GENERAL_SOCIAL":   20,
		"EMAIL":            21,
		"CHAT_IM":          22,
		"SELLING_PRODUCTS": 30,
		"APPLICATION":      31,
		"REVIEW_SITE":      32,
	}
)

func (x Enums_BidRequest_Impression_NativeRequest_ContextSubtype) Enum() *Enums_BidRequest_Impression_NativeRequest_ContextSubtype {
	p := new(Enums_BidRequest_Impression_NativeRequest_ContextSubtype)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_NativeRequest_ContextSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_NativeRequest_ContextSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[18].Descriptor()
}

func (Enums_BidRequest_Impression_NativeRequest_ContextSubtype) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[18]
}

func (x Enums_BidRequest_Impression_NativeRequest_ContextSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_NativeRequest_ContextSubtype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_ContextSubtype(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest_ContextSubtype.Descriptor instead.
func (Enums_BidRequest_Impression_NativeRequest_ContextSubtype) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2, 3}
}

// The FORMAT of the ad you are purchasing, separate from the surrounding
// context
type Enums_BidRequest_Impression_NativeRequest_PlacementType int32

const (
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	Enums_BidRequest_Impression_NativeRequest_FEED Enums_BidRequest_Impression_NativeRequest_PlacementType = 1
	// In the atomic unit of the content - IE in the article page or
	// single image page
	Enums_BidRequest_Impression_NativeRequest_ATOMIC_UNIT Enums_BidRequest_Impression_NativeRequest_PlacementType = 2
	// Outside the core content - for example in the ads section on the right
	// rail, as a banner-style placement near the content, etc.
	Enums_BidRequest_Impression_NativeRequest_OUTSIDE_THE_CORE Enums_BidRequest_Impression_NativeRequest_PlacementType = 3
	// Recommendation widget, most commonly presented below the article
	// content.
	Enums_BidRequest_Impression_NativeRequest_WIDGET Enums_BidRequest_Impression_NativeRequest_PlacementType = 4 // Exchange-specific values above 500.
)

// Enum value maps for Enums_BidRequest_Impression_NativeRequest_PlacementType.
var (
	Enums_BidRequest_Impression_NativeRequest_PlacementType_name = map[int32]string{
		1: "FEED",
		2: "ATOMIC_UNIT",
		3: "OUTSIDE_THE_CORE",
		4: "WIDGET",
	}
	Enums_BidRequest_Impression_NativeRequest_PlacementType_value = map[string]int32{
		"FEED":             1,
		"ATOMIC_UNIT":      2,
		"OUTSIDE_THE_CORE": 3,
		"WIDGET":           4,
	}
)

func (x Enums_BidRequest_Impression_NativeRequest_PlacementType) Enum() *Enums_BidRequest_Impression_NativeRequest_PlacementType {
	p := new(Enums_BidRequest_Impression_NativeRequest_PlacementType)
	*p = x
	return p
}

func (x Enums_BidRequest_Impression_NativeRequest_PlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Impression_NativeRequest_PlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[19].Descriptor()
}

func (Enums_BidRequest_Impression_NativeRequest_PlacementType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[19]
}

func (x Enums_BidRequest_Impression_NativeRequest_PlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Impression_NativeRequest_PlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Impression_NativeRequest_PlacementType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest_PlacementType.Descriptor instead.
func (Enums_BidRequest_Impression_NativeRequest_PlacementType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2, 4}
}

// OpenRTB 6.13: Options for the content context; what type of content is it.
type Enums_BidRequest_Content_Context int32

const (
	Enums_BidRequest_Content_VIDEO           Enums_BidRequest_Content_Context = 1
	Enums_BidRequest_Content_GAME            Enums_BidRequest_Content_Context = 2
	Enums_BidRequest_Content_MUSIC           Enums_BidRequest_Content_Context = 3
	Enums_BidRequest_Content_APPLICATION     Enums_BidRequest_Content_Context = 4
	Enums_BidRequest_Content_TEXT            Enums_BidRequest_Content_Context = 5
	Enums_BidRequest_Content_OTHER           Enums_BidRequest_Content_Context = 6
	Enums_BidRequest_Content_CONTEXT_UNKNOWN Enums_BidRequest_Content_Context = 7
)

// Enum value maps for Enums_BidRequest_Content_Context.
var (
	Enums_BidRequest_Content_Context_name = map[int32]string{
		1: "VIDEO",
		2: "GAME",
		3: "MUSIC",
		4: "APPLICATION",
		5: "TEXT",
		6: "OTHER",
		7: "CONTEXT_UNKNOWN",
	}
	Enums_BidRequest_Content_Context_value = map[string]int32{
		"VIDEO":           1,
		"GAME":            2,
		"MUSIC":           3,
		"APPLICATION":     4,
		"TEXT":            5,
		"OTHER":           6,
		"CONTEXT_UNKNOWN": 7,
	}
)

func (x Enums_BidRequest_Content_Context) Enum() *Enums_BidRequest_Content_Context {
	p := new(Enums_BidRequest_Content_Context)
	*p = x
	return p
}

func (x Enums_BidRequest_Content_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Content_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[20].Descriptor()
}

func (Enums_BidRequest_Content_Context) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[20]
}

func (x Enums_BidRequest_Content_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Content_Context) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_Context(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Content_Context.Descriptor instead.
func (Enums_BidRequest_Content_Context) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

// OpenRTB 6.14: video quality.
// See http://www.iab.net/media/file/long-form-video-final.pdf
type Enums_BidRequest_Content_VideoQuality int32

const (
	Enums_BidRequest_Content_QUALITY_UNKNOWN Enums_BidRequest_Content_VideoQuality = 0
	Enums_BidRequest_Content_PROFESSIONAL    Enums_BidRequest_Content_VideoQuality = 1
	Enums_BidRequest_Content_PROSUMER        Enums_BidRequest_Content_VideoQuality = 2
	Enums_BidRequest_Content_USER_GENERATED  Enums_BidRequest_Content_VideoQuality = 3
)

// Enum value maps for Enums_BidRequest_Content_VideoQuality.
var (
	Enums_BidRequest_Content_VideoQuality_name = map[int32]string{
		0: "QUALITY_UNKNOWN",
		1: "PROFESSIONAL",
		2: "PROSUMER",
		3: "USER_GENERATED",
	}
	Enums_BidRequest_Content_VideoQuality_value = map[string]int32{
		"QUALITY_UNKNOWN": 0,
		"PROFESSIONAL":    1,
		"PROSUMER":        2,
		"USER_GENERATED":  3,
	}
)

func (x Enums_BidRequest_Content_VideoQuality) Enum() *Enums_BidRequest_Content_VideoQuality {
	p := new(Enums_BidRequest_Content_VideoQuality)
	*p = x
	return p
}

func (x Enums_BidRequest_Content_VideoQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Content_VideoQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[21].Descriptor()
}

func (Enums_BidRequest_Content_VideoQuality) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[21]
}

func (x Enums_BidRequest_Content_VideoQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Content_VideoQuality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_VideoQuality(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Content_VideoQuality.Descriptor instead.
func (Enums_BidRequest_Content_VideoQuality) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

// OpenRTB 6.18: media ratings using the QAG categorization.
// See http://www.iab.net/ne_guidelines
type Enums_BidRequest_Content_QAGMediaRating int32

const (
	Enums_BidRequest_Content_UNKNOWN       Enums_BidRequest_Content_QAGMediaRating = -1 // Extension to standard, added by Beeswax
	Enums_BidRequest_Content_ALL_AUDIENCES Enums_BidRequest_Content_QAGMediaRating = 1
	Enums_BidRequest_Content_EVERYONE_12   Enums_BidRequest_Content_QAGMediaRating = 2
	Enums_BidRequest_Content_MATURE        Enums_BidRequest_Content_QAGMediaRating = 3
)

// Enum value maps for Enums_BidRequest_Content_QAGMediaRating.
var (
	Enums_BidRequest_Content_QAGMediaRating_name = map[int32]string{
		-1: "UNKNOWN",
		1:  "ALL_AUDIENCES",
		2:  "EVERYONE_12",
		3:  "MATURE",
	}
	Enums_BidRequest_Content_QAGMediaRating_value = map[string]int32{
		"UNKNOWN":       -1,
		"ALL_AUDIENCES": 1,
		"EVERYONE_12":   2,
		"MATURE":        3,
	}
)

func (x Enums_BidRequest_Content_QAGMediaRating) Enum() *Enums_BidRequest_Content_QAGMediaRating {
	p := new(Enums_BidRequest_Content_QAGMediaRating)
	*p = x
	return p
}

func (x Enums_BidRequest_Content_QAGMediaRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Content_QAGMediaRating) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[22].Descriptor()
}

func (Enums_BidRequest_Content_QAGMediaRating) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[22]
}

func (x Enums_BidRequest_Content_QAGMediaRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Content_QAGMediaRating) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_QAGMediaRating(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Content_QAGMediaRating.Descriptor instead.
func (Enums_BidRequest_Content_QAGMediaRating) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 1, 2}
}

type Enums_BidRequest_Content_SourceRelationship int32

const (
	Enums_BidRequest_Content_INDIRECT Enums_BidRequest_Content_SourceRelationship = 0
	Enums_BidRequest_Content_DIRECT   Enums_BidRequest_Content_SourceRelationship = 1
)

// Enum value maps for Enums_BidRequest_Content_SourceRelationship.
var (
	Enums_BidRequest_Content_SourceRelationship_name = map[int32]string{
		0: "INDIRECT",
		1: "DIRECT",
	}
	Enums_BidRequest_Content_SourceRelationship_value = map[string]int32{
		"INDIRECT": 0,
		"DIRECT":   1,
	}
)

func (x Enums_BidRequest_Content_SourceRelationship) Enum() *Enums_BidRequest_Content_SourceRelationship {
	p := new(Enums_BidRequest_Content_SourceRelationship)
	*p = x
	return p
}

func (x Enums_BidRequest_Content_SourceRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Content_SourceRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[23].Descriptor()
}

func (Enums_BidRequest_Content_SourceRelationship) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[23]
}

func (x Enums_BidRequest_Content_SourceRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Content_SourceRelationship) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Content_SourceRelationship(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Content_SourceRelationship.Descriptor instead.
func (Enums_BidRequest_Content_SourceRelationship) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 1, 3}
}

// OpenRTB 6.10: connection type.
type Enums_BidRequest_Device_ConnectionType int32

const (
	Enums_BidRequest_Device_CONNECTION_UNKNOWN Enums_BidRequest_Device_ConnectionType = 0
	Enums_BidRequest_Device_ETHERNET           Enums_BidRequest_Device_ConnectionType = 1
	Enums_BidRequest_Device_WIFI               Enums_BidRequest_Device_ConnectionType = 2
	Enums_BidRequest_Device_CELL_UNKNOWN       Enums_BidRequest_Device_ConnectionType = 3
	Enums_BidRequest_Device_CELL_2G            Enums_BidRequest_Device_ConnectionType = 4
	Enums_BidRequest_Device_CELL_3G            Enums_BidRequest_Device_ConnectionType = 5
	Enums_BidRequest_Device_CELL_4G            Enums_BidRequest_Device_ConnectionType = 6
)

// Enum value maps for Enums_BidRequest_Device_ConnectionType.
var (
	Enums_BidRequest_Device_ConnectionType_name = map[int32]string{
		0: "CONNECTION_UNKNOWN",
		1: "ETHERNET",
		2: "WIFI",
		3: "CELL_UNKNOWN",
		4: "CELL_2G",
		5: "CELL_3G",
		6: "CELL_4G",
	}
	Enums_BidRequest_Device_ConnectionType_value = map[string]int32{
		"CONNECTION_UNKNOWN": 0,
		"ETHERNET":           1,
		"WIFI":               2,
		"CELL_UNKNOWN":       3,
		"CELL_2G":            4,
		"CELL_3G":            5,
		"CELL_4G":            6,
	}
)

func (x Enums_BidRequest_Device_ConnectionType) Enum() *Enums_BidRequest_Device_ConnectionType {
	p := new(Enums_BidRequest_Device_ConnectionType)
	*p = x
	return p
}

func (x Enums_BidRequest_Device_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Device_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[24].Descriptor()
}

func (Enums_BidRequest_Device_ConnectionType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[24]
}

func (x Enums_BidRequest_Device_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Device_ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Device_ConnectionType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Device_ConnectionType.Descriptor instead.
func (Enums_BidRequest_Device_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

// The type of device from which the impression originated.
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG).
type Enums_BidRequest_Device_DeviceType int32

const (
	Enums_BidRequest_Device_UNKNOWN          Enums_BidRequest_Device_DeviceType = -1 // Extension defined by Beeswax.
	Enums_BidRequest_Device_MOBILE           Enums_BidRequest_Device_DeviceType = 1
	Enums_BidRequest_Device_PC               Enums_BidRequest_Device_DeviceType = 2
	Enums_BidRequest_Device_CONNECTED_TV     Enums_BidRequest_Device_DeviceType = 3
	Enums_BidRequest_Device_PHONE            Enums_BidRequest_Device_DeviceType = 4
	Enums_BidRequest_Device_TABLET           Enums_BidRequest_Device_DeviceType = 5
	Enums_BidRequest_Device_CONNECTED_DEVICE Enums_BidRequest_Device_DeviceType = 6
	Enums_BidRequest_Device_SET_TOP_BOX      Enums_BidRequest_Device_DeviceType = 7
	Enums_BidRequest_Device_GAMES_CONSOLE    Enums_BidRequest_Device_DeviceType = 8
)

// Enum value maps for Enums_BidRequest_Device_DeviceType.
var (
	Enums_BidRequest_Device_DeviceType_name = map[int32]string{
		-1: "UNKNOWN",
		1:  "MOBILE",
		2:  "PC",
		3:  "CONNECTED_TV",
		4:  "PHONE",
		5:  "TABLET",
		6:  "CONNECTED_DEVICE",
		7:  "SET_TOP_BOX",
		8:  "GAMES_CONSOLE",
	}
	Enums_BidRequest_Device_DeviceType_value = map[string]int32{
		"UNKNOWN":          -1,
		"MOBILE":           1,
		"PC":               2,
		"CONNECTED_TV":     3,
		"PHONE":            4,
		"TABLET":           5,
		"CONNECTED_DEVICE": 6,
		"SET_TOP_BOX":      7,
		"GAMES_CONSOLE":    8,
	}
)

func (x Enums_BidRequest_Device_DeviceType) Enum() *Enums_BidRequest_Device_DeviceType {
	p := new(Enums_BidRequest_Device_DeviceType)
	*p = x
	return p
}

func (x Enums_BidRequest_Device_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Device_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[25].Descriptor()
}

func (Enums_BidRequest_Device_DeviceType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[25]
}

func (x Enums_BidRequest_Device_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Device_DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Device_DeviceType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Device_DeviceType.Descriptor instead.
func (Enums_BidRequest_Device_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

// OpenRTB 6.15: how the geographic information was determined.
type Enums_BidRequest_Geo_LocationType int32

const (
	Enums_BidRequest_Geo_GPS_LOCATION Enums_BidRequest_Geo_LocationType = 1
	Enums_BidRequest_Geo_IP           Enums_BidRequest_Geo_LocationType = 2
	Enums_BidRequest_Geo_USER         Enums_BidRequest_Geo_LocationType = 3
)

// Enum value maps for Enums_BidRequest_Geo_LocationType.
var (
	Enums_BidRequest_Geo_LocationType_name = map[int32]string{
		1: "GPS_LOCATION",
		2: "IP",
		3: "USER",
	}
	Enums_BidRequest_Geo_LocationType_value = map[string]int32{
		"GPS_LOCATION": 1,
		"IP":           2,
		"USER":         3,
	}
)

func (x Enums_BidRequest_Geo_LocationType) Enum() *Enums_BidRequest_Geo_LocationType {
	p := new(Enums_BidRequest_Geo_LocationType)
	*p = x
	return p
}

func (x Enums_BidRequest_Geo_LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_Geo_LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[26].Descriptor()
}

func (Enums_BidRequest_Geo_LocationType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[26]
}

func (x Enums_BidRequest_Geo_LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_Geo_LocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_Geo_LocationType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_Geo_LocationType.Descriptor instead.
func (Enums_BidRequest_Geo_LocationType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Enums_BidRequest_User_UserIdType int32

const (
	Enums_BidRequest_User_UNKNOWN         Enums_BidRequest_User_UserIdType = -1
	Enums_BidRequest_User_BEESWAX         Enums_BidRequest_User_UserIdType = 0
	Enums_BidRequest_User_CUSTOMER        Enums_BidRequest_User_UserIdType = 1
	Enums_BidRequest_User_IDFA            Enums_BidRequest_User_UserIdType = 2
	Enums_BidRequest_User_IDFA_MD5        Enums_BidRequest_User_UserIdType = 3
	Enums_BidRequest_User_IDFA_SHA1       Enums_BidRequest_User_UserIdType = 4
	Enums_BidRequest_User_AD_ID           Enums_BidRequest_User_UserIdType = 5
	Enums_BidRequest_User_AD_ID_MD5       Enums_BidRequest_User_UserIdType = 6
	Enums_BidRequest_User_AD_ID_SHA1      Enums_BidRequest_User_UserIdType = 7
	Enums_BidRequest_User_OTHER_MOBILE_ID Enums_BidRequest_User_UserIdType = 8 // The serving system will use this type when the mobile OS is unknown.
	// The request will be processed in the same way as other
	// mobile ids. (Prefix with `mid.` and do frequency cap, user_data augmentation, etc)
	Enums_BidRequest_User_IP_ADDRESS Enums_BidRequest_User_UserIdType = 9 // Support for IP Segments
)

// Enum value maps for Enums_BidRequest_User_UserIdType.
var (
	Enums_BidRequest_User_UserIdType_name = map[int32]string{
		-1: "UNKNOWN",
		0:  "BEESWAX",
		1:  "CUSTOMER",
		2:  "IDFA",
		3:  "IDFA_MD5",
		4:  "IDFA_SHA1",
		5:  "AD_ID",
		6:  "AD_ID_MD5",
		7:  "AD_ID_SHA1",
		8:  "OTHER_MOBILE_ID",
		9:  "IP_ADDRESS",
	}
	Enums_BidRequest_User_UserIdType_value = map[string]int32{
		"UNKNOWN":         -1,
		"BEESWAX":         0,
		"CUSTOMER":        1,
		"IDFA":            2,
		"IDFA_MD5":        3,
		"IDFA_SHA1":       4,
		"AD_ID":           5,
		"AD_ID_MD5":       6,
		"AD_ID_SHA1":      7,
		"OTHER_MOBILE_ID": 8,
		"IP_ADDRESS":      9,
	}
)

func (x Enums_BidRequest_User_UserIdType) Enum() *Enums_BidRequest_User_UserIdType {
	p := new(Enums_BidRequest_User_UserIdType)
	*p = x
	return p
}

func (x Enums_BidRequest_User_UserIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidRequest_User_UserIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[27].Descriptor()
}

func (Enums_BidRequest_User_UserIdType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[27]
}

func (x Enums_BidRequest_User_UserIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidRequest_User_UserIdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidRequest_User_UserIdType(num)
	return nil
}

// Deprecated: Use Enums_BidRequest_User_UserIdType.Descriptor instead.
func (Enums_BidRequest_User_UserIdType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

// The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type Enums_BidResponse_NoBidReason int32

const (
	Enums_BidResponse_UNKNOWN_ERROR              Enums_BidResponse_NoBidReason = 0
	Enums_BidResponse_TECHNICAL_ERROR            Enums_BidResponse_NoBidReason = 1
	Enums_BidResponse_INVALID_REQUEST            Enums_BidResponse_NoBidReason = 2
	Enums_BidResponse_KNOWN_WEB_SPIDER           Enums_BidResponse_NoBidReason = 3
	Enums_BidResponse_SUSPECTED_NONHUMAN_TRAFFIC Enums_BidResponse_NoBidReason = 4
	Enums_BidResponse_CLOUD_DATACENTER_PROXYIP   Enums_BidResponse_NoBidReason = 5
	Enums_BidResponse_UNSUPPORTED_DEVICE         Enums_BidResponse_NoBidReason = 6
	Enums_BidResponse_BLOCKED_PUBLISHER          Enums_BidResponse_NoBidReason = 7
	Enums_BidResponse_UNMATCHED_USER             Enums_BidResponse_NoBidReason = 8
)

// Enum value maps for Enums_BidResponse_NoBidReason.
var (
	Enums_BidResponse_NoBidReason_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "TECHNICAL_ERROR",
		2: "INVALID_REQUEST",
		3: "KNOWN_WEB_SPIDER",
		4: "SUSPECTED_NONHUMAN_TRAFFIC",
		5: "CLOUD_DATACENTER_PROXYIP",
		6: "UNSUPPORTED_DEVICE",
		7: "BLOCKED_PUBLISHER",
		8: "UNMATCHED_USER",
	}
	Enums_BidResponse_NoBidReason_value = map[string]int32{
		"UNKNOWN_ERROR":              0,
		"TECHNICAL_ERROR":            1,
		"INVALID_REQUEST":            2,
		"KNOWN_WEB_SPIDER":           3,
		"SUSPECTED_NONHUMAN_TRAFFIC": 4,
		"CLOUD_DATACENTER_PROXYIP":   5,
		"UNSUPPORTED_DEVICE":         6,
		"BLOCKED_PUBLISHER":          7,
		"UNMATCHED_USER":             8,
	}
)

func (x Enums_BidResponse_NoBidReason) Enum() *Enums_BidResponse_NoBidReason {
	p := new(Enums_BidResponse_NoBidReason)
	*p = x
	return p
}

func (x Enums_BidResponse_NoBidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_BidResponse_NoBidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[28].Descriptor()
}

func (Enums_BidResponse_NoBidReason) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[28]
}

func (x Enums_BidResponse_NoBidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_BidResponse_NoBidReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_BidResponse_NoBidReason(num)
	return nil
}

// Deprecated: Use Enums_BidResponse_NoBidReason.Descriptor instead.
func (Enums_BidResponse_NoBidReason) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Exchange Id.
// These values are obtained from inventory_source table in fes_buzz_db.
type Enums_Inventory_Source int32

const (
	Enums_Inventory_UNKNOWN_SOURCE       Enums_Inventory_Source = -1
	Enums_Inventory_GOOGLE_ADX           Enums_Inventory_Source = 0
	Enums_Inventory_LIVERAIL             Enums_Inventory_Source = 1
	Enums_Inventory_BRIGHTROLL           Enums_Inventory_Source = 2
	Enums_Inventory_MOPUB                Enums_Inventory_Source = 3
	Enums_Inventory_AERSERV              Enums_Inventory_Source = 4
	Enums_Inventory_PULSEPOINT           Enums_Inventory_Source = 5
	Enums_Inventory_RUBICON              Enums_Inventory_Source = 6
	Enums_Inventory_ADAPTV               Enums_Inventory_Source = 7
	Enums_Inventory_MILLENNIAL           Enums_Inventory_Source = 8
	Enums_Inventory_APPNEXUS             Enums_Inventory_Source = 9
	Enums_Inventory_OPENX                Enums_Inventory_Source = 10
	Enums_Inventory_PUBMATIC             Enums_Inventory_Source = 11
	Enums_Inventory_OPERA_MEDIA          Enums_Inventory_Source = 12
	Enums_Inventory_RTK                  Enums_Inventory_Source = 13
	Enums_Inventory_INNERACTIVE          Enums_Inventory_Source = 14
	Enums_Inventory_TREMOR               Enums_Inventory_Source = 15
	Enums_Inventory_INDEX_EXCHANGE       Enums_Inventory_Source = 16
	Enums_Inventory_YAHOO                Enums_Inventory_Source = 17
	Enums_Inventory_SMAATO               Enums_Inventory_Source = 18
	Enums_Inventory_APP_LOVIN            Enums_Inventory_Source = 19
	Enums_Inventory_MOLABS               Enums_Inventory_Source = 20
	Enums_Inventory_SPOTX                Enums_Inventory_Source = 21
	Enums_Inventory_ADBUDDIZ             Enums_Inventory_Source = 23
	Enums_Inventory_ADCONDUCTOR          Enums_Inventory_Source = 24
	Enums_Inventory_ADEASY               Enums_Inventory_Source = 25
	Enums_Inventory_ADFORM               Enums_Inventory_Source = 26
	Enums_Inventory_ADLANTIC             Enums_Inventory_Source = 27
	Enums_Inventory_ADMAX                Enums_Inventory_Source = 28
	Enums_Inventory_ADMEDIA              Enums_Inventory_Source = 29
	Enums_Inventory_ADMETA               Enums_Inventory_Source = 30
	Enums_Inventory_ADMIXER              Enums_Inventory_Source = 31
	Enums_Inventory_ADMIZED              Enums_Inventory_Source = 32
	Enums_Inventory_ADOP                 Enums_Inventory_Source = 33
	Enums_Inventory_ADTHINK              Enums_Inventory_Source = 34
	Enums_Inventory_ADRIVER              Enums_Inventory_Source = 35
	Enums_Inventory_ADRU                 Enums_Inventory_Source = 36
	Enums_Inventory_ADSCALE              Enums_Inventory_Source = 37
	Enums_Inventory_ADSNATIVE            Enums_Inventory_Source = 38
	Enums_Inventory_ADSKOM               Enums_Inventory_Source = 39
	Enums_Inventory_ADSPRUCE             Enums_Inventory_Source = 40
	Enums_Inventory_ADSTIR               Enums_Inventory_Source = 41
	Enums_Inventory_ADSUPPLY             Enums_Inventory_Source = 42
	Enums_Inventory_ADUNITY              Enums_Inventory_Source = 43
	Enums_Inventory_ADYOULIKE            Enums_Inventory_Source = 44
	Enums_Inventory_AMBIENT              Enums_Inventory_Source = 45
	Enums_Inventory_ANCORA               Enums_Inventory_Source = 46
	Enums_Inventory_AOL                  Enums_Inventory_Source = 47
	Enums_Inventory_APPVADOR             Enums_Inventory_Source = 48
	Enums_Inventory_AVOCARROT            Enums_Inventory_Source = 49
	Enums_Inventory_AXONIX               Enums_Inventory_Source = 50
	Enums_Inventory_BEACHFRONT           Enums_Inventory_Source = 51
	Enums_Inventory_BETWEEN              Enums_Inventory_Source = 52
	Enums_Inventory_BIDTELLECT           Enums_Inventory_Source = 53
	Enums_Inventory_BLUEWATERADS         Enums_Inventory_Source = 54
	Enums_Inventory_CAULY                Enums_Inventory_Source = 55
	Enums_Inventory_CENTRO               Enums_Inventory_Source = 56
	Enums_Inventory_CHAMELEON            Enums_Inventory_Source = 57
	Enums_Inventory_CLICKONOMETRICS      Enums_Inventory_Source = 58
	Enums_Inventory_CONVERGE             Enums_Inventory_Source = 59
	Enums_Inventory_COULL                Enums_Inventory_Source = 60
	Enums_Inventory_DISH                 Enums_Inventory_Source = 61
	Enums_Inventory_EXPERIAN             Enums_Inventory_Source = 62
	Enums_Inventory_FALKTECH             Enums_Inventory_Source = 63
	Enums_Inventory_FMX                  Enums_Inventory_Source = 64
	Enums_Inventory_FIDELITY             Enums_Inventory_Source = 65
	Enums_Inventory_FLUCT                Enums_Inventory_Source = 66
	Enums_Inventory_COX                  Enums_Inventory_Source = 67
	Enums_Inventory_GENIEE               Enums_Inventory_Source = 68
	Enums_Inventory_GMO                  Enums_Inventory_Source = 69
	Enums_Inventory_FLOOR6               Enums_Inventory_Source = 70
	Enums_Inventory_GUMGUM               Enums_Inventory_Source = 71
	Enums_Inventory_IBILLBOARD           Enums_Inventory_Source = 72
	Enums_Inventory_IMOIBLE              Enums_Inventory_Source = 73
	Enums_Inventory_KARGO                Enums_Inventory_Source = 74
	Enums_Inventory_KIOSKED              Enums_Inventory_Source = 75
	Enums_Inventory_KRUX                 Enums_Inventory_Source = 76
	Enums_Inventory_LIGATUS              Enums_Inventory_Source = 77
	Enums_Inventory_LIVEINTENT           Enums_Inventory_Source = 78
	Enums_Inventory_LKQD                 Enums_Inventory_Source = 79
	Enums_Inventory_LUPON                Enums_Inventory_Source = 80
	Enums_Inventory_MADS                 Enums_Inventory_Source = 81
	Enums_Inventory_MEDIABONG            Enums_Inventory_Source = 82
	Enums_Inventory_MICROAD              Enums_Inventory_Source = 83
	Enums_Inventory_MOBFOX               Enums_Inventory_Source = 84
	Enums_Inventory_MOBSMART             Enums_Inventory_Source = 85
	Enums_Inventory_MOCOPLEX             Enums_Inventory_Source = 86
	Enums_Inventory_NASMEDIA             Enums_Inventory_Source = 87
	Enums_Inventory_NATIVEADS            Enums_Inventory_Source = 88
	Enums_Inventory_NETSPRINT            Enums_Inventory_Source = 89
	Enums_Inventory_OOYALA               Enums_Inventory_Source = 90
	Enums_Inventory_OPTIMATIC            Enums_Inventory_Source = 91
	Enums_Inventory_POWERLINKS           Enums_Inventory_Source = 92
	Enums_Inventory_PROFITX              Enums_Inventory_Source = 93
	Enums_Inventory_PUBNATIVE            Enums_Inventory_Source = 94
	Enums_Inventory_REALVU               Enums_Inventory_Source = 95
	Enums_Inventory_REPUBLER             Enums_Inventory_Source = 96
	Enums_Inventory_SARA                 Enums_Inventory_Source = 97
	Enums_Inventory_SCALEOUT             Enums_Inventory_Source = 98
	Enums_Inventory_SHARETHROUGH         Enums_Inventory_Source = 99
	Enums_Inventory_SMARTADSERVER        Enums_Inventory_Source = 100
	Enums_Inventory_SONOBI               Enums_Inventory_Source = 101
	Enums_Inventory_SORTABLE             Enums_Inventory_Source = 102
	Enums_Inventory_SSPICYADS            Enums_Inventory_Source = 103
	Enums_Inventory_STICKYADS            Enums_Inventory_Source = 104
	Enums_Inventory_SWITCHCONCEPTS       Enums_Inventory_Source = 105
	Enums_Inventory_TEADS                Enums_Inventory_Source = 106
	Enums_Inventory_THIRDPRESENCE        Enums_Inventory_Source = 107
	Enums_Inventory_THRONE               Enums_Inventory_Source = 108
	Enums_Inventory_TPMN                 Enums_Inventory_Source = 109
	Enums_Inventory_TRIPLELIFT           Enums_Inventory_Source = 110
	Enums_Inventory_UCFUNNEL             Enums_Inventory_Source = 111
	Enums_Inventory_UNRULYX              Enums_Inventory_Source = 112
	Enums_Inventory_VDOPIA               Enums_Inventory_Source = 113
	Enums_Inventory_VI                   Enums_Inventory_Source = 114
	Enums_Inventory_VMG                  Enums_Inventory_Source = 115
	Enums_Inventory_VIDMATIC             Enums_Inventory_Source = 116
	Enums_Inventory_VMAX                 Enums_Inventory_Source = 117
	Enums_Inventory_VRTCAL               Enums_Inventory_Source = 118
	Enums_Inventory_VUNGLE               Enums_Inventory_Source = 119
	Enums_Inventory_WORDPRESS            Enums_Inventory_Source = 120
	Enums_Inventory_XROST                Enums_Inventory_Source = 121
	Enums_Inventory_YIELDLAB             Enums_Inventory_Source = 122
	Enums_Inventory_YIELDONE             Enums_Inventory_Source = 123
	Enums_Inventory_YIELDONE_ADS         Enums_Inventory_Source = 124
	Enums_Inventory_YIELDONE_INNITY      Enums_Inventory_Source = 125
	Enums_Inventory_YUME                 Enums_Inventory_Source = 126
	Enums_Inventory_ZEDO                 Enums_Inventory_Source = 127
	Enums_Inventory_ZEOTAP               Enums_Inventory_Source = 128
	Enums_Inventory_POLAR                Enums_Inventory_Source = 129
	Enums_Inventory_UNITY                Enums_Inventory_Source = 130
	Enums_Inventory_DAILYMOTION          Enums_Inventory_Source = 131
	Enums_Inventory_ADTELLIGENT          Enums_Inventory_Source = 132
	Enums_Inventory_GLISPA               Enums_Inventory_Source = 133
	Enums_Inventory_TRUSTX               Enums_Inventory_Source = 134
	Enums_Inventory_IRON_SOURCE          Enums_Inventory_Source = 136
	Enums_Inventory_BIDSWITCH_DEALS_FEED Enums_Inventory_Source = 137
	Enums_Inventory_SMARTY_ADS           Enums_Inventory_Source = 138
	Enums_Inventory_BIDSTACK             Enums_Inventory_Source = 140
	Enums_Inventory_ADASIA               Enums_Inventory_Source = 141
	Enums_Inventory_AD_UNITY             Enums_Inventory_Source = 142
	Enums_Inventory_ADVIEW               Enums_Inventory_Source = 143
	Enums_Inventory_AD_GENERATION        Enums_Inventory_Source = 144
	Enums_Inventory_AMOBEE               Enums_Inventory_Source = 145
	Enums_Inventory_ANTS                 Enums_Inventory_Source = 146
	Enums_Inventory_ADSTANDING           Enums_Inventory_Source = 147
	Enums_Inventory_PLAYBUZZ             Enums_Inventory_Source = 148
	Enums_Inventory_COLOSSUS             Enums_Inventory_Source = 149
	Enums_Inventory_CONVERGE_DIGITAL     Enums_Inventory_Source = 150
	Enums_Inventory_CONNECTAD            Enums_Inventory_Source = 151
	Enums_Inventory_CONEX                Enums_Inventory_Source = 152
	Enums_Inventory_CXENSE               Enums_Inventory_Source = 153
	Enums_Inventory_DASHBID              Enums_Inventory_Source = 154
	Enums_Inventory_DATAWRKZ             Enums_Inventory_Source = 155
	Enums_Inventory_DIGITAL_GARAGE       Enums_Inventory_Source = 156
	Enums_Inventory_AD_RU                Enums_Inventory_Source = 157
	Enums_Inventory_ADXMI                Enums_Inventory_Source = 158
	Enums_Inventory_AMEBA                Enums_Inventory_Source = 159
	Enums_Inventory_CHEETAH              Enums_Inventory_Source = 160
	Enums_Inventory_ERICSSON_EMODO       Enums_Inventory_Source = 161
	Enums_Inventory_EXELBID              Enums_Inventory_Source = 162
	Enums_Inventory_ADFULLY              Enums_Inventory_Source = 163
	Enums_Inventory_GIANT_MEDIA          Enums_Inventory_Source = 164
	Enums_Inventory_BROAD_SIGN           Enums_Inventory_Source = 165
	Enums_Inventory_IMPROVE_DIGITAL      Enums_Inventory_Source = 166
	Enums_Inventory_BRAINY               Enums_Inventory_Source = 167
	Enums_Inventory_DISH_NETWORK         Enums_Inventory_Source = 168
	Enums_Inventory_ADVERLINE            Enums_Inventory_Source = 169
	Enums_Inventory_LODEO                Enums_Inventory_Source = 170
	Enums_Inventory_LOOPME               Enums_Inventory_Source = 171
	Enums_Inventory_ADMAN                Enums_Inventory_Source = 172
	Enums_Inventory_ADMATIC              Enums_Inventory_Source = 173
	Enums_Inventory_MADVERTISE_MEDIA     Enums_Inventory_Source = 174
	Enums_Inventory_ADMIX                Enums_Inventory_Source = 175
	Enums_Inventory_GAMMA                Enums_Inventory_Source = 176
	Enums_Inventory_YIELDMO              Enums_Inventory_Source = 177
	Enums_Inventory_ZNAPTAG              Enums_Inventory_Source = 178
	Enums_Inventory_NATIVO               Enums_Inventory_Source = 179
	Enums_Inventory_MEDIA_NET            Enums_Inventory_Source = 180
	Enums_Inventory_CHOCOLATE            Enums_Inventory_Source = 181
	Enums_Inventory_OGURY                Enums_Inventory_Source = 182
	Enums_Inventory_ONETAG               Enums_Inventory_Source = 183
	Enums_Inventory_OUTBRAIN             Enums_Inventory_Source = 184
	Enums_Inventory_PERSONAGRAPH         Enums_Inventory_Source = 185
	Enums_Inventory_DEEP_INTENT          Enums_Inventory_Source = 186
	Enums_Inventory_PLAYTEM              Enums_Inventory_Source = 187
	Enums_Inventory_POKKT                Enums_Inventory_Source = 188
	Enums_Inventory_POLYMORPHICADS       Enums_Inventory_Source = 189
	Enums_Inventory_POWERINBOX           Enums_Inventory_Source = 190
	Enums_Inventory_PRIMIS               Enums_Inventory_Source = 191
	Enums_Inventory_QUANTX               Enums_Inventory_Source = 192
	Enums_Inventory_RAKUTEN              Enums_Inventory_Source = 193
	Enums_Inventory_REKLAMSTORE          Enums_Inventory_Source = 194
	Enums_Inventory_RELAIDO              Enums_Inventory_Source = 195
	Enums_Inventory_REVCONTENT           Enums_Inventory_Source = 196
	Enums_Inventory_ADVERTY              Enums_Inventory_Source = 197
	Enums_Inventory_SEEDTAG              Enums_Inventory_Source = 198
	Enums_Inventory_SELECTMEDIA          Enums_Inventory_Source = 199
	Enums_Inventory_COLUMN6              Enums_Inventory_Source = 200
	Enums_Inventory_SORENSON             Enums_Inventory_Source = 201
	Enums_Inventory_SPICY                Enums_Inventory_Source = 202
	Enums_Inventory_SYNACOR              Enums_Inventory_Source = 203
	Enums_Inventory_TABOOLA              Enums_Inventory_Source = 204
	Enums_Inventory_TAGON                Enums_Inventory_Source = 205
	Enums_Inventory_TENMAX               Enums_Inventory_Source = 206
	Enums_Inventory_ADTOMA               Enums_Inventory_Source = 207
	Enums_Inventory_ATWOX                Enums_Inventory_Source = 208
	Enums_Inventory_UNDERTONE            Enums_Inventory_Source = 210
	Enums_Inventory_VENA_TV              Enums_Inventory_Source = 211
	Enums_Inventory_VERTOZ               Enums_Inventory_Source = 212
	Enums_Inventory_INADVIA              Enums_Inventory_Source = 213
	Enums_Inventory_WEBORAMA             Enums_Inventory_Source = 214
	Enums_Inventory_WOOBI                Enums_Inventory_Source = 215
	Enums_Inventory_YENGO                Enums_Inventory_Source = 216
	Enums_Inventory_YOC                  Enums_Inventory_Source = 217
	Enums_Inventory_ZIFF_DAVIS           Enums_Inventory_Source = 218
	Enums_Inventory_OZONE                Enums_Inventory_Source = 219
	Enums_Inventory_THIRTY_THREE_ACROSS  Enums_Inventory_Source = 220
	Enums_Inventory_SAMSUNG              Enums_Inventory_Source = 221
	Enums_Inventory_PHUNWARE             Enums_Inventory_Source = 222
	Enums_Inventory_IMPROVE              Enums_Inventory_Source = 223
	Enums_Inventory_DISTRICTM            Enums_Inventory_Source = 224
	Enums_Inventory_INMOBI               Enums_Inventory_Source = 225
	Enums_Inventory_CONNATIX             Enums_Inventory_Source = 226
	Enums_Inventory_EMX                  Enums_Inventory_Source = 227
	Enums_Inventory_SPRINGSERVE          Enums_Inventory_Source = 228
	Enums_Inventory_VERVE                Enums_Inventory_Source = 229
)

// Enum value maps for Enums_Inventory_Source.
var (
	Enums_Inventory_Source_name = map[int32]string{
		-1:  "UNKNOWN_SOURCE",
		0:   "GOOGLE_ADX",
		1:   "LIVERAIL",
		2:   "BRIGHTROLL",
		3:   "MOPUB",
		4:   "AERSERV",
		5:   "PULSEPOINT",
		6:   "RUBICON",
		7:   "ADAPTV",
		8:   "MILLENNIAL",
		9:   "APPNEXUS",
		10:  "OPENX",
		11:  "PUBMATIC",
		12:  "OPERA_MEDIA",
		13:  "RTK",
		14:  "INNERACTIVE",
		15:  "TREMOR",
		16:  "INDEX_EXCHANGE",
		17:  "YAHOO",
		18:  "SMAATO",
		19:  "APP_LOVIN",
		20:  "MOLABS",
		21:  "SPOTX",
		23:  "ADBUDDIZ",
		24:  "ADCONDUCTOR",
		25:  "ADEASY",
		26:  "ADFORM",
		27:  "ADLANTIC",
		28:  "ADMAX",
		29:  "ADMEDIA",
		30:  "ADMETA",
		31:  "ADMIXER",
		32:  "ADMIZED",
		33:  "ADOP",
		34:  "ADTHINK",
		35:  "ADRIVER",
		36:  "ADRU",
		37:  "ADSCALE",
		38:  "ADSNATIVE",
		39:  "ADSKOM",
		40:  "ADSPRUCE",
		41:  "ADSTIR",
		42:  "ADSUPPLY",
		43:  "ADUNITY",
		44:  "ADYOULIKE",
		45:  "AMBIENT",
		46:  "ANCORA",
		47:  "AOL",
		48:  "APPVADOR",
		49:  "AVOCARROT",
		50:  "AXONIX",
		51:  "BEACHFRONT",
		52:  "BETWEEN",
		53:  "BIDTELLECT",
		54:  "BLUEWATERADS",
		55:  "CAULY",
		56:  "CENTRO",
		57:  "CHAMELEON",
		58:  "CLICKONOMETRICS",
		59:  "CONVERGE",
		60:  "COULL",
		61:  "DISH",
		62:  "EXPERIAN",
		63:  "FALKTECH",
		64:  "FMX",
		65:  "FIDELITY",
		66:  "FLUCT",
		67:  "COX",
		68:  "GENIEE",
		69:  "GMO",
		70:  "FLOOR6",
		71:  "GUMGUM",
		72:  "IBILLBOARD",
		73:  "IMOIBLE",
		74:  "KARGO",
		75:  "KIOSKED",
		76:  "KRUX",
		77:  "LIGATUS",
		78:  "LIVEINTENT",
		79:  "LKQD",
		80:  "LUPON",
		81:  "MADS",
		82:  "MEDIABONG",
		83:  "MICROAD",
		84:  "MOBFOX",
		85:  "MOBSMART",
		86:  "MOCOPLEX",
		87:  "NASMEDIA",
		88:  "NATIVEADS",
		89:  "NETSPRINT",
		90:  "OOYALA",
		91:  "OPTIMATIC",
		92:  "POWERLINKS",
		93:  "PROFITX",
		94:  "PUBNATIVE",
		95:  "REALVU",
		96:  "REPUBLER",
		97:  "SARA",
		98:  "SCALEOUT",
		99:  "SHARETHROUGH",
		100: "SMARTADSERVER",
		101: "SONOBI",
		102: "SORTABLE",
		103: "SSPICYADS",
		104: "STICKYADS",
		105: "SWITCHCONCEPTS",
		106: "TEADS",
		107: "THIRDPRESENCE",
		108: "THRONE",
		109: "TPMN",
		110: "TRIPLELIFT",
		111: "UCFUNNEL",
		112: "UNRULYX",
		113: "VDOPIA",
		114: "VI",
		115: "VMG",
		116: "VIDMATIC",
		117: "VMAX",
		118: "VRTCAL",
		119: "VUNGLE",
		120: "WORDPRESS",
		121: "XROST",
		122: "YIELDLAB",
		123: "YIELDONE",
		124: "YIELDONE_ADS",
		125: "YIELDONE_INNITY",
		126: "YUME",
		127: "ZEDO",
		128: "ZEOTAP",
		129: "POLAR",
		130: "UNITY",
		131: "DAILYMOTION",
		132: "ADTELLIGENT",
		133: "GLISPA",
		134: "TRUSTX",
		136: "IRON_SOURCE",
		137: "BIDSWITCH_DEALS_FEED",
		138: "SMARTY_ADS",
		140: "BIDSTACK",
		141: "ADASIA",
		142: "AD_UNITY",
		143: "ADVIEW",
		144: "AD_GENERATION",
		145: "AMOBEE",
		146: "ANTS",
		147: "ADSTANDING",
		148: "PLAYBUZZ",
		149: "COLOSSUS",
		150: "CONVERGE_DIGITAL",
		151: "CONNECTAD",
		152: "CONEX",
		153: "CXENSE",
		154: "DASHBID",
		155: "DATAWRKZ",
		156: "DIGITAL_GARAGE",
		157: "AD_RU",
		158: "ADXMI",
		159: "AMEBA",
		160: "CHEETAH",
		161: "ERICSSON_EMODO",
		162: "EXELBID",
		163: "ADFULLY",
		164: "GIANT_MEDIA",
		165: "BROAD_SIGN",
		166: "IMPROVE_DIGITAL",
		167: "BRAINY",
		168: "DISH_NETWORK",
		169: "ADVERLINE",
		170: "LODEO",
		171: "LOOPME",
		172: "ADMAN",
		173: "ADMATIC",
		174: "MADVERTISE_MEDIA",
		175: "ADMIX",
		176: "GAMMA",
		177: "YIELDMO",
		178: "ZNAPTAG",
		179: "NATIVO",
		180: "MEDIA_NET",
		181: "CHOCOLATE",
		182: "OGURY",
		183: "ONETAG",
		184: "OUTBRAIN",
		185: "PERSONAGRAPH",
		186: "DEEP_INTENT",
		187: "PLAYTEM",
		188: "POKKT",
		189: "POLYMORPHICADS",
		190: "POWERINBOX",
		191: "PRIMIS",
		192: "QUANTX",
		193: "RAKUTEN",
		194: "REKLAMSTORE",
		195: "RELAIDO",
		196: "REVCONTENT",
		197: "ADVERTY",
		198: "SEEDTAG",
		199: "SELECTMEDIA",
		200: "COLUMN6",
		201: "SORENSON",
		202: "SPICY",
		203: "SYNACOR",
		204: "TABOOLA",
		205: "TAGON",
		206: "TENMAX",
		207: "ADTOMA",
		208: "ATWOX",
		210: "UNDERTONE",
		211: "VENA_TV",
		212: "VERTOZ",
		213: "INADVIA",
		214: "WEBORAMA",
		215: "WOOBI",
		216: "YENGO",
		217: "YOC",
		218: "ZIFF_DAVIS",
		219: "OZONE",
		220: "THIRTY_THREE_ACROSS",
		221: "SAMSUNG",
		222: "PHUNWARE",
		223: "IMPROVE",
		224: "DISTRICTM",
		225: "INMOBI",
		226: "CONNATIX",
		227: "EMX",
		228: "SPRINGSERVE",
		229: "VERVE",
	}
	Enums_Inventory_Source_value = map[string]int32{
		"UNKNOWN_SOURCE":       -1,
		"GOOGLE_ADX":           0,
		"LIVERAIL":             1,
		"BRIGHTROLL":           2,
		"MOPUB":                3,
		"AERSERV":              4,
		"PULSEPOINT":           5,
		"RUBICON":              6,
		"ADAPTV":               7,
		"MILLENNIAL":           8,
		"APPNEXUS":             9,
		"OPENX":                10,
		"PUBMATIC":             11,
		"OPERA_MEDIA":          12,
		"RTK":                  13,
		"INNERACTIVE":          14,
		"TREMOR":               15,
		"INDEX_EXCHANGE":       16,
		"YAHOO":                17,
		"SMAATO":               18,
		"APP_LOVIN":            19,
		"MOLABS":               20,
		"SPOTX":                21,
		"ADBUDDIZ":             23,
		"ADCONDUCTOR":          24,
		"ADEASY":               25,
		"ADFORM":               26,
		"ADLANTIC":             27,
		"ADMAX":                28,
		"ADMEDIA":              29,
		"ADMETA":               30,
		"ADMIXER":              31,
		"ADMIZED":              32,
		"ADOP":                 33,
		"ADTHINK":              34,
		"ADRIVER":              35,
		"ADRU":                 36,
		"ADSCALE":              37,
		"ADSNATIVE":            38,
		"ADSKOM":               39,
		"ADSPRUCE":             40,
		"ADSTIR":               41,
		"ADSUPPLY":             42,
		"ADUNITY":              43,
		"ADYOULIKE":            44,
		"AMBIENT":              45,
		"ANCORA":               46,
		"AOL":                  47,
		"APPVADOR":             48,
		"AVOCARROT":            49,
		"AXONIX":               50,
		"BEACHFRONT":           51,
		"BETWEEN":              52,
		"BIDTELLECT":           53,
		"BLUEWATERADS":         54,
		"CAULY":                55,
		"CENTRO":               56,
		"CHAMELEON":            57,
		"CLICKONOMETRICS":      58,
		"CONVERGE":             59,
		"COULL":                60,
		"DISH":                 61,
		"EXPERIAN":             62,
		"FALKTECH":             63,
		"FMX":                  64,
		"FIDELITY":             65,
		"FLUCT":                66,
		"COX":                  67,
		"GENIEE":               68,
		"GMO":                  69,
		"FLOOR6":               70,
		"GUMGUM":               71,
		"IBILLBOARD":           72,
		"IMOIBLE":              73,
		"KARGO":                74,
		"KIOSKED":              75,
		"KRUX":                 76,
		"LIGATUS":              77,
		"LIVEINTENT":           78,
		"LKQD":                 79,
		"LUPON":                80,
		"MADS":                 81,
		"MEDIABONG":            82,
		"MICROAD":              83,
		"MOBFOX":               84,
		"MOBSMART":             85,
		"MOCOPLEX":             86,
		"NASMEDIA":             87,
		"NATIVEADS":            88,
		"NETSPRINT":            89,
		"OOYALA":               90,
		"OPTIMATIC":            91,
		"POWERLINKS":           92,
		"PROFITX":              93,
		"PUBNATIVE":            94,
		"REALVU":               95,
		"REPUBLER":             96,
		"SARA":                 97,
		"SCALEOUT":             98,
		"SHARETHROUGH":         99,
		"SMARTADSERVER":        100,
		"SONOBI":               101,
		"SORTABLE":             102,
		"SSPICYADS":            103,
		"STICKYADS":            104,
		"SWITCHCONCEPTS":       105,
		"TEADS":                106,
		"THIRDPRESENCE":        107,
		"THRONE":               108,
		"TPMN":                 109,
		"TRIPLELIFT":           110,
		"UCFUNNEL":             111,
		"UNRULYX":              112,
		"VDOPIA":               113,
		"VI":                   114,
		"VMG":                  115,
		"VIDMATIC":             116,
		"VMAX":                 117,
		"VRTCAL":               118,
		"VUNGLE":               119,
		"WORDPRESS":            120,
		"XROST":                121,
		"YIELDLAB":             122,
		"YIELDONE":             123,
		"YIELDONE_ADS":         124,
		"YIELDONE_INNITY":      125,
		"YUME":                 126,
		"ZEDO":                 127,
		"ZEOTAP":               128,
		"POLAR":                129,
		"UNITY":                130,
		"DAILYMOTION":          131,
		"ADTELLIGENT":          132,
		"GLISPA":               133,
		"TRUSTX":               134,
		"IRON_SOURCE":          136,
		"BIDSWITCH_DEALS_FEED": 137,
		"SMARTY_ADS":           138,
		"BIDSTACK":             140,
		"ADASIA":               141,
		"AD_UNITY":             142,
		"ADVIEW":               143,
		"AD_GENERATION":        144,
		"AMOBEE":               145,
		"ANTS":                 146,
		"ADSTANDING":           147,
		"PLAYBUZZ":             148,
		"COLOSSUS":             149,
		"CONVERGE_DIGITAL":     150,
		"CONNECTAD":            151,
		"CONEX":                152,
		"CXENSE":               153,
		"DASHBID":              154,
		"DATAWRKZ":             155,
		"DIGITAL_GARAGE":       156,
		"AD_RU":                157,
		"ADXMI":                158,
		"AMEBA":                159,
		"CHEETAH":              160,
		"ERICSSON_EMODO":       161,
		"EXELBID":              162,
		"ADFULLY":              163,
		"GIANT_MEDIA":          164,
		"BROAD_SIGN":           165,
		"IMPROVE_DIGITAL":      166,
		"BRAINY":               167,
		"DISH_NETWORK":         168,
		"ADVERLINE":            169,
		"LODEO":                170,
		"LOOPME":               171,
		"ADMAN":                172,
		"ADMATIC":              173,
		"MADVERTISE_MEDIA":     174,
		"ADMIX":                175,
		"GAMMA":                176,
		"YIELDMO":              177,
		"ZNAPTAG":              178,
		"NATIVO":               179,
		"MEDIA_NET":            180,
		"CHOCOLATE":            181,
		"OGURY":                182,
		"ONETAG":               183,
		"OUTBRAIN":             184,
		"PERSONAGRAPH":         185,
		"DEEP_INTENT":          186,
		"PLAYTEM":              187,
		"POKKT":                188,
		"POLYMORPHICADS":       189,
		"POWERINBOX":           190,
		"PRIMIS":               191,
		"QUANTX":               192,
		"RAKUTEN":              193,
		"REKLAMSTORE":          194,
		"RELAIDO":              195,
		"REVCONTENT":           196,
		"ADVERTY":              197,
		"SEEDTAG":              198,
		"SELECTMEDIA":          199,
		"COLUMN6":              200,
		"SORENSON":             201,
		"SPICY":                202,
		"SYNACOR":              203,
		"TABOOLA":              204,
		"TAGON":                205,
		"TENMAX":               206,
		"ADTOMA":               207,
		"ATWOX":                208,
		"UNDERTONE":            210,
		"VENA_TV":              211,
		"VERTOZ":               212,
		"INADVIA":              213,
		"WEBORAMA":             214,
		"WOOBI":                215,
		"YENGO":                216,
		"YOC":                  217,
		"ZIFF_DAVIS":           218,
		"OZONE":                219,
		"THIRTY_THREE_ACROSS":  220,
		"SAMSUNG":              221,
		"PHUNWARE":             222,
		"IMPROVE":              223,
		"DISTRICTM":            224,
		"INMOBI":               225,
		"CONNATIX":             226,
		"EMX":                  227,
		"SPRINGSERVE":          228,
		"VERVE":                229,
	}
)

func (x Enums_Inventory_Source) Enum() *Enums_Inventory_Source {
	p := new(Enums_Inventory_Source)
	*p = x
	return p
}

func (x Enums_Inventory_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[29].Descriptor()
}

func (Enums_Inventory_Source) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[29]
}

func (x Enums_Inventory_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_Source) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_Source(num)
	return nil
}

// Deprecated: Use Enums_Inventory_Source.Descriptor instead.
func (Enums_Inventory_Source) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Placement Type of the OpenRTB Bid Request
type Enums_Inventory_PlacementType int32

const (
	Enums_Inventory_UNKNOWN_PLACEMENT_TYPE Enums_Inventory_PlacementType = -1
	Enums_Inventory_BANNER                 Enums_Inventory_PlacementType = 0
	Enums_Inventory_VIDEO                  Enums_Inventory_PlacementType = 1
	Enums_Inventory_NATIVE                 Enums_Inventory_PlacementType = 2
	Enums_Inventory_BANNER_AND_VIDEO       Enums_Inventory_PlacementType = 3
)

// Enum value maps for Enums_Inventory_PlacementType.
var (
	Enums_Inventory_PlacementType_name = map[int32]string{
		-1: "UNKNOWN_PLACEMENT_TYPE",
		0:  "BANNER",
		1:  "VIDEO",
		2:  "NATIVE",
		3:  "BANNER_AND_VIDEO",
	}
	Enums_Inventory_PlacementType_value = map[string]int32{
		"UNKNOWN_PLACEMENT_TYPE": -1,
		"BANNER":                 0,
		"VIDEO":                  1,
		"NATIVE":                 2,
		"BANNER_AND_VIDEO":       3,
	}
)

func (x Enums_Inventory_PlacementType) Enum() *Enums_Inventory_PlacementType {
	p := new(Enums_Inventory_PlacementType)
	*p = x
	return p
}

func (x Enums_Inventory_PlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_PlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[30].Descriptor()
}

func (Enums_Inventory_PlacementType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[30]
}

func (x Enums_Inventory_PlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_PlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_PlacementType(num)
	return nil
}

// Deprecated: Use Enums_Inventory_PlacementType.Descriptor instead.
func (Enums_Inventory_PlacementType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 1}
}

// Environment type of the bid request.
type Enums_Inventory_EnvironmentType int32

const (
	Enums_Inventory_UNKNOWN_ENVIRONMENT_TYPE Enums_Inventory_EnvironmentType = -1
	Enums_Inventory_WEB                      Enums_Inventory_EnvironmentType = 0
	Enums_Inventory_APP                      Enums_Inventory_EnvironmentType = 1
)

// Enum value maps for Enums_Inventory_EnvironmentType.
var (
	Enums_Inventory_EnvironmentType_name = map[int32]string{
		-1: "UNKNOWN_ENVIRONMENT_TYPE",
		0:  "WEB",
		1:  "APP",
	}
	Enums_Inventory_EnvironmentType_value = map[string]int32{
		"UNKNOWN_ENVIRONMENT_TYPE": -1,
		"WEB":                      0,
		"APP":                      1,
	}
)

func (x Enums_Inventory_EnvironmentType) Enum() *Enums_Inventory_EnvironmentType {
	p := new(Enums_Inventory_EnvironmentType)
	*p = x
	return p
}

func (x Enums_Inventory_EnvironmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_EnvironmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[31].Descriptor()
}

func (Enums_Inventory_EnvironmentType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[31]
}

func (x Enums_Inventory_EnvironmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_EnvironmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_EnvironmentType(num)
	return nil
}

// Deprecated: Use Enums_Inventory_EnvironmentType.Descriptor instead.
func (Enums_Inventory_EnvironmentType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 2}
}

// DataCenter, a.k.a. AWS region.
type Enums_Inventory_DataCenter int32

const (
	Enums_Inventory_UNKNOWN             Enums_Inventory_DataCenter = 0
	Enums_Inventory_UNKNOWN_DATA_CENTER Enums_Inventory_DataCenter = 0
	Enums_Inventory_US_EAST_1           Enums_Inventory_DataCenter = 1
	Enums_Inventory_US_WEST_2           Enums_Inventory_DataCenter = 2
	Enums_Inventory_EU_WEST_1           Enums_Inventory_DataCenter = 3
	Enums_Inventory_AP_NORTHEAST_1      Enums_Inventory_DataCenter = 4
)

// Enum value maps for Enums_Inventory_DataCenter.
var (
	Enums_Inventory_DataCenter_name = map[int32]string{
		0: "UNKNOWN",
		// Duplicate value: 0: "UNKNOWN_DATA_CENTER",
		1: "US_EAST_1",
		2: "US_WEST_2",
		3: "EU_WEST_1",
		4: "AP_NORTHEAST_1",
	}
	Enums_Inventory_DataCenter_value = map[string]int32{
		"UNKNOWN":             0,
		"UNKNOWN_DATA_CENTER": 0,
		"US_EAST_1":           1,
		"US_WEST_2":           2,
		"EU_WEST_1":           3,
		"AP_NORTHEAST_1":      4,
	}
)

func (x Enums_Inventory_DataCenter) Enum() *Enums_Inventory_DataCenter {
	p := new(Enums_Inventory_DataCenter)
	*p = x
	return p
}

func (x Enums_Inventory_DataCenter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_DataCenter) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[32].Descriptor()
}

func (Enums_Inventory_DataCenter) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[32]
}

func (x Enums_Inventory_DataCenter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_DataCenter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_DataCenter(num)
	return nil
}

// Deprecated: Use Enums_Inventory_DataCenter.Descriptor instead.
func (Enums_Inventory_DataCenter) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 3}
}

// Continents are nonoverlapping geographic areas. Continent-to-DataCenter
// is one-to-many. DataCenter-to-Continent is one-to-one.
// For example, US-EAST-1 and US-WEST-2 are in NAM, and EU_WEST_1 is in EMEA.
// The data centers within a continent share things like budget and user data,
// neither of which crosses continent boundaries.
// For more information, https://docs.google.com/document/d/1oACWofpsEZsjXNVNnEINZYAutEtAmvWbznTLLx-Aa9c
type Enums_Inventory_Continent int32

const (
	// Keep continents in sync with Buzz
	Enums_Inventory_UNKNOWN_CONTINENT Enums_Inventory_Continent = 0
	Enums_Inventory_NAM               Enums_Inventory_Continent = 1 // North America
	Enums_Inventory_EMEA              Enums_Inventory_Continent = 2 // Europe, the Middle East & Asia
	Enums_Inventory_APAC              Enums_Inventory_Continent = 3 // Asia Pacific
)

// Enum value maps for Enums_Inventory_Continent.
var (
	Enums_Inventory_Continent_name = map[int32]string{
		0: "UNKNOWN_CONTINENT",
		1: "NAM",
		2: "EMEA",
		3: "APAC",
	}
	Enums_Inventory_Continent_value = map[string]int32{
		"UNKNOWN_CONTINENT": 0,
		"NAM":               1,
		"EMEA":              2,
		"APAC":              3,
	}
)

func (x Enums_Inventory_Continent) Enum() *Enums_Inventory_Continent {
	p := new(Enums_Inventory_Continent)
	*p = x
	return p
}

func (x Enums_Inventory_Continent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_Continent) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[33].Descriptor()
}

func (Enums_Inventory_Continent) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[33]
}

func (x Enums_Inventory_Continent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_Continent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_Continent(num)
	return nil
}

// Deprecated: Use Enums_Inventory_Continent.Descriptor instead.
func (Enums_Inventory_Continent) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 4}
}

// Impression trackers are explicit fields in the BidResponse sent back to the
// exchange. The exchange is responsible for pinging the bidder and this helps
// reduce discrepancy between the exchange and the bidder.
// Exchanges support ImpressionTracker for certain segments of their inventory,
// and whether it supports third party impression urls in impression trackers,
// are captured by the enum below.
// The values in this enum are bit vectors.
// |-----------------|------|-----|------|---|---|
// |3rd_Party_Impurls|Native|Video|Banner|App|Web|
// |-----------------|------|-----|------|---|---|
// If 3rd_Party_Impurls is 1, they will be populated into the impression tracker
// BidResponse field. Otherwise they will be rendered in the creative markup.
type Enums_Inventory_ImpressionTracker int32

const (
	Enums_Inventory_NEVER_USE_TRACKER                   Enums_Inventory_ImpressionTracker = 0  // Never render impression trackers.
	Enums_Inventory_ALWAYS_USE_TRACKER                  Enums_Inventory_ImpressionTracker = 63 // Always render impression trackers, for both Beeswax and 3rd party impression urls.
	Enums_Inventory_APP_BANNER_USE_TRACKER              Enums_Inventory_ImpressionTracker = 38 // Render impression trackers only for In-App Banners, for both Beeswax and 3rd party impression urls.
	Enums_Inventory_ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY Enums_Inventory_ImpressionTracker = 31 // Always render impression trackers for Beeswax impression url.
	// 3rd Party impression urls will be rendered in the markup.
	Enums_Inventory_VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY Enums_Inventory_ImpressionTracker = 11 // Render impression trackers for video creatives in any environment
)

// Enum value maps for Enums_Inventory_ImpressionTracker.
var (
	Enums_Inventory_ImpressionTracker_name = map[int32]string{
		0:  "NEVER_USE_TRACKER",
		63: "ALWAYS_USE_TRACKER",
		38: "APP_BANNER_USE_TRACKER",
		31: "ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY",
		11: "VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY",
	}
	Enums_Inventory_ImpressionTracker_value = map[string]int32{
		"NEVER_USE_TRACKER":                   0,
		"ALWAYS_USE_TRACKER":                  63,
		"APP_BANNER_USE_TRACKER":              38,
		"ALWAYS_USE_TRACKER_FOR_BEESWAX_ONLY": 31,
		"VIDEO_USE_TRACKER_FOR_BEESWAX_ONLY":  11,
	}
)

func (x Enums_Inventory_ImpressionTracker) Enum() *Enums_Inventory_ImpressionTracker {
	p := new(Enums_Inventory_ImpressionTracker)
	*p = x
	return p
}

func (x Enums_Inventory_ImpressionTracker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_ImpressionTracker) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[34].Descriptor()
}

func (Enums_Inventory_ImpressionTracker) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[34]
}

func (x Enums_Inventory_ImpressionTracker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_ImpressionTracker) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_ImpressionTracker(num)
	return nil
}

// Deprecated: Use Enums_Inventory_ImpressionTracker.Descriptor instead.
func (Enums_Inventory_ImpressionTracker) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 5}
}

// Suppliers can request that we notify them about clicks and provide us
// with a click url macro. They can either request that we do it by
// redirecting the click itself to their click url and giving them a url to
// redirect the click back to, or by sending them a server call without the
// click.
// NO_CLICK_TRACKER means that the supplier does not want click
// notifications.
// CLICK_TRACKER_WITH_REDIRECT means that the supplier wants us to redirect
// the click to their click url and they'll redirect back to the url we
// provide.
// CLICK_TRACKER_WITHOUT_REDIRECT means that the supplier wants us to send
// them a server call to notify them about clicks.
type Enums_Inventory_SupplierClickTracker int32

const (
	Enums_Inventory_NO_CLICK_TRACKER               Enums_Inventory_SupplierClickTracker = 0
	Enums_Inventory_CLICK_TRACKER_WITH_REDIRECT    Enums_Inventory_SupplierClickTracker = 1
	Enums_Inventory_CLICK_TRACKER_WITHOUT_REDIRECT Enums_Inventory_SupplierClickTracker = 2
)

// Enum value maps for Enums_Inventory_SupplierClickTracker.
var (
	Enums_Inventory_SupplierClickTracker_name = map[int32]string{
		0: "NO_CLICK_TRACKER",
		1: "CLICK_TRACKER_WITH_REDIRECT",
		2: "CLICK_TRACKER_WITHOUT_REDIRECT",
	}
	Enums_Inventory_SupplierClickTracker_value = map[string]int32{
		"NO_CLICK_TRACKER":               0,
		"CLICK_TRACKER_WITH_REDIRECT":    1,
		"CLICK_TRACKER_WITHOUT_REDIRECT": 2,
	}
)

func (x Enums_Inventory_SupplierClickTracker) Enum() *Enums_Inventory_SupplierClickTracker {
	p := new(Enums_Inventory_SupplierClickTracker)
	*p = x
	return p
}

func (x Enums_Inventory_SupplierClickTracker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_Inventory_SupplierClickTracker) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_openrtb_common_proto_enumTypes[35].Descriptor()
}

func (Enums_Inventory_SupplierClickTracker) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_openrtb_common_proto_enumTypes[35]
}

func (x Enums_Inventory_SupplierClickTracker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Enums_Inventory_SupplierClickTracker) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Enums_Inventory_SupplierClickTracker(num)
	return nil
}

// Deprecated: Use Enums_Inventory_SupplierClickTracker.Descriptor instead.
func (Enums_Inventory_SupplierClickTracker) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2, 6}
}

type Enums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums) Reset() {
	*x = Enums{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums) ProtoMessage() {}

func (x *Enums) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums.ProtoReflect.Descriptor instead.
func (*Enums) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0}
}

type Enums_BidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest) Reset() {
	*x = Enums_BidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest) ProtoMessage() {}

func (x *Enums_BidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0}
}

type Enums_BidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidResponse) Reset() {
	*x = Enums_BidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidResponse) ProtoMessage() {}

func (x *Enums_BidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidResponse.ProtoReflect.Descriptor instead.
func (*Enums_BidResponse) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 1}
}

// Following constants are defined by Beeswax and are not a part of the
// Openrtb standard.
type Enums_Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_Inventory) Reset() {
	*x = Enums_Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_Inventory) ProtoMessage() {}

func (x *Enums_Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_Inventory.ProtoReflect.Descriptor instead.
func (*Enums_Inventory) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 2}
}

type Enums_BidRequest_Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Impression) Reset() {
	*x = Enums_BidRequest_Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Impression) ProtoMessage() {}

func (x *Enums_BidRequest_Impression) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Impression.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Impression) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Enums_BidRequest_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Content) Reset() {
	*x = Enums_BidRequest_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Content) ProtoMessage() {}

func (x *Enums_BidRequest_Content) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Content.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Content) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Enums_BidRequest_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Device) Reset() {
	*x = Enums_BidRequest_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Device) ProtoMessage() {}

func (x *Enums_BidRequest_Device) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Device.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Device) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Enums_BidRequest_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Geo) Reset() {
	*x = Enums_BidRequest_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Geo) ProtoMessage() {}

func (x *Enums_BidRequest_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Geo.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Geo) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 3}
}

type Enums_BidRequest_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_User) Reset() {
	*x = Enums_BidRequest_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_User) ProtoMessage() {}

func (x *Enums_BidRequest_User) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_User.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_User) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 4}
}

type Enums_BidRequest_Impression_Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Impression_Banner) Reset() {
	*x = Enums_BidRequest_Impression_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Impression_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Impression_Banner) ProtoMessage() {}

func (x *Enums_BidRequest_Impression_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Impression_Banner.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Impression_Banner) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Enums_BidRequest_Impression_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Impression_Video) Reset() {
	*x = Enums_BidRequest_Impression_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Impression_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Impression_Video) ProtoMessage() {}

func (x *Enums_BidRequest_Impression_Video) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Impression_Video.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Impression_Video) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type Enums_BidRequest_Impression_NativeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums_BidRequest_Impression_NativeRequest) Reset() {
	*x = Enums_BidRequest_Impression_NativeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enums_BidRequest_Impression_NativeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums_BidRequest_Impression_NativeRequest) ProtoMessage() {}

func (x *Enums_BidRequest_Impression_NativeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_openrtb_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums_BidRequest_Impression_NativeRequest.ProtoReflect.Descriptor instead.
func (*Enums_BidRequest_Impression_NativeRequest) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

var File_beeswax_openrtb_openrtb_common_proto protoreflect.FileDescriptor

var file_beeswax_openrtb_openrtb_common_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x22,
	0x93, 0x36, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x1a, 0xce, 0x15, 0x0a, 0x0a, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xd0, 0x0e, 0x0a, 0x0a, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x46, 0x0a, 0x06, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x58, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x58, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x22, 0x4c, 0x0a, 0x13, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x05, 0x1a, 0xae, 0x06, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x22, 0x76, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41,
	0x53, 0x54, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54,
	0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x30,
	0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x06, 0x22, 0x31, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x27, 0x0a,
	0x09, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49,
	0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x41, 0x52, 0x10, 0x02, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54,
	0x4f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x4f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x4f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x56,
	0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x22, 0x74, 0x0a, 0x0f, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x10, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x14, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x22, 0x31, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x22, 0x63, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45,
	0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x53, 0x5f,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x1a, 0xd8, 0x04, 0x0a, 0x0d, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x08, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57, 0x53, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x52, 0x4f, 0x55, 0x53, 0x45,
	0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x49, 0x44, 0x10,
	0x07, 0x22, 0x73, 0x0a, 0x08, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x5f, 0x41,
	0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x05, 0x22, 0x3f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x03, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0x15, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x4d, 0x10, 0x16, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x53, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x53, 0x49, 0x54, 0x45, 0x10, 0x20, 0x22, 0x4c, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x48,
	0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x44, 0x47,
	0x45, 0x54, 0x10, 0x04, 0x22, 0x75, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x32, 0x5f, 0x30,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52,
	0x4d, 0x4d, 0x41, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x32,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x91, 0x4e, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x0a,
	0x41, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f,
	0x4c, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x4d, 0x41, 0x59, 0x42, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x48, 0x45, 0x5f,
	0x46, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x49, 0x44, 0x45, 0x42, 0x41, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x1a, 0xd0, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53, 0x49, 0x43,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x22, 0x57, 0x0a,
	0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a,
	0x0f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x0e, 0x51, 0x41, 0x47, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x5f, 0x31, 0x32,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x22, 0x2e,
	0x0a, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x1a, 0x9f,
	0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x33, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x34, 0x47, 0x10, 0x06, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x56, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x08,
	0x1a, 0x39, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x22, 0x32, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x50, 0x53, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x1a, 0xbc, 0x01, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x45,
	0x53, 0x57, 0x41, 0x58, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x46, 0x41, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x44, 0x46, 0x41, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x44, 0x46, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x44, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x44, 0x35, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x48, 0x41, 0x31, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x09, 0x1a, 0xf1, 0x01, 0x0a, 0x0b, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x4e,
	0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x50, 0x49, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x48, 0x55,
	0x4d, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x49, 0x50, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x1a, 0xc4,
	0x1e, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x9c, 0x19, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x58, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x41, 0x49, 0x4c,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x50, 0x55, 0x42, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x45, 0x52, 0x53, 0x45, 0x52, 0x56, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55,
	0x4c, 0x53, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x42, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x56, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x4e, 0x49, 0x41,
	0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x4e, 0x45, 0x58, 0x55, 0x53, 0x10,
	0x09, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x45, 0x4e, 0x58, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x55, 0x42, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x54, 0x4b, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x52, 0x45, 0x4d, 0x4f, 0x52, 0x10,
	0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x41, 0x48, 0x4f, 0x4f, 0x10, 0x11,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d, 0x41, 0x41, 0x54, 0x4f, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x50, 0x50, 0x5f, 0x4c, 0x4f, 0x56, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x4f, 0x4c, 0x41, 0x42, 0x53, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x4f, 0x54, 0x58,
	0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x42, 0x55, 0x44, 0x44, 0x49, 0x5a, 0x10, 0x17,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x43, 0x4f, 0x4e, 0x44, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x18, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x45, 0x41, 0x53, 0x59, 0x10, 0x19, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x4c,
	0x41, 0x4e, 0x54, 0x49, 0x43, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x41, 0x58,
	0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x1d, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x44, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x44, 0x4d, 0x49, 0x58, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4d, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x4f, 0x50, 0x10, 0x21, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x44, 0x54, 0x48, 0x49, 0x4e, 0x4b, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x23, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x52,
	0x55, 0x10, 0x24, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x25,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x53, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x26, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x44, 0x53, 0x4b, 0x4f, 0x4d, 0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x44, 0x53, 0x50, 0x52, 0x55, 0x43, 0x45, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x53,
	0x54, 0x49, 0x52, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x2b,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x59, 0x4f, 0x55, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x2c, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x42, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4e, 0x43, 0x4f, 0x52, 0x41, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4f, 0x4c, 0x10,
	0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x56, 0x41, 0x44, 0x4f, 0x52, 0x10, 0x30, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x56, 0x4f, 0x43, 0x41, 0x52, 0x52, 0x4f, 0x54, 0x10, 0x31, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x58, 0x4f, 0x4e, 0x49, 0x58, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45,
	0x41, 0x43, 0x48, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45,
	0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x34, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x44, 0x54, 0x45,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x35, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x55, 0x45, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x41, 0x44, 0x53, 0x10, 0x36, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x55,
	0x4c, 0x59, 0x10, 0x37, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x10, 0x38,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4d, 0x45, 0x4c, 0x45, 0x4f, 0x4e, 0x10, 0x39, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x4f, 0x4e, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x10, 0x3a, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45,
	0x10, 0x3b, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4c, 0x4c, 0x10, 0x3c, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x49, 0x53, 0x48, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x45, 0x52,
	0x49, 0x41, 0x4e, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4c, 0x4b, 0x54, 0x45, 0x43,
	0x48, 0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4d, 0x58, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x49, 0x44, 0x45, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x41, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x55, 0x43, 0x54, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x58, 0x10, 0x43, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x45, 0x4e, 0x49, 0x45, 0x45, 0x10, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4d,
	0x4f, 0x10, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x36, 0x10, 0x46, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x55, 0x4d, 0x47, 0x55, 0x4d, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x42, 0x49, 0x4c, 0x4c, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x48, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4d, 0x4f, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x49, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x52, 0x47,
	0x4f, 0x10, 0x4a, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4f, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x4b,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x52, 0x55, 0x58, 0x10, 0x4c, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49,
	0x47, 0x41, 0x54, 0x55, 0x53, 0x10, 0x4d, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x56, 0x45, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x4e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4b, 0x51, 0x44, 0x10,
	0x4f, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x41, 0x44, 0x53, 0x10, 0x51, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x42,
	0x4f, 0x4e, 0x47, 0x10, 0x52, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x41, 0x44,
	0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x46, 0x4f, 0x58, 0x10, 0x54, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x4f, 0x42, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x10, 0x55, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x43, 0x4f, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x56, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x41,
	0x53, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x57, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x41, 0x44, 0x53, 0x10, 0x58, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x53, 0x50,
	0x52, 0x49, 0x4e, 0x54, 0x10, 0x59, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4f, 0x59, 0x41, 0x4c, 0x41,
	0x10, 0x5a, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x5b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10,
	0x5c, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x58, 0x10, 0x5d, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x55, 0x42, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x5e, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x41, 0x4c, 0x56, 0x55, 0x10, 0x5f, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50,
	0x55, 0x42, 0x4c, 0x45, 0x52, 0x10, 0x60, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x52, 0x41, 0x10,
	0x61, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x62, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x48, 0x41, 0x52, 0x45, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10,
	0x63, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x41, 0x44, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x4e, 0x4f, 0x42, 0x49, 0x10, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x66, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x53, 0x50, 0x49, 0x43, 0x59, 0x41, 0x44, 0x53, 0x10, 0x67, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x59, 0x41, 0x44, 0x53, 0x10, 0x68, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x53, 0x10, 0x69,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x41, 0x44, 0x53, 0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x48, 0x49, 0x52, 0x44, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x6b, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x48, 0x52, 0x4f, 0x4e, 0x45, 0x10, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x50,
	0x4d, 0x4e, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45, 0x4c, 0x49,
	0x46, 0x54, 0x10, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x43, 0x46, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x52, 0x55, 0x4c, 0x59, 0x58, 0x10, 0x70, 0x12,
	0x0a, 0x0a, 0x06, 0x56, 0x44, 0x4f, 0x50, 0x49, 0x41, 0x10, 0x71, 0x12, 0x06, 0x0a, 0x02, 0x56,
	0x49, 0x10, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x4d, 0x47, 0x10, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x49, 0x44, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4d,
	0x41, 0x58, 0x10, 0x75, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x52, 0x54, 0x43, 0x41, 0x4c, 0x10, 0x76,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x55, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x77, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x4f, 0x52, 0x44, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x78, 0x12, 0x09, 0x0a, 0x05, 0x58,
	0x52, 0x4f, 0x53, 0x54, 0x10, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x4c,
	0x41, 0x42, 0x10, 0x7a, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x7b, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x41,
	0x44, 0x53, 0x10, 0x7c, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x4f, 0x4e, 0x45,
	0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x7d, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x55, 0x4d,
	0x45, 0x10, 0x7e, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x44, 0x4f, 0x10, 0x7f, 0x12, 0x0b, 0x0a,
	0x06, 0x5a, 0x45, 0x4f, 0x54, 0x41, 0x50, 0x10, 0x80, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x4f,
	0x4c, 0x41, 0x52, 0x10, 0x81, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10,
	0x82, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x83, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x44, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x84, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x4c, 0x49, 0x53, 0x50, 0x41,
	0x10, 0x85, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x52, 0x55, 0x53, 0x54, 0x58, 0x10, 0x86, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x49, 0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x88, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x49, 0x44, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x89, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x53, 0x10, 0x8a, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x42, 0x49, 0x44, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x8c, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x41, 0x44, 0x41, 0x53, 0x49, 0x41, 0x10, 0x8d, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x8e, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x44, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x8f, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x44, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x90, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x4d,
	0x4f, 0x42, 0x45, 0x45, 0x10, 0x91, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x41, 0x4e, 0x54, 0x53, 0x10,
	0x92, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x44, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x93, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x55, 0x5a, 0x5a, 0x10,
	0x94, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x4f, 0x4c, 0x4f, 0x53, 0x53, 0x55, 0x53, 0x10, 0x95,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x44, 0x49,
	0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x96, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x41, 0x44, 0x10, 0x97, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x4f, 0x4e, 0x45,
	0x58, 0x10, 0x98, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x58, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x99,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x41, 0x53, 0x48, 0x42, 0x49, 0x44, 0x10, 0x9a, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x57, 0x52, 0x4b, 0x5a, 0x10, 0x9b, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x52, 0x41, 0x47, 0x45,
	0x10, 0x9c, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x44, 0x5f, 0x52, 0x55, 0x10, 0x9d, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x41, 0x44, 0x58, 0x4d, 0x49, 0x10, 0x9e, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41,
	0x4d, 0x45, 0x42, 0x41, 0x10, 0x9f, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x48, 0x45, 0x45, 0x54,
	0x41, 0x48, 0x10, 0xa0, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x52, 0x49, 0x43, 0x53, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x4d, 0x4f, 0x44, 0x4f, 0x10, 0xa1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x58,
	0x45, 0x4c, 0x42, 0x49, 0x44, 0x10, 0xa2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x44, 0x46, 0x55,
	0x4c, 0x4c, 0x59, 0x10, 0xa3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x49, 0x41, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0xa4, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0xa5, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x4d, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0xa6, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x59, 0x10, 0xa7, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x44, 0x49, 0x53, 0x48, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xa8, 0x01, 0x12,
	0x0e, 0x0a, 0x09, 0x41, 0x44, 0x56, 0x45, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0xa9, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x4c, 0x4f, 0x44, 0x45, 0x4f, 0x10, 0xaa, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x4c,
	0x4f, 0x4f, 0x50, 0x4d, 0x45, 0x10, 0xab, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x41,
	0x4e, 0x10, 0xac, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x44, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10,
	0xad, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0xae, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x44, 0x4d,
	0x49, 0x58, 0x10, 0xaf, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x10, 0xb0,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x4d, 0x4f, 0x10, 0xb1, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x5a, 0x4e, 0x41, 0x50, 0x54, 0x41, 0x47, 0x10, 0xb2, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x4f, 0x10, 0xb3, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0xb4, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x48,
	0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xb5, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x47,
	0x55, 0x52, 0x59, 0x10, 0xb6, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x47,
	0x10, 0xb7, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x10,
	0xb8, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x47, 0x52, 0x41,
	0x50, 0x48, 0x10, 0xb9, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0xba, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x54,
	0x45, 0x4d, 0x10, 0xbb, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x4f, 0x4b, 0x4b, 0x54, 0x10, 0xbc,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x4f, 0x4c, 0x59, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x49, 0x43,
	0x41, 0x44, 0x53, 0x10, 0xbd, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49,
	0x4e, 0x42, 0x4f, 0x58, 0x10, 0xbe, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x52, 0x49, 0x4d, 0x49,
	0x53, 0x10, 0xbf, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x58, 0x10, 0xc0,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x41, 0x4b, 0x55, 0x54, 0x45, 0x4e, 0x10, 0xc1, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x52, 0x45, 0x4b, 0x4c, 0x41, 0x4d, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xc2,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x49, 0x44, 0x4f, 0x10, 0xc3, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x52, 0x45, 0x56, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xc4, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x59, 0x10, 0xc5, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x53, 0x45, 0x45, 0x44, 0x54, 0x41, 0x47, 0x10, 0xc6, 0x01, 0x12, 0x10, 0x0a, 0x0b,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0xc7, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x36, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x53, 0x4f, 0x52, 0x45, 0x4e, 0x53, 0x4f, 0x4e, 0x10, 0xc9, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53,
	0x50, 0x49, 0x43, 0x59, 0x10, 0xca, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x59, 0x4e, 0x41, 0x43,
	0x4f, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x54, 0x41, 0x42, 0x4f, 0x4f, 0x4c, 0x41,
	0x10, 0xcc, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x54, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0xcd, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x54, 0x45, 0x4e, 0x4d, 0x41, 0x58, 0x10, 0xce, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x41, 0x44, 0x54, 0x4f, 0x4d, 0x41, 0x10, 0xcf, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x54, 0x57,
	0x4f, 0x58, 0x10, 0xd0, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x54, 0x4f,
	0x4e, 0x45, 0x10, 0xd2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x56, 0x45, 0x4e, 0x41, 0x5f, 0x54, 0x56,
	0x10, 0xd3, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x54, 0x4f, 0x5a, 0x10, 0xd4, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x41, 0x44, 0x56, 0x49, 0x41, 0x10, 0xd5, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x57, 0x45, 0x42, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0xd6, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x57, 0x4f, 0x4f, 0x42, 0x49, 0x10, 0xd7, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x59, 0x45, 0x4e,
	0x47, 0x4f, 0x10, 0xd8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x4f, 0x43, 0x10, 0xd9, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x5a, 0x49, 0x46, 0x46, 0x5f, 0x44, 0x41, 0x56, 0x49, 0x53, 0x10, 0xda, 0x01,
	0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0xdb, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x54, 0x48, 0x49, 0x52, 0x54, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x52,
	0x4f, 0x53, 0x53, 0x10, 0xdc, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x41, 0x4d, 0x53, 0x55, 0x4e,
	0x47, 0x10, 0xdd, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x48, 0x55, 0x4e, 0x57, 0x41, 0x52, 0x45,
	0x10, 0xde, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0xdf,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x4d, 0x10, 0xe0,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x4e, 0x4d, 0x4f, 0x42, 0x49, 0x10, 0xe1, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x54, 0x49, 0x58, 0x10, 0xe2, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x45, 0x4d, 0x58, 0x10, 0xe3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x50, 0x52, 0x49, 0x4e,
	0x47, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0xe4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x56, 0x45, 0x52,
	0x56, 0x45, 0x10, 0xe5, 0x01, 0x22, 0x04, 0x08, 0x16, 0x10, 0x16, 0x22, 0x06, 0x08, 0x87, 0x01,
	0x10, 0x87, 0x01, 0x22, 0x06, 0x08, 0xd1, 0x01, 0x10, 0xd1, 0x01, 0x22, 0x6d, 0x0a, 0x0d, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x16,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x22, 0x4a, 0x0a, 0x0f, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x50, 0x50, 0x10, 0x01, 0x22, 0x77, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x55, 0x5f, 0x57,
	0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x5f, 0x4e, 0x4f,
	0x52, 0x54, 0x48, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x04, 0x1a, 0x02, 0x10, 0x01, 0x22,
	0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x4d, 0x45, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x50, 0x41, 0x43, 0x10, 0x03,
	0x22, 0xaf, 0x01, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x42, 0x41, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x26, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x45, 0x53,
	0x57, 0x41, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x1f, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x45, 0x53, 0x57, 0x41, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x0b, 0x22, 0x71, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f,
	0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x02, 0x2a, 0xcb, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42,
	0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x31, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x31, 0x5f, 0x33, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f,
	0x34, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x35, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x36, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x31, 0x5f, 0x37, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x32, 0x10,
	0x09, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x32, 0x5f, 0x33, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x34, 0x10,
	0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x35, 0x10, 0x0e, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x36, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x32, 0x5f, 0x37, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x38, 0x10,
	0x11, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x39, 0x10, 0x12, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x30, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x5f, 0x31, 0x31, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f,
	0x31, 0x32, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x33, 0x10,
	0x16, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x34, 0x10, 0x17, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x35, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x5f, 0x31, 0x36, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x5f, 0x31, 0x37, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x38,
	0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x39, 0x10, 0x1c, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x30, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x31, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x5f, 0x32, 0x32, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x32,
	0x33, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x33, 0x10, 0x21, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x31, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x33, 0x5f, 0x32, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x33, 0x10,
	0x24, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x34, 0x10, 0x25, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x35, 0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x33, 0x5f, 0x36, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x37, 0x10,
	0x28, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x38, 0x10, 0x29, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x39, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x33, 0x5f, 0x31, 0x30, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x31,
	0x31, 0x10, 0x2c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x31, 0x32, 0x10, 0x2d,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x34, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x34, 0x5f, 0x31, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x32,
	0x10, 0x30, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x33, 0x10, 0x31, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x34, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x34, 0x5f, 0x35, 0x10, 0x33, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x36,
	0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x37, 0x10, 0x35, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x38, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x34, 0x5f, 0x39, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x31,
	0x30, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x31, 0x31, 0x10, 0x39,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x35, 0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x35, 0x5f, 0x31, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x32,
	0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x33, 0x10, 0x3d, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x34, 0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x35, 0x5f, 0x35, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x36,
	0x10, 0x40, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x37, 0x10, 0x41, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x38, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x35, 0x5f, 0x39, 0x10, 0x43, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31,
	0x30, 0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x31, 0x10, 0x45,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x32, 0x10, 0x46, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x33, 0x10, 0x47, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x35, 0x5f, 0x31, 0x34, 0x10, 0x48, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f,
	0x31, 0x35, 0x10, 0x49, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x36, 0x10, 0x4a, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x31, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x36, 0x5f, 0x32, 0x10, 0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x33,
	0x10, 0x4d, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x34, 0x10, 0x4e, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x35, 0x10, 0x4f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x36, 0x5f, 0x36, 0x10, 0x50, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x37,
	0x10, 0x51, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x38, 0x10, 0x52, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x39, 0x10, 0x53, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41,
	0x42, 0x37, 0x10, 0x54, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x10, 0x55,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x10, 0x56, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x10, 0x57, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x34, 0x10, 0x58, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x35, 0x10, 0x59,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x36, 0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x37, 0x10, 0x5b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x38, 0x10, 0x5c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x39, 0x10, 0x5d,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x30, 0x10, 0x5e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x31, 0x10, 0x5f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x37, 0x5f, 0x31, 0x32, 0x10, 0x60, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x31, 0x33, 0x10, 0x61, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x34, 0x10,
	0x62, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x35, 0x10, 0x63, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x36, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x31, 0x37, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x31, 0x38, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x39,
	0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x30, 0x10, 0x68, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x31, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x32, 0x10, 0x6a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x37, 0x5f, 0x32, 0x33, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32,
	0x34, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x35, 0x10, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x36, 0x10, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x37, 0x10, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x37, 0x5f, 0x32, 0x38, 0x10, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x32, 0x39, 0x10, 0x71, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x30, 0x10,
	0x72, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x31, 0x10, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x32, 0x10, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x33, 0x33, 0x10, 0x75, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x33, 0x34, 0x10, 0x76, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x35,
	0x10, 0x77, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x36, 0x10, 0x78, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x37, 0x10, 0x79, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x38, 0x10, 0x7a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x37, 0x5f, 0x33, 0x39, 0x10, 0x7b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34,
	0x30, 0x10, 0x7c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x31, 0x10, 0x7d,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x32, 0x10, 0x7e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x33, 0x10, 0x7f, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x37, 0x5f, 0x34, 0x34, 0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x34, 0x35, 0x10, 0x81, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x38, 0x10, 0x82,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x10, 0x83, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x32, 0x10, 0x84, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x38, 0x5f, 0x33, 0x10, 0x85, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38,
	0x5f, 0x34, 0x10, 0x86, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x35, 0x10,
	0x87, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x36, 0x10, 0x88, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x37, 0x10, 0x89, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x38, 0x5f, 0x38, 0x10, 0x8a, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x38, 0x5f, 0x39, 0x10, 0x8b, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31,
	0x30, 0x10, 0x8c, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x31, 0x10,
	0x8d, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x32, 0x10, 0x8e, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x33, 0x10, 0x8f, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x34, 0x10, 0x90, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x35, 0x10, 0x91, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x38, 0x5f, 0x31, 0x36, 0x10, 0x92, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38,
	0x5f, 0x31, 0x37, 0x10, 0x93, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31,
	0x38, 0x10, 0x94, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x39, 0x10, 0x95, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x10, 0x96, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x10, 0x97, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x39, 0x5f, 0x33, 0x10, 0x98, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x34,
	0x10, 0x99, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x35, 0x10, 0x9a, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x36, 0x10, 0x9b, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x37, 0x10, 0x9c, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x39, 0x5f, 0x38, 0x10, 0x9d, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f,
	0x39, 0x10, 0x9e, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x30, 0x10,
	0x9f, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x31, 0x10, 0xa0, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x32, 0x10, 0xa1, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x33, 0x10, 0xa2, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x34, 0x10, 0xa3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x39, 0x5f, 0x31, 0x35, 0x10, 0xa4, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39,
	0x5f, 0x31, 0x36, 0x10, 0xa5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31,
	0x37, 0x10, 0xa6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x38, 0x10,
	0xa7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x39, 0x10, 0xa8, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x30, 0x10, 0xa9, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x31, 0x10, 0xaa, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x32, 0x10, 0xab, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x39, 0x5f, 0x32, 0x33, 0x10, 0xac, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39,
	0x5f, 0x32, 0x34, 0x10, 0xad, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32,
	0x35, 0x10, 0xae, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x36, 0x10,
	0xaf, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x37, 0x10, 0xb0, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x38, 0x10, 0xb1, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x39, 0x10, 0xb2, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x39, 0x5f, 0x33, 0x30, 0x10, 0xb3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x39, 0x5f, 0x33, 0x31, 0x10, 0xb4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31,
	0x30, 0x10, 0xb5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x31, 0x10,
	0xb6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x32, 0x10, 0xb7, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x33, 0x10, 0xb8, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x34, 0x10, 0xb9, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x35, 0x10, 0xba, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x30, 0x5f, 0x36, 0x10, 0xbb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x30, 0x5f, 0x37, 0x10, 0xbc, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f,
	0x38, 0x10, 0xbd, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x39, 0x10,
	0xbe, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x31, 0x10, 0xbf, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x31, 0x5f, 0x31, 0x10, 0xc0, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x31, 0x5f, 0x32, 0x10, 0xc1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x31, 0x5f, 0x33, 0x10, 0xc2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x31, 0x5f, 0x34, 0x10, 0xc3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x31, 0x5f,
	0x35, 0x10, 0xc4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x32, 0x10, 0xc5, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x32, 0x5f, 0x31, 0x10, 0xc6, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x32, 0x5f, 0x32, 0x10, 0xc7, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x32, 0x5f, 0x33, 0x10, 0xc8, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41,
	0x42, 0x31, 0x33, 0x10, 0xc9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f,
	0x31, 0x10, 0xca, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x32, 0x10,
	0xcb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x33, 0x10, 0xcc, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x34, 0x10, 0xcd, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x35, 0x10, 0xce, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x36, 0x10, 0xcf, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x33, 0x5f, 0x37, 0x10, 0xd0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x33, 0x5f, 0x38, 0x10, 0xd1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f,
	0x39, 0x10, 0xd2, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x30,
	0x10, 0xd3, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x31, 0x10,
	0xd4, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x32, 0x10, 0xd5,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x34, 0x10, 0xd6, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x31, 0x10, 0xd7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x34, 0x5f, 0x32, 0x10, 0xd8, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x34, 0x5f, 0x33, 0x10, 0xd9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34,
	0x5f, 0x34, 0x10, 0xda, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x35,
	0x10, 0xdb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x36, 0x10, 0xdc,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x37, 0x10, 0xdd, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x38, 0x10, 0xde, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x49, 0x41, 0x42, 0x31, 0x35, 0x10, 0xdf, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x35, 0x5f, 0x31, 0x10, 0xe0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35,
	0x5f, 0x32, 0x10, 0xe1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x33,
	0x10, 0xe2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x34, 0x10, 0xe3,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x35, 0x10, 0xe4, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x36, 0x10, 0xe5, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x37, 0x10, 0xe6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x35, 0x5f, 0x38, 0x10, 0xe7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x35, 0x5f, 0x39, 0x10, 0xe8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x35,
	0x5f, 0x31, 0x30, 0x10, 0xe9, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x36, 0x10,
	0xea, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x31, 0x10, 0xeb, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x32, 0x10, 0xec, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x33, 0x10, 0xed, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x34, 0x10, 0xee, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x36, 0x5f, 0x35, 0x10, 0xef, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x36, 0x5f, 0x36, 0x10, 0xf0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f,
	0x37, 0x10, 0xf1, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x37, 0x10, 0xf2, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x10, 0xf3, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x10, 0xf4, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x10, 0xf5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x37, 0x5f, 0x34, 0x10, 0xf6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x37, 0x5f, 0x35, 0x10, 0xf7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f,
	0x36, 0x10, 0xf8, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x37, 0x10,
	0xf9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x38, 0x10, 0xfa, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x39, 0x10, 0xfb, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x30, 0x10, 0xfc, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x31, 0x10, 0xfd, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x32, 0x10, 0xfe, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x33, 0x10, 0xff, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x37, 0x5f, 0x31, 0x34, 0x10, 0x80, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x37, 0x5f, 0x31, 0x35, 0x10, 0x81, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x37, 0x5f, 0x31, 0x36, 0x10, 0x82, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37,
	0x5f, 0x31, 0x37, 0x10, 0x83, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f,
	0x31, 0x38, 0x10, 0x84, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31,
	0x39, 0x10, 0x85, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x30,
	0x10, 0x86, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x31, 0x10,
	0x87, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x32, 0x10, 0x88,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x33, 0x10, 0x89, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x34, 0x10, 0x8a, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x35, 0x10, 0x8b, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x36, 0x10, 0x8c, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x37, 0x10, 0x8d, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x38, 0x10, 0x8e, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x39, 0x10, 0x8f, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x37, 0x5f, 0x33, 0x30, 0x10, 0x90, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x37, 0x5f, 0x33, 0x31, 0x10, 0x91, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x37, 0x5f, 0x33, 0x32, 0x10, 0x92, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37,
	0x5f, 0x33, 0x33, 0x10, 0x93, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f,
	0x33, 0x34, 0x10, 0x94, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33,
	0x35, 0x10, 0x95, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x36,
	0x10, 0x96, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x37, 0x10,
	0x97, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x38, 0x10, 0x98,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x39, 0x10, 0x99, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x30, 0x10, 0x9a, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x31, 0x10, 0x9b, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x32, 0x10, 0x9c, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x33, 0x10, 0x9d, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x34, 0x10, 0x9e, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49,
	0x41, 0x42, 0x31, 0x38, 0x10, 0x9f, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38,
	0x5f, 0x31, 0x10, 0xa0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x32,
	0x10, 0xa1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x33, 0x10, 0xa2,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x34, 0x10, 0xa3, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x35, 0x10, 0xa4, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x36, 0x10, 0xa5, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x10, 0xa6, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39,
	0x5f, 0x31, 0x10, 0xa7, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32,
	0x10, 0xa8, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x10, 0xa9,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x34, 0x10, 0xaa, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x35, 0x10, 0xab, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x36, 0x10, 0xac, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x5f, 0x37, 0x10, 0xad, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x39, 0x5f, 0x38, 0x10, 0xae, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39,
	0x5f, 0x39, 0x10, 0xaf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31,
	0x30, 0x10, 0xb0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x31,
	0x10, 0xb1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x32, 0x10,
	0xb2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x33, 0x10, 0xb3,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x34, 0x10, 0xb4, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x35, 0x10, 0xb5, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x36, 0x10, 0xb6, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x37, 0x10, 0xb7, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x38, 0x10, 0xb8, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x39, 0x10, 0xb9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x30, 0x10, 0xba, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x39, 0x5f, 0x32, 0x31, 0x10, 0xbb, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x39, 0x5f, 0x32, 0x32, 0x10, 0xbc, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x39, 0x5f, 0x32, 0x33, 0x10, 0xbd, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39,
	0x5f, 0x32, 0x34, 0x10, 0xbe, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f,
	0x32, 0x35, 0x10, 0xbf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32,
	0x36, 0x10, 0xc0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x37,
	0x10, 0xc1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x38, 0x10,
	0xc2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x39, 0x10, 0xc3,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x30, 0x10, 0xc4, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x31, 0x10, 0xc5, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x32, 0x10, 0xc6, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x33, 0x10, 0xc7, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x34, 0x10, 0xc8, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x35, 0x10, 0xc9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x36, 0x10, 0xca, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41,
	0x42, 0x32, 0x30, 0x10, 0xcb, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f,
	0x31, 0x10, 0xcc, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x10,
	0xcd, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x33, 0x10, 0xce, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x34, 0x10, 0xcf, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x35, 0x10, 0xd0, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x36, 0x10, 0xd1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x30, 0x5f, 0x37, 0x10, 0xd2, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x30, 0x5f, 0x38, 0x10, 0xd3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f,
	0x39, 0x10, 0xd4, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x30,
	0x10, 0xd5, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x31, 0x10,
	0xd6, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x32, 0x10, 0xd7,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x33, 0x10, 0xd8, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x34, 0x10, 0xd9, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x35, 0x10, 0xda, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x36, 0x10, 0xdb, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x37, 0x10, 0xdc, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x38, 0x10, 0xdd, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x39, 0x10, 0xde, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x32, 0x30, 0x5f, 0x32, 0x30, 0x10, 0xdf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x32, 0x30, 0x5f, 0x32, 0x31, 0x10, 0xe0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32,
	0x30, 0x5f, 0x32, 0x32, 0x10, 0xe1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30,
	0x5f, 0x32, 0x33, 0x10, 0xe2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f,
	0x32, 0x34, 0x10, 0xe3, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32,
	0x35, 0x10, 0xe4, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x36,
	0x10, 0xe5, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x37, 0x10,
	0xe6, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x31, 0x10, 0xe7, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x31, 0x5f, 0x31, 0x10, 0xe8, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x31, 0x5f, 0x32, 0x10, 0xe9, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x31, 0x5f, 0x33, 0x10, 0xea, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32,
	0x32, 0x10, 0xeb, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x31, 0x10,
	0xec, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x32, 0x10, 0xed, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x33, 0x10, 0xee, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x34, 0x10, 0xef, 0x02, 0x12, 0x0a, 0x0a, 0x05,
	0x49, 0x41, 0x42, 0x32, 0x33, 0x10, 0xf0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x33, 0x5f, 0x31, 0x10, 0xf1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f,
	0x32, 0x10, 0xf2, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x33, 0x10,
	0xf3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x34, 0x10, 0xf4, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x35, 0x10, 0xf5, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x36, 0x10, 0xf6, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x37, 0x10, 0xf7, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x33, 0x5f, 0x38, 0x10, 0xf8, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x33, 0x5f, 0x39, 0x10, 0xf9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f,
	0x31, 0x30, 0x10, 0xfa, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x34, 0x10, 0xfb,
	0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x35, 0x10, 0xfc, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x31, 0x10, 0xfd, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x35, 0x5f, 0x32, 0x10, 0xfe, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x35, 0x5f, 0x33, 0x10, 0xff, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35,
	0x5f, 0x34, 0x10, 0x80, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x35,
	0x10, 0x81, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x36, 0x10, 0x82,
	0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x37, 0x10, 0x83, 0x03, 0x12,
	0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x36, 0x10, 0x84, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x36, 0x5f, 0x31, 0x10, 0x85, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x36, 0x5f, 0x32, 0x10, 0x86, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x36,
	0x5f, 0x33, 0x10, 0x87, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x36, 0x5f, 0x34,
	0x10, 0x88, 0x03, 0x2a, 0x93, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x41,
	0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49,
	0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x50, 0x5f,
	0x55, 0x50, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x53, 0x10, 0x0b, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x4e, 0x41, 0x49, 0x4c, 0x10, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x46,
	0x4c, 0x45, 0x58, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f,
	0x43, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10,
	0x67, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41,
	0x4e, 0x44, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x69,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e,
	0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x6a, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x6b, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x50, 0x49,
	0x58, 0x45, 0x4c, 0x53, 0x10, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x43, 0x4c,
	0x49, 0x43, 0x4b, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x6d, 0x2a, 0x17, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53,
	0x10, 0x01, 0x42, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61,
	0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62,
}

var (
	file_beeswax_openrtb_openrtb_common_proto_rawDescOnce sync.Once
	file_beeswax_openrtb_openrtb_common_proto_rawDescData = file_beeswax_openrtb_openrtb_common_proto_rawDesc
)

func file_beeswax_openrtb_openrtb_common_proto_rawDescGZIP() []byte {
	file_beeswax_openrtb_openrtb_common_proto_rawDescOnce.Do(func() {
		file_beeswax_openrtb_openrtb_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_openrtb_openrtb_common_proto_rawDescData)
	})
	return file_beeswax_openrtb_openrtb_common_proto_rawDescData
}

var file_beeswax_openrtb_openrtb_common_proto_enumTypes = make([]protoimpl.EnumInfo, 36)
var file_beeswax_openrtb_openrtb_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_beeswax_openrtb_openrtb_common_proto_goTypes = []interface{}{
	(ContentCategory)(0),   // 0: openrtb.ContentCategory
	(CreativeAttribute)(0), // 1: openrtb.CreativeAttribute
	(Flag)(0),              // 2: openrtb.Flag
	(Enums_BidRequest_Impression_ApiFramework)(0),                 // 3: openrtb.Enums.BidRequest.Impression.ApiFramework
	(Enums_BidRequest_Impression_AdPosition)(0),                   // 4: openrtb.Enums.BidRequest.Impression.AdPosition
	(Enums_BidRequest_Impression_Banner_AdType)(0),                // 5: openrtb.Enums.BidRequest.Impression.Banner.AdType
	(Enums_BidRequest_Impression_Banner_ExpandableDirection)(0),   // 6: openrtb.Enums.BidRequest.Impression.Banner.ExpandableDirection
	(Enums_BidRequest_Impression_Video_Protocol)(0),               // 7: openrtb.Enums.BidRequest.Impression.Video.Protocol
	(Enums_BidRequest_Impression_Video_CompanionType)(0),          // 8: openrtb.Enums.BidRequest.Impression.Video.CompanionType
	(Enums_BidRequest_Impression_Video_Linearity)(0),              // 9: openrtb.Enums.BidRequest.Impression.Video.Linearity
	(Enums_BidRequest_Impression_Video_PlaybackMethod)(0),         // 10: openrtb.Enums.BidRequest.Impression.Video.PlaybackMethod
	(Enums_BidRequest_Impression_Video_VideoStartDelay)(0),        // 11: openrtb.Enums.BidRequest.Impression.Video.VideoStartDelay
	(Enums_BidRequest_Impression_Video_ContentDelivery)(0),        // 12: openrtb.Enums.BidRequest.Impression.Video.ContentDelivery
	(Enums_BidRequest_Impression_Video_VideoPlacementType)(0),     // 13: openrtb.Enums.BidRequest.Impression.Video.VideoPlacementType
	(Enums_BidRequest_Impression_Video_PlaybackCessationMode)(0),  // 14: openrtb.Enums.BidRequest.Impression.Video.PlaybackCessationMode
	(Enums_BidRequest_Impression_NativeRequest_LayoutId)(0),       // 15: openrtb.Enums.BidRequest.Impression.NativeRequest.LayoutId
	(Enums_BidRequest_Impression_NativeRequest_AdUnitId)(0),       // 16: openrtb.Enums.BidRequest.Impression.NativeRequest.AdUnitId
	(Enums_BidRequest_Impression_NativeRequest_Context)(0),        // 17: openrtb.Enums.BidRequest.Impression.NativeRequest.Context
	(Enums_BidRequest_Impression_NativeRequest_ContextSubtype)(0), // 18: openrtb.Enums.BidRequest.Impression.NativeRequest.ContextSubtype
	(Enums_BidRequest_Impression_NativeRequest_PlacementType)(0),  // 19: openrtb.Enums.BidRequest.Impression.NativeRequest.PlacementType
	(Enums_BidRequest_Content_Context)(0),                         // 20: openrtb.Enums.BidRequest.Content.Context
	(Enums_BidRequest_Content_VideoQuality)(0),                    // 21: openrtb.Enums.BidRequest.Content.VideoQuality
	(Enums_BidRequest_Content_QAGMediaRating)(0),                  // 22: openrtb.Enums.BidRequest.Content.QAGMediaRating
	(Enums_BidRequest_Content_SourceRelationship)(0),              // 23: openrtb.Enums.BidRequest.Content.SourceRelationship
	(Enums_BidRequest_Device_ConnectionType)(0),                   // 24: openrtb.Enums.BidRequest.Device.ConnectionType
	(Enums_BidRequest_Device_DeviceType)(0),                       // 25: openrtb.Enums.BidRequest.Device.DeviceType
	(Enums_BidRequest_Geo_LocationType)(0),                        // 26: openrtb.Enums.BidRequest.Geo.LocationType
	(Enums_BidRequest_User_UserIdType)(0),                         // 27: openrtb.Enums.BidRequest.User.UserIdType
	(Enums_BidResponse_NoBidReason)(0),                            // 28: openrtb.Enums.BidResponse.NoBidReason
	(Enums_Inventory_Source)(0),                                   // 29: openrtb.Enums.Inventory.Source
	(Enums_Inventory_PlacementType)(0),                            // 30: openrtb.Enums.Inventory.PlacementType
	(Enums_Inventory_EnvironmentType)(0),                          // 31: openrtb.Enums.Inventory.EnvironmentType
	(Enums_Inventory_DataCenter)(0),                               // 32: openrtb.Enums.Inventory.DataCenter
	(Enums_Inventory_Continent)(0),                                // 33: openrtb.Enums.Inventory.Continent
	(Enums_Inventory_ImpressionTracker)(0),                        // 34: openrtb.Enums.Inventory.ImpressionTracker
	(Enums_Inventory_SupplierClickTracker)(0),                     // 35: openrtb.Enums.Inventory.SupplierClickTracker
	(*Enums)(nil),                                     // 36: openrtb.Enums
	(*Enums_BidRequest)(nil),                          // 37: openrtb.Enums.BidRequest
	(*Enums_BidResponse)(nil),                         // 38: openrtb.Enums.BidResponse
	(*Enums_Inventory)(nil),                           // 39: openrtb.Enums.Inventory
	(*Enums_BidRequest_Impression)(nil),               // 40: openrtb.Enums.BidRequest.Impression
	(*Enums_BidRequest_Content)(nil),                  // 41: openrtb.Enums.BidRequest.Content
	(*Enums_BidRequest_Device)(nil),                   // 42: openrtb.Enums.BidRequest.Device
	(*Enums_BidRequest_Geo)(nil),                      // 43: openrtb.Enums.BidRequest.Geo
	(*Enums_BidRequest_User)(nil),                     // 44: openrtb.Enums.BidRequest.User
	(*Enums_BidRequest_Impression_Banner)(nil),        // 45: openrtb.Enums.BidRequest.Impression.Banner
	(*Enums_BidRequest_Impression_Video)(nil),         // 46: openrtb.Enums.BidRequest.Impression.Video
	(*Enums_BidRequest_Impression_NativeRequest)(nil), // 47: openrtb.Enums.BidRequest.Impression.NativeRequest
}
var file_beeswax_openrtb_openrtb_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_beeswax_openrtb_openrtb_common_proto_init() }
func file_beeswax_openrtb_openrtb_common_proto_init() {
	if File_beeswax_openrtb_openrtb_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Impression_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Impression_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_openrtb_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enums_BidRequest_Impression_NativeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_openrtb_openrtb_common_proto_rawDesc,
			NumEnums:      36,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_openrtb_openrtb_common_proto_goTypes,
		DependencyIndexes: file_beeswax_openrtb_openrtb_common_proto_depIdxs,
		EnumInfos:         file_beeswax_openrtb_openrtb_common_proto_enumTypes,
		MessageInfos:      file_beeswax_openrtb_openrtb_common_proto_msgTypes,
	}.Build()
	File_beeswax_openrtb_openrtb_common_proto = out.File
	file_beeswax_openrtb_openrtb_common_proto_rawDesc = nil
	file_beeswax_openrtb_openrtb_common_proto_goTypes = nil
	file_beeswax_openrtb_openrtb_common_proto_depIdxs = nil
}
