// Copyright 2014, Beeswax.IO Inc.
// Author: ramr@beeswax.com
//
// Beeswax extensions to the OpenRTB spec.
// These extensions are specific to Beeswax and are not a part of
// the OpenRTB spec.
// All OpenRTB message objects are extended using
// an optional Extension message named 'ext'

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/openrtb/extension.proto

package openrtb

import (
	proto "github.com/golang/protobuf/proto"
	base "github.com/motive-interactive/beeswax-api/beeswax/base"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BidRequestExtensions_AdsTxtStatus int32

const (
	BidRequestExtensions_UNKNOWN BidRequestExtensions_AdsTxtStatus = -1
	// The request does not contain a domain, either because it is not a web request (ie it is an
	// app or native request) or it is a web request but does not contain a domain. Since it doesn't
	// have a domain, we cannot check it's Ads.txt status.
	BidRequestExtensions_NO_DOMAIN BidRequestExtensions_AdsTxtStatus = 0
	// The request's domain does not have an Ads.txt file
	BidRequestExtensions_NO_ADS_TXT_FILE BidRequestExtensions_AdsTxtStatus = 1
	// We have not looked up the Ads.txt file for the request's domain
	BidRequestExtensions_ADS_TXT_NOT_SCANNED BidRequestExtensions_AdsTxtStatus = 2
	// The request's domain does not allow any advertising
	BidRequestExtensions_NO_ADVERTISING_ALLOWED BidRequestExtensions_AdsTxtStatus = 3
	// The request is missing a publisher id so we cannot check its Ads.txt status
	BidRequestExtensions_MISSING_PUB_ID BidRequestExtensions_AdsTxtStatus = 4
	// The request's domain does have an Ads.txt file, but it does not allow advertising from this
	// exchange / publisher ID combination
	BidRequestExtensions_NOT_AUTH BidRequestExtensions_AdsTxtStatus = 5
	// The domain's Ads.txt file allows this exchange / publisher ID to resell advertising
	BidRequestExtensions_AUTH_RESELLER BidRequestExtensions_AdsTxtStatus = 6
	// The domain's Ads.txt file allows this exchange / publisher ID to advertise directly
	BidRequestExtensions_AUTH_DIRECT BidRequestExtensions_AdsTxtStatus = 7
)

// Enum value maps for BidRequestExtensions_AdsTxtStatus.
var (
	BidRequestExtensions_AdsTxtStatus_name = map[int32]string{
		-1: "UNKNOWN",
		0:  "NO_DOMAIN",
		1:  "NO_ADS_TXT_FILE",
		2:  "ADS_TXT_NOT_SCANNED",
		3:  "NO_ADVERTISING_ALLOWED",
		4:  "MISSING_PUB_ID",
		5:  "NOT_AUTH",
		6:  "AUTH_RESELLER",
		7:  "AUTH_DIRECT",
	}
	BidRequestExtensions_AdsTxtStatus_value = map[string]int32{
		"UNKNOWN":                -1,
		"NO_DOMAIN":              0,
		"NO_ADS_TXT_FILE":        1,
		"ADS_TXT_NOT_SCANNED":    2,
		"NO_ADVERTISING_ALLOWED": 3,
		"MISSING_PUB_ID":         4,
		"NOT_AUTH":               5,
		"AUTH_RESELLER":          6,
		"AUTH_DIRECT":            7,
	}
)

func (x BidRequestExtensions_AdsTxtStatus) Enum() *BidRequestExtensions_AdsTxtStatus {
	p := new(BidRequestExtensions_AdsTxtStatus)
	*p = x
	return p
}

func (x BidRequestExtensions_AdsTxtStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestExtensions_AdsTxtStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_extension_proto_enumTypes[0].Descriptor()
}

func (BidRequestExtensions_AdsTxtStatus) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_extension_proto_enumTypes[0]
}

func (x BidRequestExtensions_AdsTxtStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestExtensions_AdsTxtStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestExtensions_AdsTxtStatus(num)
	return nil
}

// Deprecated: Use BidRequestExtensions_AdsTxtStatus.Descriptor instead.
func (BidRequestExtensions_AdsTxtStatus) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{2, 0}
}

type VideoExtensions_PlacementType int32

const (
	VideoExtensions_IN_BANNER VideoExtensions_PlacementType = 0
	VideoExtensions_IN_STREAM VideoExtensions_PlacementType = 1
)

// Enum value maps for VideoExtensions_PlacementType.
var (
	VideoExtensions_PlacementType_name = map[int32]string{
		0: "IN_BANNER",
		1: "IN_STREAM",
	}
	VideoExtensions_PlacementType_value = map[string]int32{
		"IN_BANNER": 0,
		"IN_STREAM": 1,
	}
)

func (x VideoExtensions_PlacementType) Enum() *VideoExtensions_PlacementType {
	p := new(VideoExtensions_PlacementType)
	*p = x
	return p
}

func (x VideoExtensions_PlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoExtensions_PlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_openrtb_extension_proto_enumTypes[1].Descriptor()
}

func (VideoExtensions_PlacementType) Type() protoreflect.EnumType {
	return &file_beeswax_openrtb_extension_proto_enumTypes[1]
}

func (x VideoExtensions_PlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VideoExtensions_PlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VideoExtensions_PlacementType(num)
	return nil
}

// Deprecated: Use VideoExtensions_PlacementType.Descriptor instead.
func (VideoExtensions_PlacementType) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{5, 0}
}

// Next available tag: 5
// Refer to the documentation of BuyerPricingRule in adx.proto
// to understand the meaning of these fields.
type AdvertiserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludedAdvertisers []int64 `protobuf:"varint,1,rep,name=included_advertisers,json=includedAdvertisers" json:"included_advertisers,omitempty"`
	ExcludedAdvertisers []int64 `protobuf:"varint,2,rep,name=excluded_advertisers,json=excludedAdvertisers" json:"excluded_advertisers,omitempty"`
	Blocked             *bool   `protobuf:"varint,3,opt,name=blocked" json:"blocked,omitempty"`
	// CPM micros in buyer currency i.e. USD
	MinimumCpmMicros *int64 `protobuf:"varint,4,opt,name=minimum_cpm_micros,json=minimumCpmMicros" json:"minimum_cpm_micros,omitempty"`
}

func (x *AdvertiserInfo) Reset() {
	*x = AdvertiserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertiserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertiserInfo) ProtoMessage() {}

func (x *AdvertiserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertiserInfo.ProtoReflect.Descriptor instead.
func (*AdvertiserInfo) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{0}
}

func (x *AdvertiserInfo) GetIncludedAdvertisers() []int64 {
	if x != nil {
		return x.IncludedAdvertisers
	}
	return nil
}

func (x *AdvertiserInfo) GetExcludedAdvertisers() []int64 {
	if x != nil {
		return x.ExcludedAdvertisers
	}
	return nil
}

func (x *AdvertiserInfo) GetBlocked() bool {
	if x != nil && x.Blocked != nil {
		return *x.Blocked
	}
	return false
}

func (x *AdvertiserInfo) GetMinimumCpmMicros() int64 {
	if x != nil && x.MinimumCpmMicros != nil {
		return *x.MinimumCpmMicros
	}
	return 0
}

// Next available tag: 3
// Used to represent <w,h> at various places in the
// extensions.
// For e.g. Additional ad sizes supported on an adslot.
type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  *int32 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{1}
}

func (x *Dimension) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Dimension) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

// Next available tag: 15
type BidRequestExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	InventorySource *Enums_Inventory_Source `protobuf:"varint,1,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	AuctionId       *base.EventId           `protobuf:"bytes,2,opt,name=auction_id,json=auctionId" json:"auction_id,omitempty"`
	// The unique identifier of the auction per buzz_key.
	// Format: <auctionid.timestamp>.<auctionid.hostid>.<auctionid.tid>.<auctionid.imp_idx>.<buzz_key>
	// imp_idx: currently is present iff more than one impressions are present in the original exchange bid request.
	// auction_id_str: contains buzz_key so it is populated in sbs.
	AuctionidStr *string `protobuf:"bytes,8,opt,name=auctionid_str,json=auctionidStr" json:"auctionid_str,omitempty"`
	// The unique identifier for the exchange bid request per buzz_key.
	// Format: <auctionid.timestamp>.<auctionid.hostid>.<auctionid.tid>.<buzz_key>
	// request_id_str contains buzz_key so it is populated in sbs.
	RequestidStr *string `protobuf:"bytes,14,opt,name=requestid_str,json=requestidStr" json:"requestid_str,omitempty"`
	// This is slated to be removed. It is a typo.
	//
	// Deprecated: Do not use.
	RequestIdStr *string `protobuf:"bytes,13,opt,name=request_id_str,json=requestIdStr" json:"request_id_str,omitempty"`
	// This field is used for Geo targeting.
	// It is populated by the LocalAugmentor in Stinger.
	TargetingGeo *TargetingGeoExtension `protobuf:"bytes,3,opt,name=targeting_geo,json=targetingGeo" json:"targeting_geo,omitempty"`
	// time_of_week is a stinger calculated field used for targetting
	TimeOfWeek *int32 `protobuf:"varint,4,opt,name=time_of_week,json=timeOfWeek" json:"time_of_week,omitempty"`
	// Used to identify Stinger.
	BuzzKey *string `protobuf:"bytes,5,opt,name=buzz_key,json=buzzKey" json:"buzz_key,omitempty"`
	// This field is used by Augmentors like ManagedListAugmentor
	AugmentorData []*BidRequestExtensions_AugmentorData `protobuf:"bytes,6,rep,name=augmentor_data,json=augmentorData" json:"augmentor_data,omitempty"`
	// Determines how impression notifications will happen for this request. See
	// ImpressionTracker comments for more information.
	ImpTracker *Enums_Inventory_ImpressionTracker `protobuf:"varint,10,opt,name=imp_tracker,json=impTracker,enum=openrtb.Enums_Inventory_ImpressionTracker" json:"imp_tracker,omitempty"`
	// Determines how supplier click tracking will happen for this request. See
	// SupplierClickTracker for more information.
	SupplierClickTracker *Enums_Inventory_SupplierClickTracker `protobuf:"varint,11,opt,name=supplier_click_tracker,json=supplierClickTracker,enum=openrtb.Enums_Inventory_SupplierClickTracker" json:"supplier_click_tracker,omitempty"`
	// Exchange specific extensions
	Appnexus *AppNexusBidRequestExtension       `protobuf:"bytes,7,opt,name=appnexus" json:"appnexus,omitempty"`
	Adx      *AdxBidRequestExtension            `protobuf:"bytes,9,opt,name=adx" json:"adx,omitempty"`
	AdsTxt   *BidRequestExtensions_AdsTxtStatus `protobuf:"varint,12,opt,name=ads_txt,json=adsTxt,enum=openrtb.BidRequestExtensions_AdsTxtStatus" json:"ads_txt,omitempty"`
}

func (x *BidRequestExtensions) Reset() {
	*x = BidRequestExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExtensions) ProtoMessage() {}

func (x *BidRequestExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExtensions.ProtoReflect.Descriptor instead.
func (*BidRequestExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{2}
}

var extRange_BidRequestExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use BidRequestExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequestExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequestExtensions
}

func (x *BidRequestExtensions) GetInventorySource() Enums_Inventory_Source {
	if x != nil && x.InventorySource != nil {
		return *x.InventorySource
	}
	return Enums_Inventory_UNKNOWN_SOURCE
}

func (x *BidRequestExtensions) GetAuctionId() *base.EventId {
	if x != nil {
		return x.AuctionId
	}
	return nil
}

func (x *BidRequestExtensions) GetAuctionidStr() string {
	if x != nil && x.AuctionidStr != nil {
		return *x.AuctionidStr
	}
	return ""
}

func (x *BidRequestExtensions) GetRequestidStr() string {
	if x != nil && x.RequestidStr != nil {
		return *x.RequestidStr
	}
	return ""
}

// Deprecated: Do not use.
func (x *BidRequestExtensions) GetRequestIdStr() string {
	if x != nil && x.RequestIdStr != nil {
		return *x.RequestIdStr
	}
	return ""
}

func (x *BidRequestExtensions) GetTargetingGeo() *TargetingGeoExtension {
	if x != nil {
		return x.TargetingGeo
	}
	return nil
}

func (x *BidRequestExtensions) GetTimeOfWeek() int32 {
	if x != nil && x.TimeOfWeek != nil {
		return *x.TimeOfWeek
	}
	return 0
}

func (x *BidRequestExtensions) GetBuzzKey() string {
	if x != nil && x.BuzzKey != nil {
		return *x.BuzzKey
	}
	return ""
}

func (x *BidRequestExtensions) GetAugmentorData() []*BidRequestExtensions_AugmentorData {
	if x != nil {
		return x.AugmentorData
	}
	return nil
}

func (x *BidRequestExtensions) GetImpTracker() Enums_Inventory_ImpressionTracker {
	if x != nil && x.ImpTracker != nil {
		return *x.ImpTracker
	}
	return Enums_Inventory_NEVER_USE_TRACKER
}

func (x *BidRequestExtensions) GetSupplierClickTracker() Enums_Inventory_SupplierClickTracker {
	if x != nil && x.SupplierClickTracker != nil {
		return *x.SupplierClickTracker
	}
	return Enums_Inventory_NO_CLICK_TRACKER
}

func (x *BidRequestExtensions) GetAppnexus() *AppNexusBidRequestExtension {
	if x != nil {
		return x.Appnexus
	}
	return nil
}

func (x *BidRequestExtensions) GetAdx() *AdxBidRequestExtension {
	if x != nil {
		return x.Adx
	}
	return nil
}

func (x *BidRequestExtensions) GetAdsTxt() BidRequestExtensions_AdsTxtStatus {
	if x != nil && x.AdsTxt != nil {
		return *x.AdsTxt
	}
	return BidRequestExtensions_UNKNOWN
}

// Next available tag: 11
type ImpressionExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	PlacementType   *Enums_Inventory_PlacementType   `protobuf:"varint,2,opt,name=placement_type,json=placementType,enum=openrtb.Enums_Inventory_PlacementType" json:"placement_type,omitempty"`
	EnvironmentType *Enums_Inventory_EnvironmentType `protobuf:"varint,3,opt,name=environment_type,json=environmentType,enum=openrtb.Enums_Inventory_EnvironmentType" json:"environment_type,omitempty"`
	Placements      []string                         `protobuf:"bytes,5,rep,name=placements" json:"placements,omitempty"`
	AdvertiserInfo  []*AdvertiserInfo                `protobuf:"bytes,4,rep,name=advertiser_info,json=advertiserInfo" json:"advertiser_info,omitempty"`
	Viewability     *ViewabilityExtensions           `protobuf:"bytes,8,opt,name=viewability" json:"viewability,omitempty"`
	// Seat ids that the exchange considers eligible to serve on this impression.
	// This feature is currently only supported by Adx.
	EligibleSeatIds []string                  `protobuf:"bytes,7,rep,name=eligible_seat_ids,json=eligibleSeatIds" json:"eligible_seat_ids,omitempty"`
	SeatConstraints *SeatConstraintsExtension `protobuf:"bytes,11,opt,name=seat_constraints,json=seatConstraints" json:"seat_constraints,omitempty"`
	// Exchange specific extensions
	Adx *AdxImpressionExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
	// allowed restricted ad categories for ADX
	AllowedRestrictedCategory         []int32 `protobuf:"varint,9,rep,packed,name=allowed_restricted_category,json=allowedRestrictedCategory" json:"allowed_restricted_category,omitempty"`
	AllowedRestrictedCategoryForDeals []int32 `protobuf:"varint,10,rep,packed,name=allowed_restricted_category_for_deals,json=allowedRestrictedCategoryForDeals" json:"allowed_restricted_category_for_deals,omitempty"`
	// Deprecated field. Use ViewabilityExtensions field instead.
	//
	// Deprecated: Do not use.
	ExchangePredictedViewRate *float32 `protobuf:"fixed32,6,opt,name=exchange_predicted_view_rate,json=exchangePredictedViewRate" json:"exchange_predicted_view_rate,omitempty"`
}

func (x *ImpressionExtensions) Reset() {
	*x = ImpressionExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionExtensions) ProtoMessage() {}

func (x *ImpressionExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionExtensions.ProtoReflect.Descriptor instead.
func (*ImpressionExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{3}
}

var extRange_ImpressionExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use ImpressionExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*ImpressionExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_ImpressionExtensions
}

func (x *ImpressionExtensions) GetPlacementType() Enums_Inventory_PlacementType {
	if x != nil && x.PlacementType != nil {
		return *x.PlacementType
	}
	return Enums_Inventory_UNKNOWN_PLACEMENT_TYPE
}

func (x *ImpressionExtensions) GetEnvironmentType() Enums_Inventory_EnvironmentType {
	if x != nil && x.EnvironmentType != nil {
		return *x.EnvironmentType
	}
	return Enums_Inventory_UNKNOWN_ENVIRONMENT_TYPE
}

func (x *ImpressionExtensions) GetPlacements() []string {
	if x != nil {
		return x.Placements
	}
	return nil
}

func (x *ImpressionExtensions) GetAdvertiserInfo() []*AdvertiserInfo {
	if x != nil {
		return x.AdvertiserInfo
	}
	return nil
}

func (x *ImpressionExtensions) GetViewability() *ViewabilityExtensions {
	if x != nil {
		return x.Viewability
	}
	return nil
}

func (x *ImpressionExtensions) GetEligibleSeatIds() []string {
	if x != nil {
		return x.EligibleSeatIds
	}
	return nil
}

func (x *ImpressionExtensions) GetSeatConstraints() *SeatConstraintsExtension {
	if x != nil {
		return x.SeatConstraints
	}
	return nil
}

func (x *ImpressionExtensions) GetAdx() *AdxImpressionExtension {
	if x != nil {
		return x.Adx
	}
	return nil
}

func (x *ImpressionExtensions) GetAllowedRestrictedCategory() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategory
	}
	return nil
}

func (x *ImpressionExtensions) GetAllowedRestrictedCategoryForDeals() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategoryForDeals
	}
	return nil
}

// Deprecated: Do not use.
func (x *ImpressionExtensions) GetExchangePredictedViewRate() float32 {
	if x != nil && x.ExchangePredictedViewRate != nil {
		return *x.ExchangePredictedViewRate
	}
	return 0
}

// Next available tag: 5
type BannerExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Blocked ApiFrameworks
	Bapis []Enums_BidRequest_Impression_ApiFramework `protobuf:"varint,1,rep,name=bapis,enum=openrtb.Enums_BidRequest_Impression_ApiFramework" json:"bapis,omitempty"`
	// Creative attributes that are required by the request.
	// For e.g. MoPub request have "AD_HAS_THUMBNAIL" for the creative
	//          to be returned in the response
	RequiredAttrs []CreativeAttribute `protobuf:"varint,2,rep,name=required_attrs,json=requiredAttrs,enum=openrtb.CreativeAttribute" json:"required_attrs,omitempty"`
	// Some exchanges such as Google Adx support multiple allowed sizes for
	// an impression.
	// In such cases, the additional dimensions (w, h) that are supported
	// are present in this field.
	// For example, if Adx supports 5 sets of allowed sizes in a request.
	// The first allowed size will be in banner.w and banner.h
	// The additional 4 sets will be in this field.
	AdditionalDimensions []*Dimension `protobuf:"bytes,3,rep,name=additional_dimensions,json=additionalDimensions" json:"additional_dimensions,omitempty"`
	// Some exchanges support "rewarded banners". This signifies that an end user
	// will recieve a reward for interacting with the ad. E.g. if the user plays
	// a game in a playable banner, they get game currency in a phone game.
	//
	// Two things to note:
	//   1. Protobufs sets bools false by default. Unless this field exists and
	//      is explicitly set to true, a banner is considered "nonrewarded".
	//   2. No exchange actually defines this field here, it is a generalization
	//      of the different ways that exchanges denote rewarded banners.
	Rewarded *bool `protobuf:"varint,4,opt,name=rewarded" json:"rewarded,omitempty"`
}

func (x *BannerExtensions) Reset() {
	*x = BannerExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerExtensions) ProtoMessage() {}

func (x *BannerExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerExtensions.ProtoReflect.Descriptor instead.
func (*BannerExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{4}
}

var extRange_BannerExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use BannerExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BannerExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BannerExtensions
}

func (x *BannerExtensions) GetBapis() []Enums_BidRequest_Impression_ApiFramework {
	if x != nil {
		return x.Bapis
	}
	return nil
}

func (x *BannerExtensions) GetRequiredAttrs() []CreativeAttribute {
	if x != nil {
		return x.RequiredAttrs
	}
	return nil
}

func (x *BannerExtensions) GetAdditionalDimensions() []*Dimension {
	if x != nil {
		return x.AdditionalDimensions
	}
	return nil
}

func (x *BannerExtensions) GetRewarded() bool {
	if x != nil && x.Rewarded != nil {
		return *x.Rewarded
	}
	return false
}

// Next available tag: 6
type VideoExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// player_size can be one of ["S", "M"., "L", "XL", "NA"].
	// Added by augmentor in Beeswax Front End Server (FES)
	PlayerSize *string `protobuf:"bytes,1,opt,name=player_size,json=playerSize" json:"player_size,omitempty"`
	// Creative attributes that are required by the request.
	// For e.g. Adx requests that require skippable ads are modeled
	// as having required_attr = AD_CAN_BE_SKIPPED
	RequiredAttrs []CreativeAttribute            `protobuf:"varint,2,rep,name=required_attrs,json=requiredAttrs,enum=openrtb.CreativeAttribute" json:"required_attrs,omitempty"`
	PlacementType *VideoExtensions_PlacementType `protobuf:"varint,3,opt,name=placement_type,json=placementType,enum=openrtb.VideoExtensions_PlacementType,def=1" json:"placement_type,omitempty"`
	// Number of seconds into the video ad when the skip button appears.
	// This is only applicable to skippable video ads.
	// Some inventory sources such as Google Ad Exchange do not specify
	// this skip offset explicity in the bid request.
	// For such sources, skip_offset of 5 seconds is a safe default.
	SkipOffset *int32 `protobuf:"varint,4,opt,name=skip_offset,json=skipOffset,def=5" json:"skip_offset,omitempty"`
	// Some exchanges support "rewarded videos". This signifies that an end user
	// will recieve a reward for interacting with the ad. E.g. if the user watches
	// the whole video, they get game currency in a phone game.
	//
	// Two things to note:
	//   1. Protobufs sets bools false by default. Unless this field exists and
	//      is explicitly set to true, a video is considered "nonrewarded".
	//   2. No exchange actually defines this field here, it is a generalization
	//      of the different ways that exchanges denote rewarded videos.
	Rewarded *bool `protobuf:"varint,5,opt,name=rewarded" json:"rewarded,omitempty"`
}

// Default values for VideoExtensions fields.
const (
	Default_VideoExtensions_PlacementType = VideoExtensions_IN_STREAM
	Default_VideoExtensions_SkipOffset    = int32(5)
)

func (x *VideoExtensions) Reset() {
	*x = VideoExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoExtensions) ProtoMessage() {}

func (x *VideoExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoExtensions.ProtoReflect.Descriptor instead.
func (*VideoExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{5}
}

var extRange_VideoExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use VideoExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*VideoExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_VideoExtensions
}

func (x *VideoExtensions) GetPlayerSize() string {
	if x != nil && x.PlayerSize != nil {
		return *x.PlayerSize
	}
	return ""
}

func (x *VideoExtensions) GetRequiredAttrs() []CreativeAttribute {
	if x != nil {
		return x.RequiredAttrs
	}
	return nil
}

func (x *VideoExtensions) GetPlacementType() VideoExtensions_PlacementType {
	if x != nil && x.PlacementType != nil {
		return *x.PlacementType
	}
	return Default_VideoExtensions_PlacementType
}

func (x *VideoExtensions) GetSkipOffset() int32 {
	if x != nil && x.SkipOffset != nil {
		return *x.SkipOffset
	}
	return Default_VideoExtensions_SkipOffset
}

func (x *VideoExtensions) GetRewarded() bool {
	if x != nil && x.Rewarded != nil {
		return *x.Rewarded
	}
	return false
}

type NativeExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *NativeExtensions) Reset() {
	*x = NativeExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeExtensions) ProtoMessage() {}

func (x *NativeExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeExtensions.ProtoReflect.Descriptor instead.
func (*NativeExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{6}
}

var extRange_NativeExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use NativeExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeExtensions
}

type PMPExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *PMPExtensions) Reset() {
	*x = PMPExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMPExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMPExtensions) ProtoMessage() {}

func (x *PMPExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMPExtensions.ProtoReflect.Descriptor instead.
func (*PMPExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{7}
}

var extRange_PMPExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use PMPExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*PMPExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_PMPExtensions
}

// Next available tag: 2
type DirectDealExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Exchange specific extensions
	Adx *AdxDirectDealExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
}

func (x *DirectDealExtensions) Reset() {
	*x = DirectDealExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectDealExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectDealExtensions) ProtoMessage() {}

func (x *DirectDealExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectDealExtensions.ProtoReflect.Descriptor instead.
func (*DirectDealExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{8}
}

var extRange_DirectDealExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use DirectDealExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*DirectDealExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_DirectDealExtensions
}

func (x *DirectDealExtensions) GetAdx() *AdxDirectDealExtension {
	if x != nil {
		return x.Adx
	}
	return nil
}

type SiteExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *SiteExtensions) Reset() {
	*x = SiteExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteExtensions) ProtoMessage() {}

func (x *SiteExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteExtensions.ProtoReflect.Descriptor instead.
func (*SiteExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{9}
}

var extRange_SiteExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use SiteExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*SiteExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_SiteExtensions
}

type AppExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *AppExtensions) Reset() {
	*x = AppExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppExtensions) ProtoMessage() {}

func (x *AppExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppExtensions.ProtoReflect.Descriptor instead.
func (*AppExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{10}
}

var extRange_AppExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use AppExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*AppExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_AppExtensions
}

type ContentExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *ContentExtensions) Reset() {
	*x = ContentExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentExtensions) ProtoMessage() {}

func (x *ContentExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentExtensions.ProtoReflect.Descriptor instead.
func (*ContentExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{11}
}

var extRange_ContentExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use ContentExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*ContentExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_ContentExtensions
}

type ProducerExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *ProducerExtensions) Reset() {
	*x = ProducerExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerExtensions) ProtoMessage() {}

func (x *ProducerExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerExtensions.ProtoReflect.Descriptor instead.
func (*ProducerExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{12}
}

var extRange_ProducerExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use ProducerExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*ProducerExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_ProducerExtensions
}

// Next available tag: 13
// Tag 1: idfa - Deprecated. Do not resuse.
type DeviceExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Device screen size. Valid values are "S", "M", "L", "XL", and "NA"
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedDeviceScreenSize *string `protobuf:"bytes,2,opt,name=augmented_device_screen_size,json=augmentedDeviceScreenSize,def=NA" json:"augmented_device_screen_size,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedBrowser *string `protobuf:"bytes,3,opt,name=augmented_browser,json=augmentedBrowser,def=-1" json:"augmented_browser,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedBrowserVersion *string `protobuf:"bytes,4,opt,name=augmented_browser_version,json=augmentedBrowserVersion,def=-1" json:"augmented_browser_version,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedOs *string `protobuf:"bytes,5,opt,name=augmented_os,json=augmentedOs,def=-1" json:"augmented_os,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedOsv *string `protobuf:"bytes,6,opt,name=augmented_osv,json=augmentedOsv,def=-1" json:"augmented_osv,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedModel *string `protobuf:"bytes,7,opt,name=augmented_model,json=augmentedModel,def=-1" json:"augmented_model,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedMake *string `protobuf:"bytes,8,opt,name=augmented_make,json=augmentedMake,def=-1" json:"augmented_make,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedDevicetype *Enums_BidRequest_Device_DeviceType `protobuf:"varint,9,opt,name=augmented_devicetype,json=augmentedDevicetype,enum=openrtb.Enums_BidRequest_Device_DeviceType,def=-1" json:"augmented_devicetype,omitempty"`
	// Added by augmentor in Beeswax Front End Server (FES)
	AugmentedCarrier *string `protobuf:"bytes,10,opt,name=augmented_carrier,json=augmentedCarrier" json:"augmented_carrier,omitempty"`
	// GDPR-compliant hashed ip
	IpHashed *string `protobuf:"bytes,11,opt,name=ip_hashed,json=ipHashed" json:"ip_hashed,omitempty"`
	// GDPR-compliant hashed ipv6
	Ipv6Hashed *string `protobuf:"bytes,12,opt,name=ipv6_hashed,json=ipv6Hashed" json:"ipv6_hashed,omitempty"`
}

// Default values for DeviceExtensions fields.
const (
	Default_DeviceExtensions_AugmentedDeviceScreenSize = string("NA")
	Default_DeviceExtensions_AugmentedBrowser          = string("-1")
	Default_DeviceExtensions_AugmentedBrowserVersion   = string("-1")
	Default_DeviceExtensions_AugmentedOs               = string("-1")
	Default_DeviceExtensions_AugmentedOsv              = string("-1")
	Default_DeviceExtensions_AugmentedModel            = string("-1")
	Default_DeviceExtensions_AugmentedMake             = string("-1")
	Default_DeviceExtensions_AugmentedDevicetype       = Enums_BidRequest_Device_UNKNOWN
)

func (x *DeviceExtensions) Reset() {
	*x = DeviceExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceExtensions) ProtoMessage() {}

func (x *DeviceExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceExtensions.ProtoReflect.Descriptor instead.
func (*DeviceExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{13}
}

var extRange_DeviceExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use DeviceExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*DeviceExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_DeviceExtensions
}

func (x *DeviceExtensions) GetAugmentedDeviceScreenSize() string {
	if x != nil && x.AugmentedDeviceScreenSize != nil {
		return *x.AugmentedDeviceScreenSize
	}
	return Default_DeviceExtensions_AugmentedDeviceScreenSize
}

func (x *DeviceExtensions) GetAugmentedBrowser() string {
	if x != nil && x.AugmentedBrowser != nil {
		return *x.AugmentedBrowser
	}
	return Default_DeviceExtensions_AugmentedBrowser
}

func (x *DeviceExtensions) GetAugmentedBrowserVersion() string {
	if x != nil && x.AugmentedBrowserVersion != nil {
		return *x.AugmentedBrowserVersion
	}
	return Default_DeviceExtensions_AugmentedBrowserVersion
}

func (x *DeviceExtensions) GetAugmentedOs() string {
	if x != nil && x.AugmentedOs != nil {
		return *x.AugmentedOs
	}
	return Default_DeviceExtensions_AugmentedOs
}

func (x *DeviceExtensions) GetAugmentedOsv() string {
	if x != nil && x.AugmentedOsv != nil {
		return *x.AugmentedOsv
	}
	return Default_DeviceExtensions_AugmentedOsv
}

func (x *DeviceExtensions) GetAugmentedModel() string {
	if x != nil && x.AugmentedModel != nil {
		return *x.AugmentedModel
	}
	return Default_DeviceExtensions_AugmentedModel
}

func (x *DeviceExtensions) GetAugmentedMake() string {
	if x != nil && x.AugmentedMake != nil {
		return *x.AugmentedMake
	}
	return Default_DeviceExtensions_AugmentedMake
}

func (x *DeviceExtensions) GetAugmentedDevicetype() Enums_BidRequest_Device_DeviceType {
	if x != nil && x.AugmentedDevicetype != nil {
		return *x.AugmentedDevicetype
	}
	return Default_DeviceExtensions_AugmentedDevicetype
}

func (x *DeviceExtensions) GetAugmentedCarrier() string {
	if x != nil && x.AugmentedCarrier != nil {
		return *x.AugmentedCarrier
	}
	return ""
}

func (x *DeviceExtensions) GetIpHashed() string {
	if x != nil && x.IpHashed != nil {
		return *x.IpHashed
	}
	return ""
}

func (x *DeviceExtensions) GetIpv6Hashed() string {
	if x != nil && x.Ipv6Hashed != nil {
		return *x.Ipv6Hashed
	}
	return ""
}

// Next available tag: 9
type UserExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// This field identifies the user of the bid request. It will be used
	// for user segment lookup and frequency cap.
	// For WEB request, its value is bito_id (user.id).
	// For APP request, its value is the first field which has value
	// in the following order:
	// device.ifa -> device.dpidsha1 -> device.dpidmd5
	// And the value is prefixed with the names in Enum.Bidrequest.User.UserIdType
	// (Except bito_id - we still use bito as prefix)
	UserId            *string                             `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserIdType        *Enums_BidRequest_User_UserIdType   `protobuf:"varint,2,opt,name=user_id_type,json=userIdType,enum=openrtb.Enums_BidRequest_User_UserIdType" json:"user_id_type,omitempty"`
	MatchedUserGroups []*UserExtensions_MatchedUserGroups `protobuf:"bytes,4,rep,name=matched_user_groups,json=matchedUserGroups" json:"matched_user_groups,omitempty"`
	// Number of days since the user cookie has been dropped, for example, 10
	CookieAge *int32 `protobuf:"varint,3,opt,name=cookie_age,json=cookieAge" json:"cookie_age,omitempty"`
	// GDPR-compliant hashed user_id
	UserIdHashed *string `protobuf:"bytes,8,opt,name=user_id_hashed,json=userIdHashed" json:"user_id_hashed,omitempty"`
}

func (x *UserExtensions) Reset() {
	*x = UserExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExtensions) ProtoMessage() {}

func (x *UserExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExtensions.ProtoReflect.Descriptor instead.
func (*UserExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{14}
}

var extRange_UserExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use UserExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*UserExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_UserExtensions
}

func (x *UserExtensions) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserExtensions) GetUserIdType() Enums_BidRequest_User_UserIdType {
	if x != nil && x.UserIdType != nil {
		return *x.UserIdType
	}
	return Enums_BidRequest_User_UNKNOWN
}

func (x *UserExtensions) GetMatchedUserGroups() []*UserExtensions_MatchedUserGroups {
	if x != nil {
		return x.MatchedUserGroups
	}
	return nil
}

func (x *UserExtensions) GetCookieAge() int32 {
	if x != nil && x.CookieAge != nil {
		return *x.CookieAge
	}
	return 0
}

func (x *UserExtensions) GetUserIdHashed() string {
	if x != nil && x.UserIdHashed != nil {
		return *x.UserIdHashed
	}
	return ""
}

type PublisherExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *PublisherExtensions) Reset() {
	*x = PublisherExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherExtensions) ProtoMessage() {}

func (x *PublisherExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherExtensions.ProtoReflect.Descriptor instead.
func (*PublisherExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{15}
}

var extRange_PublisherExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use PublisherExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*PublisherExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_PublisherExtensions
}

// Next available tag: 3
type GeoExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Adx *AdxGeoExtension `protobuf:"bytes,1,opt,name=adx" json:"adx,omitempty"`
	// All granularities of regions in ISO 3166-2.
	Regions []string `protobuf:"bytes,2,rep,name=regions" json:"regions,omitempty"`
}

func (x *GeoExtensions) Reset() {
	*x = GeoExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoExtensions) ProtoMessage() {}

func (x *GeoExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoExtensions.ProtoReflect.Descriptor instead.
func (*GeoExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{16}
}

var extRange_GeoExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use GeoExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*GeoExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_GeoExtensions
}

func (x *GeoExtensions) GetAdx() *AdxGeoExtension {
	if x != nil {
		return x.Adx
	}
	return nil
}

func (x *GeoExtensions) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

// Next available tag: 2
type DataExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	BeeswaxAugmented *bool `protobuf:"varint,1,opt,name=beeswax_augmented,json=beeswaxAugmented,def=0" json:"beeswax_augmented,omitempty"`
}

// Default values for DataExtensions fields.
const (
	Default_DataExtensions_BeeswaxAugmented = bool(false)
)

func (x *DataExtensions) Reset() {
	*x = DataExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataExtensions) ProtoMessage() {}

func (x *DataExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataExtensions.ProtoReflect.Descriptor instead.
func (*DataExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{17}
}

var extRange_DataExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use DataExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*DataExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_DataExtensions
}

func (x *DataExtensions) GetBeeswaxAugmented() bool {
	if x != nil && x.BeeswaxAugmented != nil {
		return *x.BeeswaxAugmented
	}
	return Default_DataExtensions_BeeswaxAugmented
}

type SegmentExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *SegmentExtensions) Reset() {
	*x = SegmentExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentExtensions) ProtoMessage() {}

func (x *SegmentExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentExtensions.ProtoReflect.Descriptor instead.
func (*SegmentExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{18}
}

var extRange_SegmentExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use SegmentExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*SegmentExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_SegmentExtensions
}

type RegulationsExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// When this field is set to true, it implies that Beeswax has determined that
	// this request needs to comply with the GDPR terms and conditions.
	Gdpr *Flag `protobuf:"varint,1,opt,name=gdpr,enum=openrtb.Flag" json:"gdpr,omitempty"`
	// The raw IAB consent string or "daisybit" as provided in the incoming bid
	// request.
	GdprConsentString *string `protobuf:"bytes,2,opt,name=gdpr_consent_string,json=gdprConsentString" json:"gdpr_consent_string,omitempty"`
}

func (x *RegulationsExtensions) Reset() {
	*x = RegulationsExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulationsExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulationsExtensions) ProtoMessage() {}

func (x *RegulationsExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulationsExtensions.ProtoReflect.Descriptor instead.
func (*RegulationsExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{19}
}

var extRange_RegulationsExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use RegulationsExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*RegulationsExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_RegulationsExtensions
}

func (x *RegulationsExtensions) GetGdpr() Flag {
	if x != nil && x.Gdpr != nil {
		return *x.Gdpr
	}
	return Flag_NO
}

func (x *RegulationsExtensions) GetGdprConsentString() string {
	if x != nil && x.GdprConsentString != nil {
		return *x.GdprConsentString
	}
	return ""
}

type BidResponseExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *BidResponseExtensions) Reset() {
	*x = BidResponseExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponseExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponseExtensions) ProtoMessage() {}

func (x *BidResponseExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponseExtensions.ProtoReflect.Descriptor instead.
func (*BidResponseExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{20}
}

var extRange_BidResponseExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use BidResponseExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidResponseExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidResponseExtensions
}

type SeatBidExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *SeatBidExtensions) Reset() {
	*x = SeatBidExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBidExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBidExtensions) ProtoMessage() {}

func (x *SeatBidExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBidExtensions.ProtoReflect.Descriptor instead.
func (*SeatBidExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{21}
}

var extRange_SeatBidExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use SeatBidExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*SeatBidExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_SeatBidExtensions
}

// Next available tag: 11
type BidExtensions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *BidExtensions) Reset() {
	*x = BidExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidExtensions) ProtoMessage() {}

func (x *BidExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidExtensions.ProtoReflect.Descriptor instead.
func (*BidExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{22}
}

var extRange_BidExtensions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use BidExtensions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidExtensions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidExtensions
}

// This field is used for Geo targeting.
// It is populated by the LocalAugmentor in Stinger.
type TargetingGeoExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,1,opt,name=country,def=000" json:"country,omitempty"`
	// Region using ISO 3166-2
	//
	// Deprecated: Do not use.
	Region *string `protobuf:"bytes,2,opt,name=region,def=000/00" json:"region,omitempty"`
	// All granularities of regions in ISO 3166-2. If it is empty, "000/00" should
	// be used as the targeting key.
	Regions []string `protobuf:"bytes,10,rep,name=regions" json:"regions,omitempty"`
	// City using United Nations Code for Trade and Transport Locations
	// (http://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,3,opt,name=city,def=-1" json:"city,omitempty"`
	// Zip/postal code.
	Zip            *string                            `protobuf:"bytes,4,opt,name=zip,def=-1" json:"zip,omitempty"`
	Metro          *string                            `protobuf:"bytes,5,opt,name=metro,def=000" json:"metro,omitempty"`
	LatLongPresent *bool                              `protobuf:"varint,6,opt,name=lat_long_present,json=latLongPresent,def=0" json:"lat_long_present,omitempty"`
	Lat            *float64                           `protobuf:"fixed64,7,opt,name=lat" json:"lat,omitempty"`
	Lon            *float64                           `protobuf:"fixed64,8,opt,name=lon" json:"lon,omitempty"`
	Type           *Enums_BidRequest_Geo_LocationType `protobuf:"varint,9,opt,name=type,enum=openrtb.Enums_BidRequest_Geo_LocationType" json:"type,omitempty"`
}

// Default values for TargetingGeoExtension fields.
const (
	Default_TargetingGeoExtension_Country        = string("000")
	Default_TargetingGeoExtension_Region         = string("000/00")
	Default_TargetingGeoExtension_City           = string("-1")
	Default_TargetingGeoExtension_Zip            = string("-1")
	Default_TargetingGeoExtension_Metro          = string("000")
	Default_TargetingGeoExtension_LatLongPresent = bool(false)
)

func (x *TargetingGeoExtension) Reset() {
	*x = TargetingGeoExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetingGeoExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetingGeoExtension) ProtoMessage() {}

func (x *TargetingGeoExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetingGeoExtension.ProtoReflect.Descriptor instead.
func (*TargetingGeoExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{23}
}

func (x *TargetingGeoExtension) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return Default_TargetingGeoExtension_Country
}

// Deprecated: Do not use.
func (x *TargetingGeoExtension) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_TargetingGeoExtension_Region
}

func (x *TargetingGeoExtension) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *TargetingGeoExtension) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return Default_TargetingGeoExtension_City
}

func (x *TargetingGeoExtension) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return Default_TargetingGeoExtension_Zip
}

func (x *TargetingGeoExtension) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return Default_TargetingGeoExtension_Metro
}

func (x *TargetingGeoExtension) GetLatLongPresent() bool {
	if x != nil && x.LatLongPresent != nil {
		return *x.LatLongPresent
	}
	return Default_TargetingGeoExtension_LatLongPresent
}

func (x *TargetingGeoExtension) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *TargetingGeoExtension) GetLon() float64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *TargetingGeoExtension) GetType() Enums_BidRequest_Geo_LocationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Enums_BidRequest_Geo_GPS_LOCATION
}

// Viewability.predicted_viewability is populated by FES LocalAugmentor
// and used for targeting in Matcher
type ViewabilityExtensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the predicted viewability from Beeswax ViewabilityPredictor
	PredictedViewability *float32 `protobuf:"fixed32,1,opt,name=predicted_viewability,json=predictedViewability" json:"predicted_viewability,omitempty"`
	// Specifies the probability that the impression will be viewable by the user,
	// based on historical data.
	// Currently populated for AppNexus and AdX only
	ExchangePredictedViewRate *float32 `protobuf:"fixed32,2,opt,name=exchange_predicted_view_rate,json=exchangePredictedViewRate" json:"exchange_predicted_view_rate,omitempty"`
}

func (x *ViewabilityExtensions) Reset() {
	*x = ViewabilityExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewabilityExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewabilityExtensions) ProtoMessage() {}

func (x *ViewabilityExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewabilityExtensions.ProtoReflect.Descriptor instead.
func (*ViewabilityExtensions) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{24}
}

func (x *ViewabilityExtensions) GetPredictedViewability() float32 {
	if x != nil && x.PredictedViewability != nil {
		return *x.PredictedViewability
	}
	return 0
}

func (x *ViewabilityExtensions) GetExchangePredictedViewRate() float32 {
	if x != nil && x.ExchangePredictedViewRate != nil {
		return *x.ExchangePredictedViewRate
	}
	return 0
}

// Exchange specific extensions.
// Next available tag: 3
type AdxBidRequestExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then the selective callout model predicted that we will not bid
	// on this request. ADX sends a sampled percentage of such requests so that they
	// can automatically update the model when bidding patterns change.
	IsPredictedToBeIgnored *bool `protobuf:"varint,1,opt,name=is_predicted_to_be_ignored,json=isPredictedToBeIgnored" json:"is_predicted_to_be_ignored,omitempty"`
	// The offset of the user's time from GMT in minutes.
	// For example, GMT-5 is timezone_offset = -300.
	TimezoneOffset *int32 `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
}

func (x *AdxBidRequestExtension) Reset() {
	*x = AdxBidRequestExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdxBidRequestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdxBidRequestExtension) ProtoMessage() {}

func (x *AdxBidRequestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdxBidRequestExtension.ProtoReflect.Descriptor instead.
func (*AdxBidRequestExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{25}
}

func (x *AdxBidRequestExtension) GetIsPredictedToBeIgnored() bool {
	if x != nil && x.IsPredictedToBeIgnored != nil {
		return *x.IsPredictedToBeIgnored
	}
	return false
}

func (x *AdxBidRequestExtension) GetTimezoneOffset() int32 {
	if x != nil && x.TimezoneOffset != nil {
		return *x.TimezoneOffset
	}
	return 0
}

// Next available tag: 2
type AdxDirectDealExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherBlocksOverridden *bool `protobuf:"varint,1,opt,name=publisher_blocks_overridden,json=publisherBlocksOverridden,def=0" json:"publisher_blocks_overridden,omitempty"`
}

// Default values for AdxDirectDealExtension fields.
const (
	Default_AdxDirectDealExtension_PublisherBlocksOverridden = bool(false)
)

func (x *AdxDirectDealExtension) Reset() {
	*x = AdxDirectDealExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdxDirectDealExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdxDirectDealExtension) ProtoMessage() {}

func (x *AdxDirectDealExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdxDirectDealExtension.ProtoReflect.Descriptor instead.
func (*AdxDirectDealExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{26}
}

func (x *AdxDirectDealExtension) GetPublisherBlocksOverridden() bool {
	if x != nil && x.PublisherBlocksOverridden != nil {
		return *x.PublisherBlocksOverridden
	}
	return Default_AdxDirectDealExtension_PublisherBlocksOverridden
}

// Next available tag: 5
type AdxImpressionExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdslotId *int32 `protobuf:"varint,1,opt,name=adslot_id,json=adslotId" json:"adslot_id,omitempty"`
	// Historical click-through rate for ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical click-through rate data is not available.
	// This figure does not include data aggregated from AdWords.
	ClickThroughRate  *float32 `protobuf:"fixed32,2,opt,name=click_through_rate,json=clickThroughRate,def=-1" json:"click_through_rate,omitempty"`
	AllowedVendorType []int32  `protobuf:"varint,3,rep,name=allowed_vendor_type,json=allowedVendorType" json:"allowed_vendor_type,omitempty"`
	// This field will be populated and effective when regs.ext.gdpr is YES.
	ConsentedProviders []int64 `protobuf:"varint,4,rep,name=consented_providers,json=consentedProviders" json:"consented_providers,omitempty"`
}

// Default values for AdxImpressionExtension fields.
const (
	Default_AdxImpressionExtension_ClickThroughRate = float32(-1)
)

func (x *AdxImpressionExtension) Reset() {
	*x = AdxImpressionExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdxImpressionExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdxImpressionExtension) ProtoMessage() {}

func (x *AdxImpressionExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdxImpressionExtension.ProtoReflect.Descriptor instead.
func (*AdxImpressionExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{27}
}

func (x *AdxImpressionExtension) GetAdslotId() int32 {
	if x != nil && x.AdslotId != nil {
		return *x.AdslotId
	}
	return 0
}

func (x *AdxImpressionExtension) GetClickThroughRate() float32 {
	if x != nil && x.ClickThroughRate != nil {
		return *x.ClickThroughRate
	}
	return Default_AdxImpressionExtension_ClickThroughRate
}

func (x *AdxImpressionExtension) GetAllowedVendorType() []int32 {
	if x != nil {
		return x.AllowedVendorType
	}
	return nil
}

func (x *AdxImpressionExtension) GetConsentedProviders() []int64 {
	if x != nil {
		return x.ConsentedProviders
	}
	return nil
}

type AdxGeoExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DmaRegionCode *int32 `protobuf:"varint,1,opt,name=dma_region_code,json=dmaRegionCode" json:"dma_region_code,omitempty"`
	// Use fes.exchange.adx.AdxBidRequest.HyperlocalSet to parse.
	HyperlocalSet []byte `protobuf:"bytes,2,opt,name=hyperlocal_set,json=hyperlocalSet" json:"hyperlocal_set,omitempty"`
}

func (x *AdxGeoExtension) Reset() {
	*x = AdxGeoExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdxGeoExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdxGeoExtension) ProtoMessage() {}

func (x *AdxGeoExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdxGeoExtension.ProtoReflect.Descriptor instead.
func (*AdxGeoExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{28}
}

func (x *AdxGeoExtension) GetDmaRegionCode() int32 {
	if x != nil && x.DmaRegionCode != nil {
		return *x.DmaRegionCode
	}
	return 0
}

func (x *AdxGeoExtension) GetHyperlocalSet() []byte {
	if x != nil {
		return x.HyperlocalSet
	}
	return nil
}

// 2. AppNexus Exchange
// Next available tag: 2
type AppNexusBidRequestExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the ID of the member selling the inventory.
	SellerMemberId *int32 `protobuf:"varint,1,opt,name=seller_member_id,json=sellerMemberId" json:"seller_member_id,omitempty"`
}

func (x *AppNexusBidRequestExtension) Reset() {
	*x = AppNexusBidRequestExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppNexusBidRequestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppNexusBidRequestExtension) ProtoMessage() {}

func (x *AppNexusBidRequestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppNexusBidRequestExtension.ProtoReflect.Descriptor instead.
func (*AppNexusBidRequestExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{29}
}

func (x *AppNexusBidRequestExtension) GetSellerMemberId() int32 {
	if x != nil && x.SellerMemberId != nil {
		return *x.SellerMemberId
	}
	return 0
}

// Next available tag: 3
type SeatConstraintsExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraints for a customer's default seat on this exchange if it exists. It
	// is valid for there to be no constraints here. That generally means we are
	// falling back to global auction values, e.g. imp.bid_floor.
	DefaultSeatConstraint *SeatConstraints `protobuf:"bytes,1,opt,name=default_seat_constraint,json=defaultSeatConstraint" json:"default_seat_constraint,omitempty"`
	// A map from Beeswax account_id to SeatConstraint. This is used when seat
	// level information needs to be taken into account during the bidding
	// process. We associate each seat constraint with a Beeswax account_id for
	// ease of lookup during the bidding process. Only accounts that have
	// constraints for a given request will be populated in this map. These values
	// supercede any constraints found in default_seat_constraint.
	AccountSeatConstraints map[uint64]*SeatConstraints `protobuf:"bytes,2,rep,name=account_seat_constraints,json=accountSeatConstraints" json:"account_seat_constraints,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *SeatConstraintsExtension) Reset() {
	*x = SeatConstraintsExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatConstraintsExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatConstraintsExtension) ProtoMessage() {}

func (x *SeatConstraintsExtension) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatConstraintsExtension.ProtoReflect.Descriptor instead.
func (*SeatConstraintsExtension) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{30}
}

func (x *SeatConstraintsExtension) GetDefaultSeatConstraint() *SeatConstraints {
	if x != nil {
		return x.DefaultSeatConstraint
	}
	return nil
}

func (x *SeatConstraintsExtension) GetAccountSeatConstraints() map[uint64]*SeatConstraints {
	if x != nil {
		return x.AccountSeatConstraints
	}
	return nil
}

// Next available tag: 3
type BidRequestExtensions_AugmentorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Augmentor identifier, used for targeting
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Array of Augmentor segments
	Segment []*BidRequestExtensions_AugmentorData_Segment `protobuf:"bytes,2,rep,name=segment" json:"segment,omitempty"`
}

func (x *BidRequestExtensions_AugmentorData) Reset() {
	*x = BidRequestExtensions_AugmentorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExtensions_AugmentorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExtensions_AugmentorData) ProtoMessage() {}

func (x *BidRequestExtensions_AugmentorData) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExtensions_AugmentorData.ProtoReflect.Descriptor instead.
func (*BidRequestExtensions_AugmentorData) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BidRequestExtensions_AugmentorData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequestExtensions_AugmentorData) GetSegment() []*BidRequestExtensions_AugmentorData_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// Next available tag: 3
// Segment along with augmentor's ID allows augmentor based targeting
type BidRequestExtensions_AugmentorData_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a augmentor’s segment
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// String representing the value of the segment.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *BidRequestExtensions_AugmentorData_Segment) Reset() {
	*x = BidRequestExtensions_AugmentorData_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExtensions_AugmentorData_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExtensions_AugmentorData_Segment) ProtoMessage() {}

func (x *BidRequestExtensions_AugmentorData_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExtensions_AugmentorData_Segment.ProtoReflect.Descriptor instead.
func (*BidRequestExtensions_AugmentorData_Segment) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *BidRequestExtensions_AugmentorData_Segment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequestExtensions_AugmentorData_Segment) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Next available tag: 3
type UserExtensions_MatchedUserGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedUserIds []string `protobuf:"bytes,1,rep,name=matched_user_ids,json=matchedUserIds" json:"matched_user_ids,omitempty"`
	PartnerHandle  *string  `protobuf:"bytes,2,opt,name=partner_handle,json=partnerHandle" json:"partner_handle,omitempty"`
}

func (x *UserExtensions_MatchedUserGroups) Reset() {
	*x = UserExtensions_MatchedUserGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_openrtb_extension_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExtensions_MatchedUserGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExtensions_MatchedUserGroups) ProtoMessage() {}

func (x *UserExtensions_MatchedUserGroups) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_openrtb_extension_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExtensions_MatchedUserGroups.ProtoReflect.Descriptor instead.
func (*UserExtensions_MatchedUserGroups) Descriptor() ([]byte, []int) {
	return file_beeswax_openrtb_extension_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UserExtensions_MatchedUserGroups) GetMatchedUserIds() []string {
	if x != nil {
		return x.MatchedUserIds
	}
	return nil
}

func (x *UserExtensions_MatchedUserGroups) GetPartnerHandle() string {
	if x != nil && x.PartnerHandle != nil {
		return *x.PartnerHandle
	}
	return ""
}

var File_beeswax_openrtb_extension_proto protoreflect.FileDescriptor

var file_beeswax_openrtb_extension_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x1a, 0x1a, 0x62, 0x65, 0x65, 0x73,
	0x77, 0x61, 0x78, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x65,
	0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x70, 0x6d, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xb9, 0x09, 0x0a, 0x14, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x28, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x7a, 0x7a, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x75, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a,
	0x0b, 0x69, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x6d, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x4e,
	0x65, 0x78, 0x75, 0x73, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6e, 0x65, 0x78, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x64, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x64, 0x78, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x61, 0x64, 0x78, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x64, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x54, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x61, 0x64, 0x73, 0x54, 0x78, 0x74, 0x1a, 0x9f, 0x01, 0x0a, 0x0d, 0x41, 0x75,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x0a, 0x07, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0c,
	0x41, 0x64, 0x73, 0x54, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x53, 0x5f, 0x54, 0x58, 0x54, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x53, 0x5f, 0x54, 0x58,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x07, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xf5, 0x05, 0x0a,
	0x14, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41,
	0x64, 0x78, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x64, 0x78, 0x12, 0x42, 0x0a, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54,
	0x0a, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x65, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x62, 0x61, 0x70,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x05, 0x62, 0x61, 0x70,
	0x69, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x58, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x49,
	0x4e, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52,
	0x0a, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x42,
	0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x22, 0x1d, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x22, 0x1a, 0x0a, 0x0d, 0x50, 0x4d, 0x50, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x54, 0x0a, 0x14,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x64, 0x78, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x61, 0x64, 0x78, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x22, 0x1b, 0x0a, 0x0e, 0x53, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22,
	0x1a, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1e, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1f, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xcf, 0x04, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x43, 0x0a, 0x1c, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x4e, 0x41, 0x52, 0x19, 0x61, 0x75, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x10, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x19, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x17,
	0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x0b, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x73, 0x12, 0x27,
	0x0a, 0x0d, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x73, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0c, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x4f, 0x73, 0x76, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0e, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31,
	0x52, 0x0d, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6b, 0x65, 0x12,
	0x67, 0x0a, 0x14, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x52, 0x13, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x87,
	0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x41, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x64, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2a, 0x09, 0x08,
	0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x20, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a,
	0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x60, 0x0a, 0x0d, 0x47, 0x65,
	0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x41, 0x64, 0x78, 0x47, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x61, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x4f, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x11, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x10, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1e, 0x0a,
	0x11, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x75, 0x0a,
	0x15, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x67, 0x64, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x04, 0x67, 0x64, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x64, 0x70,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0x22, 0x0a, 0x15, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08,
	0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1e, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08,
	0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1a, 0x0a, 0x0d, 0x42, 0x69, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0xd2, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x03, 0x30, 0x30, 0x30, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x06, 0x30,
	0x30, 0x30, 0x2f, 0x30, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x65, 0x74,
	0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x30, 0x30, 0x30, 0x52, 0x05, 0x6d,
	0x65, 0x74, 0x72, 0x6f, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x56, 0x69,
	0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x16, 0x41, 0x64, 0x78,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5f, 0x0a, 0x16, 0x41, 0x64, 0x78, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x41, 0x64,
	0x78, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x41, 0x64, 0x78, 0x47, 0x65, 0x6f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6d, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x64, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x4e, 0x65, 0x78,
	0x75, 0x73, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xca, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x17,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x77,
	0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x63, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x50, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
}

var (
	file_beeswax_openrtb_extension_proto_rawDescOnce sync.Once
	file_beeswax_openrtb_extension_proto_rawDescData = file_beeswax_openrtb_extension_proto_rawDesc
)

func file_beeswax_openrtb_extension_proto_rawDescGZIP() []byte {
	file_beeswax_openrtb_extension_proto_rawDescOnce.Do(func() {
		file_beeswax_openrtb_extension_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_openrtb_extension_proto_rawDescData)
	})
	return file_beeswax_openrtb_extension_proto_rawDescData
}

var file_beeswax_openrtb_extension_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beeswax_openrtb_extension_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_beeswax_openrtb_extension_proto_goTypes = []interface{}{
	(BidRequestExtensions_AdsTxtStatus)(0),             // 0: openrtb.BidRequestExtensions.AdsTxtStatus
	(VideoExtensions_PlacementType)(0),                 // 1: openrtb.VideoExtensions.PlacementType
	(*AdvertiserInfo)(nil),                             // 2: openrtb.AdvertiserInfo
	(*Dimension)(nil),                                  // 3: openrtb.Dimension
	(*BidRequestExtensions)(nil),                       // 4: openrtb.BidRequestExtensions
	(*ImpressionExtensions)(nil),                       // 5: openrtb.ImpressionExtensions
	(*BannerExtensions)(nil),                           // 6: openrtb.BannerExtensions
	(*VideoExtensions)(nil),                            // 7: openrtb.VideoExtensions
	(*NativeExtensions)(nil),                           // 8: openrtb.NativeExtensions
	(*PMPExtensions)(nil),                              // 9: openrtb.PMPExtensions
	(*DirectDealExtensions)(nil),                       // 10: openrtb.DirectDealExtensions
	(*SiteExtensions)(nil),                             // 11: openrtb.SiteExtensions
	(*AppExtensions)(nil),                              // 12: openrtb.AppExtensions
	(*ContentExtensions)(nil),                          // 13: openrtb.ContentExtensions
	(*ProducerExtensions)(nil),                         // 14: openrtb.ProducerExtensions
	(*DeviceExtensions)(nil),                           // 15: openrtb.DeviceExtensions
	(*UserExtensions)(nil),                             // 16: openrtb.UserExtensions
	(*PublisherExtensions)(nil),                        // 17: openrtb.PublisherExtensions
	(*GeoExtensions)(nil),                              // 18: openrtb.GeoExtensions
	(*DataExtensions)(nil),                             // 19: openrtb.DataExtensions
	(*SegmentExtensions)(nil),                          // 20: openrtb.SegmentExtensions
	(*RegulationsExtensions)(nil),                      // 21: openrtb.RegulationsExtensions
	(*BidResponseExtensions)(nil),                      // 22: openrtb.BidResponseExtensions
	(*SeatBidExtensions)(nil),                          // 23: openrtb.SeatBidExtensions
	(*BidExtensions)(nil),                              // 24: openrtb.BidExtensions
	(*TargetingGeoExtension)(nil),                      // 25: openrtb.TargetingGeoExtension
	(*ViewabilityExtensions)(nil),                      // 26: openrtb.ViewabilityExtensions
	(*AdxBidRequestExtension)(nil),                     // 27: openrtb.AdxBidRequestExtension
	(*AdxDirectDealExtension)(nil),                     // 28: openrtb.AdxDirectDealExtension
	(*AdxImpressionExtension)(nil),                     // 29: openrtb.AdxImpressionExtension
	(*AdxGeoExtension)(nil),                            // 30: openrtb.AdxGeoExtension
	(*AppNexusBidRequestExtension)(nil),                // 31: openrtb.AppNexusBidRequestExtension
	(*SeatConstraintsExtension)(nil),                   // 32: openrtb.SeatConstraintsExtension
	(*BidRequestExtensions_AugmentorData)(nil),         // 33: openrtb.BidRequestExtensions.AugmentorData
	(*BidRequestExtensions_AugmentorData_Segment)(nil), // 34: openrtb.BidRequestExtensions.AugmentorData.Segment
	(*UserExtensions_MatchedUserGroups)(nil),           // 35: openrtb.UserExtensions.MatchedUserGroups
	nil,                                                // 36: openrtb.SeatConstraintsExtension.AccountSeatConstraintsEntry
	(Enums_Inventory_Source)(0),                        // 37: openrtb.Enums.Inventory.Source
	(*base.EventId)(nil),                               // 38: base.EventId
	(Enums_Inventory_ImpressionTracker)(0),             // 39: openrtb.Enums.Inventory.ImpressionTracker
	(Enums_Inventory_SupplierClickTracker)(0),          // 40: openrtb.Enums.Inventory.SupplierClickTracker
	(Enums_Inventory_PlacementType)(0),                 // 41: openrtb.Enums.Inventory.PlacementType
	(Enums_Inventory_EnvironmentType)(0),               // 42: openrtb.Enums.Inventory.EnvironmentType
	(Enums_BidRequest_Impression_ApiFramework)(0),      // 43: openrtb.Enums.BidRequest.Impression.ApiFramework
	(CreativeAttribute)(0),                             // 44: openrtb.CreativeAttribute
	(Enums_BidRequest_Device_DeviceType)(0),            // 45: openrtb.Enums.BidRequest.Device.DeviceType
	(Enums_BidRequest_User_UserIdType)(0),              // 46: openrtb.Enums.BidRequest.User.UserIdType
	(Flag)(0),                                          // 47: openrtb.Flag
	(Enums_BidRequest_Geo_LocationType)(0),             // 48: openrtb.Enums.BidRequest.Geo.LocationType
	(*SeatConstraints)(nil),                            // 49: openrtb.SeatConstraints
}
var file_beeswax_openrtb_extension_proto_depIdxs = []int32{
	37, // 0: openrtb.BidRequestExtensions.inventory_source:type_name -> openrtb.Enums.Inventory.Source
	38, // 1: openrtb.BidRequestExtensions.auction_id:type_name -> base.EventId
	25, // 2: openrtb.BidRequestExtensions.targeting_geo:type_name -> openrtb.TargetingGeoExtension
	33, // 3: openrtb.BidRequestExtensions.augmentor_data:type_name -> openrtb.BidRequestExtensions.AugmentorData
	39, // 4: openrtb.BidRequestExtensions.imp_tracker:type_name -> openrtb.Enums.Inventory.ImpressionTracker
	40, // 5: openrtb.BidRequestExtensions.supplier_click_tracker:type_name -> openrtb.Enums.Inventory.SupplierClickTracker
	31, // 6: openrtb.BidRequestExtensions.appnexus:type_name -> openrtb.AppNexusBidRequestExtension
	27, // 7: openrtb.BidRequestExtensions.adx:type_name -> openrtb.AdxBidRequestExtension
	0,  // 8: openrtb.BidRequestExtensions.ads_txt:type_name -> openrtb.BidRequestExtensions.AdsTxtStatus
	41, // 9: openrtb.ImpressionExtensions.placement_type:type_name -> openrtb.Enums.Inventory.PlacementType
	42, // 10: openrtb.ImpressionExtensions.environment_type:type_name -> openrtb.Enums.Inventory.EnvironmentType
	2,  // 11: openrtb.ImpressionExtensions.advertiser_info:type_name -> openrtb.AdvertiserInfo
	26, // 12: openrtb.ImpressionExtensions.viewability:type_name -> openrtb.ViewabilityExtensions
	32, // 13: openrtb.ImpressionExtensions.seat_constraints:type_name -> openrtb.SeatConstraintsExtension
	29, // 14: openrtb.ImpressionExtensions.adx:type_name -> openrtb.AdxImpressionExtension
	43, // 15: openrtb.BannerExtensions.bapis:type_name -> openrtb.Enums.BidRequest.Impression.ApiFramework
	44, // 16: openrtb.BannerExtensions.required_attrs:type_name -> openrtb.CreativeAttribute
	3,  // 17: openrtb.BannerExtensions.additional_dimensions:type_name -> openrtb.Dimension
	44, // 18: openrtb.VideoExtensions.required_attrs:type_name -> openrtb.CreativeAttribute
	1,  // 19: openrtb.VideoExtensions.placement_type:type_name -> openrtb.VideoExtensions.PlacementType
	28, // 20: openrtb.DirectDealExtensions.adx:type_name -> openrtb.AdxDirectDealExtension
	45, // 21: openrtb.DeviceExtensions.augmented_devicetype:type_name -> openrtb.Enums.BidRequest.Device.DeviceType
	46, // 22: openrtb.UserExtensions.user_id_type:type_name -> openrtb.Enums.BidRequest.User.UserIdType
	35, // 23: openrtb.UserExtensions.matched_user_groups:type_name -> openrtb.UserExtensions.MatchedUserGroups
	30, // 24: openrtb.GeoExtensions.adx:type_name -> openrtb.AdxGeoExtension
	47, // 25: openrtb.RegulationsExtensions.gdpr:type_name -> openrtb.Flag
	48, // 26: openrtb.TargetingGeoExtension.type:type_name -> openrtb.Enums.BidRequest.Geo.LocationType
	49, // 27: openrtb.SeatConstraintsExtension.default_seat_constraint:type_name -> openrtb.SeatConstraints
	36, // 28: openrtb.SeatConstraintsExtension.account_seat_constraints:type_name -> openrtb.SeatConstraintsExtension.AccountSeatConstraintsEntry
	34, // 29: openrtb.BidRequestExtensions.AugmentorData.segment:type_name -> openrtb.BidRequestExtensions.AugmentorData.Segment
	49, // 30: openrtb.SeatConstraintsExtension.AccountSeatConstraintsEntry.value:type_name -> openrtb.SeatConstraints
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_beeswax_openrtb_extension_proto_init() }
func file_beeswax_openrtb_extension_proto_init() {
	if File_beeswax_openrtb_extension_proto != nil {
		return
	}
	file_beeswax_openrtb_openrtb_common_proto_init()
	file_beeswax_openrtb_seat_constraints_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beeswax_openrtb_extension_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertiserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMPExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectDealExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulationsExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponseExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBidExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetingGeoExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewabilityExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdxBidRequestExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdxDirectDealExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdxImpressionExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdxGeoExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppNexusBidRequestExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatConstraintsExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExtensions_AugmentorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExtensions_AugmentorData_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_openrtb_extension_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExtensions_MatchedUserGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_openrtb_extension_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_openrtb_extension_proto_goTypes,
		DependencyIndexes: file_beeswax_openrtb_extension_proto_depIdxs,
		EnumInfos:         file_beeswax_openrtb_extension_proto_enumTypes,
		MessageInfos:      file_beeswax_openrtb_extension_proto_msgTypes,
	}.Build()
	File_beeswax_openrtb_extension_proto = out.File
	file_beeswax_openrtb_extension_proto_rawDesc = nil
	file_beeswax_openrtb_extension_proto_goTypes = nil
	file_beeswax_openrtb_extension_proto_depIdxs = nil
}
