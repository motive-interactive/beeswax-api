// Copyright 2015, Beeswax.IO Inc.
//
// Protocol buffer defining ad log objects such as
// Bids, Impressions, Clicks, Conversions etc.

// The "auctionid" uniquely identifies each bid request in the system and
// should be used to join with other events in the system like RequestLogMessage,
// ImpressionLogMessage, ClickLogMessage, ActivityLogMessage, etc.

// The "user_id" uniquely identifies the user in the system and should be used
// for User-level targeting, modeling, etc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/logs/ad_log.proto

package logs

import (
	proto "github.com/golang/protobuf/proto"
	base "github.com/motive-interactive/beeswax-api/beeswax/base"
	bid "github.com/motive-interactive/beeswax-api/beeswax/bid"
	currency "github.com/motive-interactive/beeswax-api/beeswax/currency"
	openrtb "github.com/motive-interactive/beeswax-api/beeswax/openrtb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ClickLogMessage_Type int32

const (
	ClickLogMessage_UNKNOWN   ClickLogMessage_Type = 0
	ClickLogMessage_REGULAR   ClickLogMessage_Type = 1 // clicks received from creatives
	ClickLogMessage_COMPANION ClickLogMessage_Type = 2 // clicks received from companion click through url
)

// Enum value maps for ClickLogMessage_Type.
var (
	ClickLogMessage_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "REGULAR",
		2: "COMPANION",
	}
	ClickLogMessage_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"REGULAR":   1,
		"COMPANION": 2,
	}
)

func (x ClickLogMessage_Type) Enum() *ClickLogMessage_Type {
	p := new(ClickLogMessage_Type)
	*p = x
	return p
}

func (x ClickLogMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickLogMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_logs_ad_log_proto_enumTypes[0].Descriptor()
}

func (ClickLogMessage_Type) Type() protoreflect.EnumType {
	return &file_beeswax_logs_ad_log_proto_enumTypes[0]
}

func (x ClickLogMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClickLogMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClickLogMessage_Type(num)
	return nil
}

// Deprecated: Use ClickLogMessage_Type.Descriptor instead.
func (ClickLogMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{2, 0}
}

type ActivityLogMessage_Type int32

const (
	ActivityLogMessage_START          ActivityLogMessage_Type = 1  // Video Playback Start
	ActivityLogMessage_Q1             ActivityLogMessage_Type = 2  // Video Playback 25% complete
	ActivityLogMessage_MID            ActivityLogMessage_Type = 3  // Video Playback 50% complete
	ActivityLogMessage_Q3             ActivityLogMessage_Type = 4  // Video Playback 75% complete
	ActivityLogMessage_COMPLETE       ActivityLogMessage_Type = 5  // Video Playback complete
	ActivityLogMessage_SKIP           ActivityLogMessage_Type = 6  // Video Playback skipped
	ActivityLogMessage_MUTE           ActivityLogMessage_Type = 7  // Video Playback muted
	ActivityLogMessage_UNMUTE         ActivityLogMessage_Type = 8  // Video Playback unmuted
	ActivityLogMessage_PAUSE          ActivityLogMessage_Type = 9  // Video Playback paused
	ActivityLogMessage_RESUME         ActivityLogMessage_Type = 10 // Video Playback resumed
	ActivityLogMessage_FULLSCREEN     ActivityLogMessage_Type = 11 // Video Playback full screen
	ActivityLogMessage_CLOSE          ActivityLogMessage_Type = 12 // Video Playback closed
	ActivityLogMessage_COMPANION_VIEW ActivityLogMessage_Type = 13 // Companion view
	// Deprecated. Companion click will be tracked as ClickEvent instead of ActivityEvent
	// This should be eventually removed by end of Q2 of 2017
	ActivityLogMessage_DEPRECATED_COMPANION_CLICK ActivityLogMessage_Type = 14 // Companion click
)

// Enum value maps for ActivityLogMessage_Type.
var (
	ActivityLogMessage_Type_name = map[int32]string{
		1:  "START",
		2:  "Q1",
		3:  "MID",
		4:  "Q3",
		5:  "COMPLETE",
		6:  "SKIP",
		7:  "MUTE",
		8:  "UNMUTE",
		9:  "PAUSE",
		10: "RESUME",
		11: "FULLSCREEN",
		12: "CLOSE",
		13: "COMPANION_VIEW",
		14: "DEPRECATED_COMPANION_CLICK",
	}
	ActivityLogMessage_Type_value = map[string]int32{
		"START":                      1,
		"Q1":                         2,
		"MID":                        3,
		"Q3":                         4,
		"COMPLETE":                   5,
		"SKIP":                       6,
		"MUTE":                       7,
		"UNMUTE":                     8,
		"PAUSE":                      9,
		"RESUME":                     10,
		"FULLSCREEN":                 11,
		"CLOSE":                      12,
		"COMPANION_VIEW":             13,
		"DEPRECATED_COMPANION_CLICK": 14,
	}
)

func (x ActivityLogMessage_Type) Enum() *ActivityLogMessage_Type {
	p := new(ActivityLogMessage_Type)
	*p = x
	return p
}

func (x ActivityLogMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityLogMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_beeswax_logs_ad_log_proto_enumTypes[1].Descriptor()
}

func (ActivityLogMessage_Type) Type() protoreflect.EnumType {
	return &file_beeswax_logs_ad_log_proto_enumTypes[1]
}

func (x ActivityLogMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActivityLogMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActivityLogMessage_Type(num)
	return nil
}

// Deprecated: Use ActivityLogMessage_Type.Descriptor instead.
func (ActivityLogMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{3, 0}
}

// Next Tag: 6
// RequestLogMessage is created for every incoming bid request from the exchange.
type RequestLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the auction per buzz_key.
	// There can be multiple impression definitions in a single bid request from the
	// inventory source; each one Beeswax actually bids on creates a unique auctionid.
	Auctionid       *base.EventId                   `protobuf:"bytes,1,opt,name=auctionid" json:"auctionid,omitempty"`
	InventorySource *openrtb.Enums_Inventory_Source `protobuf:"varint,2,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	Bidrequest      *openrtb.BidRequest             `protobuf:"bytes,3,opt,name=bidrequest" json:"bidrequest,omitempty"`
	// All the adcandidates that matched targeting, creative attribute
	// and budget filtering and finally sent to the exchange.
	Adcandidates []*bid.Adcandidate `protobuf:"bytes,4,rep,name=adcandidates" json:"adcandidates,omitempty"`
	// Only data from the winning bid is populated for agent_data.
	AgentData *bid.BidAgentResponse_AgentData `protobuf:"bytes,5,opt,name=agent_data,json=agentData" json:"agent_data,omitempty"`
}

func (x *RequestLogMessage) Reset() {
	*x = RequestLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLogMessage) ProtoMessage() {}

func (x *RequestLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLogMessage.ProtoReflect.Descriptor instead.
func (*RequestLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{0}
}

func (x *RequestLogMessage) GetAuctionid() *base.EventId {
	if x != nil {
		return x.Auctionid
	}
	return nil
}

func (x *RequestLogMessage) GetInventorySource() openrtb.Enums_Inventory_Source {
	if x != nil && x.InventorySource != nil {
		return *x.InventorySource
	}
	return openrtb.Enums_Inventory_UNKNOWN_SOURCE
}

func (x *RequestLogMessage) GetBidrequest() *openrtb.BidRequest {
	if x != nil {
		return x.Bidrequest
	}
	return nil
}

func (x *RequestLogMessage) GetAdcandidates() []*bid.Adcandidate {
	if x != nil {
		return x.Adcandidates
	}
	return nil
}

func (x *RequestLogMessage) GetAgentData() *bid.BidAgentResponse_AgentData {
	if x != nil {
		return x.AgentData
	}
	return nil
}

// Next Tag: 18
// ImpressionLogMessage is created for every won auction.
type ImpressionLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the auction per buzz_key.
	// There can be multiple impression definitions in a single bid request from the
	// inventory source; each one Beeswax actually bids on creates a unique auctionid.
	Auctionid *base.EventId `protobuf:"bytes,1,opt,name=auctionid" json:"auctionid,omitempty"`
	// NOTE: auction_id_str is an opaque unique id. Clients should not rely on the meaning
	// of elements within it or on the format of the id.
	AuctionidStr *string `protobuf:"bytes,12,opt,name=auctionid_str,json=auctionidStr" json:"auctionid_str,omitempty"`
	// The unique identifier of the bid request per buzz_key. This represents a BidRequest
	// received from an inventory source, which can contain 1 or more impression definitions.
	RequestidStr *string         `protobuf:"bytes,17,opt,name=requestid_str,json=requestidStr" json:"requestid_str,omitempty"`
	Adgroupid    *base.AdGroupId `protobuf:"bytes,2,opt,name=adgroupid" json:"adgroupid,omitempty"`
	CreativeId   *uint64         `protobuf:"varint,10,opt,name=creative_id,json=creativeId" json:"creative_id,omitempty"`
	AdvertiserId *uint64         `protobuf:"varint,11,opt,name=advertiser_id,json=advertiserId" json:"advertiser_id,omitempty"`
	// Exchange bid price is the final price submitted to exchange.
	ExchangeBidPriceMicrosUsd *uint64 `protobuf:"varint,9,opt,name=exchange_bid_price_micros_usd,json=exchangeBidPriceMicrosUsd" json:"exchange_bid_price_micros_usd,omitempty"`
	// Represents the bid price obtained from the bid agent.
	BidPriceMicrosUsd *uint64                         `protobuf:"varint,3,opt,name=bid_price_micros_usd,json=bidPriceMicrosUsd" json:"bid_price_micros_usd,omitempty"`
	InventorySource   *openrtb.Enums_Inventory_Source `protobuf:"varint,4,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	UserId            *string                         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// On GDPR requests, user_id field is omitted and user_id_hashed is populated instead.
	UserIdHashed *string `protobuf:"bytes,13,opt,name=user_id_hashed,json=userIdHashed" json:"user_id_hashed,omitempty"`
	// Represents the winning price in the auction.
	WinPriceMicrosUsd *uint64 `protobuf:"varint,6,opt,name=win_price_micros_usd,json=winPriceMicrosUsd" json:"win_price_micros_usd,omitempty"`
	RxTimestampUsecs  *uint64 `protobuf:"varint,7,opt,name=rx_timestamp_usecs,json=rxTimestampUsecs" json:"rx_timestamp_usecs,omitempty"`
	// Represents the win price in the bidder's currency, with the given exchange rate
	WinPrice   *currency.CurrencyTransaction       `protobuf:"bytes,16,opt,name=win_price,json=winPrice" json:"win_price,omitempty"`
	DataCenter *openrtb.Enums_Inventory_DataCenter `protobuf:"varint,8,opt,name=data_center,json=dataCenter,enum=openrtb.Enums_Inventory_DataCenter" json:"data_center,omitempty"`
	// When this field is set to true, it implies that Beeswax has determined that
	//  this request needs to comply with the GDPR terms and conditions.
	IsGdpr *bool `protobuf:"varint,14,opt,name=is_gdpr,json=isGdpr,def=0" json:"is_gdpr,omitempty"`
	// The raw IAB consent string or "daisybit" as provided in the incoming bid request.
	GdprConsentString *string `protobuf:"bytes,15,opt,name=gdpr_consent_string,json=gdprConsentString" json:"gdpr_consent_string,omitempty"`
}

// Default values for ImpressionLogMessage fields.
const (
	Default_ImpressionLogMessage_IsGdpr = bool(false)
)

func (x *ImpressionLogMessage) Reset() {
	*x = ImpressionLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionLogMessage) ProtoMessage() {}

func (x *ImpressionLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionLogMessage.ProtoReflect.Descriptor instead.
func (*ImpressionLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{1}
}

func (x *ImpressionLogMessage) GetAuctionid() *base.EventId {
	if x != nil {
		return x.Auctionid
	}
	return nil
}

func (x *ImpressionLogMessage) GetAuctionidStr() string {
	if x != nil && x.AuctionidStr != nil {
		return *x.AuctionidStr
	}
	return ""
}

func (x *ImpressionLogMessage) GetRequestidStr() string {
	if x != nil && x.RequestidStr != nil {
		return *x.RequestidStr
	}
	return ""
}

func (x *ImpressionLogMessage) GetAdgroupid() *base.AdGroupId {
	if x != nil {
		return x.Adgroupid
	}
	return nil
}

func (x *ImpressionLogMessage) GetCreativeId() uint64 {
	if x != nil && x.CreativeId != nil {
		return *x.CreativeId
	}
	return 0
}

func (x *ImpressionLogMessage) GetAdvertiserId() uint64 {
	if x != nil && x.AdvertiserId != nil {
		return *x.AdvertiserId
	}
	return 0
}

func (x *ImpressionLogMessage) GetExchangeBidPriceMicrosUsd() uint64 {
	if x != nil && x.ExchangeBidPriceMicrosUsd != nil {
		return *x.ExchangeBidPriceMicrosUsd
	}
	return 0
}

func (x *ImpressionLogMessage) GetBidPriceMicrosUsd() uint64 {
	if x != nil && x.BidPriceMicrosUsd != nil {
		return *x.BidPriceMicrosUsd
	}
	return 0
}

func (x *ImpressionLogMessage) GetInventorySource() openrtb.Enums_Inventory_Source {
	if x != nil && x.InventorySource != nil {
		return *x.InventorySource
	}
	return openrtb.Enums_Inventory_UNKNOWN_SOURCE
}

func (x *ImpressionLogMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ImpressionLogMessage) GetUserIdHashed() string {
	if x != nil && x.UserIdHashed != nil {
		return *x.UserIdHashed
	}
	return ""
}

func (x *ImpressionLogMessage) GetWinPriceMicrosUsd() uint64 {
	if x != nil && x.WinPriceMicrosUsd != nil {
		return *x.WinPriceMicrosUsd
	}
	return 0
}

func (x *ImpressionLogMessage) GetRxTimestampUsecs() uint64 {
	if x != nil && x.RxTimestampUsecs != nil {
		return *x.RxTimestampUsecs
	}
	return 0
}

func (x *ImpressionLogMessage) GetWinPrice() *currency.CurrencyTransaction {
	if x != nil {
		return x.WinPrice
	}
	return nil
}

func (x *ImpressionLogMessage) GetDataCenter() openrtb.Enums_Inventory_DataCenter {
	if x != nil && x.DataCenter != nil {
		return *x.DataCenter
	}
	return openrtb.Enums_Inventory_UNKNOWN
}

func (x *ImpressionLogMessage) GetIsGdpr() bool {
	if x != nil && x.IsGdpr != nil {
		return *x.IsGdpr
	}
	return Default_ImpressionLogMessage_IsGdpr
}

func (x *ImpressionLogMessage) GetGdprConsentString() string {
	if x != nil && x.GdprConsentString != nil {
		return *x.GdprConsentString
	}
	return ""
}

// Next Tag: 14
// ClickLogMessage is created for clicks received.
type ClickLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the auction per buzz_key.
	// There can be multiple impression definitions in a single bid request from the
	// inventory source; each one Beeswax actually bids on creates a unique auctionid.
	Auctionid *base.EventId `protobuf:"bytes,1,opt,name=auctionid" json:"auctionid,omitempty"`
	// NOTE: auction_id_str is an opaque unique id. Clients should not rely on the meaning
	// of elements within it or on the format of the id.
	AuctionidStr *string `protobuf:"bytes,9,opt,name=auctionid_str,json=auctionidStr" json:"auctionid_str,omitempty"`
	// The unique identifier of the bid request per buzz_key. This represents a BidRequest
	// received from an inventory source, which can contain 1 or more impression definitions.
	RequestidStr    *string                         `protobuf:"bytes,13,opt,name=requestid_str,json=requestidStr" json:"requestid_str,omitempty"`
	Adgroupid       *base.AdGroupId                 `protobuf:"bytes,2,opt,name=adgroupid" json:"adgroupid,omitempty"`
	CreativeId      *uint64                         `protobuf:"varint,7,opt,name=creative_id,json=creativeId" json:"creative_id,omitempty"`
	AdvertiserId    *uint64                         `protobuf:"varint,8,opt,name=advertiser_id,json=advertiserId" json:"advertiser_id,omitempty"`
	InventorySource *openrtb.Enums_Inventory_Source `protobuf:"varint,3,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	UserId          *string                         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// On GDPR requests, user_id field is omitted and user_id_hashed is populated instead.
	UserIdHashed *string `protobuf:"bytes,11,opt,name=user_id_hashed,json=userIdHashed" json:"user_id_hashed,omitempty"`
	// Represents optional data sent by the customer.
	UserData         *string               `protobuf:"bytes,5,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	RxTimestampUsecs *uint64               `protobuf:"varint,6,opt,name=rx_timestamp_usecs,json=rxTimestampUsecs" json:"rx_timestamp_usecs,omitempty"`
	ClickType        *ClickLogMessage_Type `protobuf:"varint,10,opt,name=click_type,json=clickType,enum=logs.ClickLogMessage_Type,def=1" json:"click_type,omitempty"`
	// When this field is set to true, it implies that Beeswax has determined that
	//  this request needs to comply with the GDPR terms and conditions.
	IsGdpr *bool `protobuf:"varint,12,opt,name=is_gdpr,json=isGdpr,def=0" json:"is_gdpr,omitempty"`
}

// Default values for ClickLogMessage fields.
const (
	Default_ClickLogMessage_ClickType = ClickLogMessage_REGULAR
	Default_ClickLogMessage_IsGdpr    = bool(false)
)

func (x *ClickLogMessage) Reset() {
	*x = ClickLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickLogMessage) ProtoMessage() {}

func (x *ClickLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickLogMessage.ProtoReflect.Descriptor instead.
func (*ClickLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{2}
}

func (x *ClickLogMessage) GetAuctionid() *base.EventId {
	if x != nil {
		return x.Auctionid
	}
	return nil
}

func (x *ClickLogMessage) GetAuctionidStr() string {
	if x != nil && x.AuctionidStr != nil {
		return *x.AuctionidStr
	}
	return ""
}

func (x *ClickLogMessage) GetRequestidStr() string {
	if x != nil && x.RequestidStr != nil {
		return *x.RequestidStr
	}
	return ""
}

func (x *ClickLogMessage) GetAdgroupid() *base.AdGroupId {
	if x != nil {
		return x.Adgroupid
	}
	return nil
}

func (x *ClickLogMessage) GetCreativeId() uint64 {
	if x != nil && x.CreativeId != nil {
		return *x.CreativeId
	}
	return 0
}

func (x *ClickLogMessage) GetAdvertiserId() uint64 {
	if x != nil && x.AdvertiserId != nil {
		return *x.AdvertiserId
	}
	return 0
}

func (x *ClickLogMessage) GetInventorySource() openrtb.Enums_Inventory_Source {
	if x != nil && x.InventorySource != nil {
		return *x.InventorySource
	}
	return openrtb.Enums_Inventory_UNKNOWN_SOURCE
}

func (x *ClickLogMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ClickLogMessage) GetUserIdHashed() string {
	if x != nil && x.UserIdHashed != nil {
		return *x.UserIdHashed
	}
	return ""
}

func (x *ClickLogMessage) GetUserData() string {
	if x != nil && x.UserData != nil {
		return *x.UserData
	}
	return ""
}

func (x *ClickLogMessage) GetRxTimestampUsecs() uint64 {
	if x != nil && x.RxTimestampUsecs != nil {
		return *x.RxTimestampUsecs
	}
	return 0
}

func (x *ClickLogMessage) GetClickType() ClickLogMessage_Type {
	if x != nil && x.ClickType != nil {
		return *x.ClickType
	}
	return Default_ClickLogMessage_ClickType
}

func (x *ClickLogMessage) GetIsGdpr() bool {
	if x != nil && x.IsGdpr != nil {
		return *x.IsGdpr
	}
	return Default_ClickLogMessage_IsGdpr
}

// Next Tag: 14
// ActivityLogMessage is created for video and activity events
// like video "START", "SKIP", etc.
type ActivityLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the auction per buzz_key.
	// There can be multiple impression definitions in a single bid request from the
	// inventory source; each one Beeswax actually bids on creates a unique auctionid.
	Auctionid *base.EventId `protobuf:"bytes,1,opt,name=auctionid" json:"auctionid,omitempty"`
	// NOTE: auction_id_str is an opaque unique id. Clients should not rely on the meaning
	// of elements within it or on the format of the id.
	AuctionidStr *string `protobuf:"bytes,10,opt,name=auctionid_str,json=auctionidStr" json:"auctionid_str,omitempty"`
	// The unique identifier of the bid request per buzz_key. This represents a BidRequest
	// received from an inventory source, which can contain 1 or more impression definitions.
	RequestidStr    *string                         `protobuf:"bytes,13,opt,name=requestid_str,json=requestidStr" json:"requestid_str,omitempty"`
	Adgroupid       *base.AdGroupId                 `protobuf:"bytes,2,opt,name=adgroupid" json:"adgroupid,omitempty"`
	CreativeId      *uint64                         `protobuf:"varint,8,opt,name=creative_id,json=creativeId" json:"creative_id,omitempty"`
	AdvertiserId    *uint64                         `protobuf:"varint,9,opt,name=advertiser_id,json=advertiserId" json:"advertiser_id,omitempty"`
	InventorySource *openrtb.Enums_Inventory_Source `protobuf:"varint,3,opt,name=inventory_source,json=inventorySource,enum=openrtb.Enums_Inventory_Source" json:"inventory_source,omitempty"`
	Type            *ActivityLogMessage_Type        `protobuf:"varint,4,opt,name=type,enum=logs.ActivityLogMessage_Type" json:"type,omitempty"`
	UserId          *string                         `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// On GDPR requests, user_id field is omitted and user_id_hashed is populated instead.
	UserIdHashed *string `protobuf:"bytes,11,opt,name=user_id_hashed,json=userIdHashed" json:"user_id_hashed,omitempty"`
	// Represents optional data sent by the customer.
	UserData         *string `protobuf:"bytes,6,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	RxTimestampUsecs *uint64 `protobuf:"varint,7,opt,name=rx_timestamp_usecs,json=rxTimestampUsecs" json:"rx_timestamp_usecs,omitempty"`
	// When this field is set to true, it implies that Beeswax has determined that
	//  this request needs to comply with the GDPR terms and conditions.
	IsGdpr *bool `protobuf:"varint,12,opt,name=is_gdpr,json=isGdpr,def=0" json:"is_gdpr,omitempty"`
}

// Default values for ActivityLogMessage fields.
const (
	Default_ActivityLogMessage_IsGdpr = bool(false)
)

func (x *ActivityLogMessage) Reset() {
	*x = ActivityLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLogMessage) ProtoMessage() {}

func (x *ActivityLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLogMessage.ProtoReflect.Descriptor instead.
func (*ActivityLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{3}
}

func (x *ActivityLogMessage) GetAuctionid() *base.EventId {
	if x != nil {
		return x.Auctionid
	}
	return nil
}

func (x *ActivityLogMessage) GetAuctionidStr() string {
	if x != nil && x.AuctionidStr != nil {
		return *x.AuctionidStr
	}
	return ""
}

func (x *ActivityLogMessage) GetRequestidStr() string {
	if x != nil && x.RequestidStr != nil {
		return *x.RequestidStr
	}
	return ""
}

func (x *ActivityLogMessage) GetAdgroupid() *base.AdGroupId {
	if x != nil {
		return x.Adgroupid
	}
	return nil
}

func (x *ActivityLogMessage) GetCreativeId() uint64 {
	if x != nil && x.CreativeId != nil {
		return *x.CreativeId
	}
	return 0
}

func (x *ActivityLogMessage) GetAdvertiserId() uint64 {
	if x != nil && x.AdvertiserId != nil {
		return *x.AdvertiserId
	}
	return 0
}

func (x *ActivityLogMessage) GetInventorySource() openrtb.Enums_Inventory_Source {
	if x != nil && x.InventorySource != nil {
		return *x.InventorySource
	}
	return openrtb.Enums_Inventory_UNKNOWN_SOURCE
}

func (x *ActivityLogMessage) GetType() ActivityLogMessage_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ActivityLogMessage_START
}

func (x *ActivityLogMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ActivityLogMessage) GetUserIdHashed() string {
	if x != nil && x.UserIdHashed != nil {
		return *x.UserIdHashed
	}
	return ""
}

func (x *ActivityLogMessage) GetUserData() string {
	if x != nil && x.UserData != nil {
		return *x.UserData
	}
	return ""
}

func (x *ActivityLogMessage) GetRxTimestampUsecs() uint64 {
	if x != nil && x.RxTimestampUsecs != nil {
		return *x.RxTimestampUsecs
	}
	return 0
}

func (x *ActivityLogMessage) GetIsGdpr() bool {
	if x != nil && x.IsGdpr != nil {
		return *x.IsGdpr
	}
	return Default_ActivityLogMessage_IsGdpr
}

// Next Tag: 11
// Conversion tag urls can be created using the Buzz API.
// Whenever a conversion tag fires, Beeswax records that event into a
// ConversionLogMessage.
// Currently, there are two scenarios in which a conversion tag may fire.
// 1. Conversion Events
//   This occurs whenever the customer trafficks the conversion tag on a site/app
//   and the tag fires whenever a user visits the site/app. For example, a conversion tag
//   may be trafficked on the shopping cart page of a retail portal.
//   For conversion events, the following fields are always expected to be populated:
//   a) tag_id
//   b) user_id
//
// 2 Postback Events
//  In this scenario, the conversion attribution is determined by a third party and the
//  conversion tag is used by the third party to credit a particular impression/click for
//  the conversion. For postback events, the following fields are always expected to be
//  populated:
//   a) tag_id
//   b) auctionid
//
type ConversionLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Customer defined transaction value e.g. Price in shopping cart.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Usually, the number of items purchased
	Order *string `protobuf:"bytes,3,opt,name=order" json:"order,omitempty"`
	// Customer defined unique join key. Also works as cache buster.
	Ord *string `protobuf:"bytes,4,opt,name=ord" json:"ord,omitempty"`
	// Event Id corresponding to the tag created via the Buzz API
	TagId *int32 `protobuf:"varint,5,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	// Unique buzz_key of the customer.
	BuzzKey *string `protobuf:"bytes,6,opt,name=buzz_key,json=buzzKey" json:"buzz_key,omitempty"`
	// Timestamp (usecs) at which event was received by Beeswax.
	RxTimestamp *uint64 `protobuf:"varint,7,opt,name=rx_timestamp,json=rxTimestamp" json:"rx_timestamp,omitempty"`
	// auction id (Filled only for postback events)
	Auctionid *string `protobuf:"bytes,8,opt,name=auctionid" json:"auctionid,omitempty"`
	// When this field is set to true, it implies that Beeswax has determined that
	//  this request needs to comply with the GDPR terms and conditions.
	IsGdpr *bool `protobuf:"varint,10,opt,name=is_gdpr,json=isGdpr,def=0" json:"is_gdpr,omitempty"`
}

// Default values for ConversionLogMessage fields.
const (
	Default_ConversionLogMessage_IsGdpr = bool(false)
)

func (x *ConversionLogMessage) Reset() {
	*x = ConversionLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionLogMessage) ProtoMessage() {}

func (x *ConversionLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionLogMessage.ProtoReflect.Descriptor instead.
func (*ConversionLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{4}
}

func (x *ConversionLogMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ConversionLogMessage) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ConversionLogMessage) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ConversionLogMessage) GetOrd() string {
	if x != nil && x.Ord != nil {
		return *x.Ord
	}
	return ""
}

func (x *ConversionLogMessage) GetTagId() int32 {
	if x != nil && x.TagId != nil {
		return *x.TagId
	}
	return 0
}

func (x *ConversionLogMessage) GetBuzzKey() string {
	if x != nil && x.BuzzKey != nil {
		return *x.BuzzKey
	}
	return ""
}

func (x *ConversionLogMessage) GetRxTimestamp() uint64 {
	if x != nil && x.RxTimestamp != nil {
		return *x.RxTimestamp
	}
	return 0
}

func (x *ConversionLogMessage) GetAuctionid() string {
	if x != nil && x.Auctionid != nil {
		return *x.Auctionid
	}
	return ""
}

func (x *ConversionLogMessage) GetIsGdpr() bool {
	if x != nil && x.IsGdpr != nil {
		return *x.IsGdpr
	}
	return Default_ConversionLogMessage_IsGdpr
}

// Note: BeeswaxIO DOES NOT aggregate the ad log objects on same "auction_id";
// All events are logged to Kinesis as and when they arrive in the system.
type AdLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request    *RequestLogMessage    `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Impression *ImpressionLogMessage `protobuf:"bytes,2,opt,name=impression" json:"impression,omitempty"`
	// click field will be deprecated, start using clicks (field 6) instead
	//
	// Deprecated: Do not use.
	Click      *ClickLogMessage      `protobuf:"bytes,3,opt,name=click" json:"click,omitempty"`
	Activity   []*ActivityLogMessage `protobuf:"bytes,4,rep,name=activity" json:"activity,omitempty"`
	Conversion *ConversionLogMessage `protobuf:"bytes,5,opt,name=conversion" json:"conversion,omitempty"`
	// List of all possible clicks, regular and companion
	Clicks []*ClickLogMessage `protobuf:"bytes,6,rep,name=clicks" json:"clicks,omitempty"`
}

func (x *AdLogMessage) Reset() {
	*x = AdLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_logs_ad_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdLogMessage) ProtoMessage() {}

func (x *AdLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_logs_ad_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdLogMessage.ProtoReflect.Descriptor instead.
func (*AdLogMessage) Descriptor() ([]byte, []int) {
	return file_beeswax_logs_ad_log_proto_rawDescGZIP(), []int{5}
}

func (x *AdLogMessage) GetRequest() *RequestLogMessage {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AdLogMessage) GetImpression() *ImpressionLogMessage {
	if x != nil {
		return x.Impression
	}
	return nil
}

// Deprecated: Do not use.
func (x *AdLogMessage) GetClick() *ClickLogMessage {
	if x != nil {
		return x.Click
	}
	return nil
}

func (x *AdLogMessage) GetActivity() []*ActivityLogMessage {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *AdLogMessage) GetConversion() *ConversionLogMessage {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *AdLogMessage) GetClicks() []*ClickLogMessage {
	if x != nil {
		return x.Clicks
	}
	return nil
}

var File_beeswax_logs_ad_log_proto protoreflect.FileDescriptor

var file_beeswax_logs_ad_log_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x61,
	0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x1a, 0x1d, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x62, 0x69, 0x64, 0x2f, 0x61,
	0x64, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x62, 0x69, 0x64, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x65, 0x65,
	0x73, 0x77, 0x61, 0x78, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61,
	0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x62, 0x69, 0x64, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x64, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x41, 0x64,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69,
	0x64, 0x2e, 0x42, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x06, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x09, 0x61, 0x64, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x55, 0x73, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x55, 0x73, 0x64, 0x12,
	0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x75,
	0x73, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x55, 0x73, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x65, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x67, 0x64, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x47, 0x64, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe8, 0x04, 0x0a, 0x0f,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x09, 0x61, 0x64, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x72, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x65, 0x63,
	0x73, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x67, 0x64, 0x70, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69,
	0x73, 0x47, 0x64, 0x70, 0x72, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xea, 0x05, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x72, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x65,
	0x63, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x67, 0x64, 0x70, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x47, 0x64,
	0x70, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x31, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x49, 0x44, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x33, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x54, 0x45, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55,
	0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x10, 0x0e, 0x22, 0x80, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75,
	0x7a, 0x7a, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75,
	0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x67, 0x64, 0x70,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06,
	0x69, 0x73, 0x47, 0x64, 0x70, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x5a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x62, 0x65, 0x65, 0x73,
	0x77, 0x61, 0x78, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f,
	0x6c, 0x6f, 0x67, 0x73,
}

var (
	file_beeswax_logs_ad_log_proto_rawDescOnce sync.Once
	file_beeswax_logs_ad_log_proto_rawDescData = file_beeswax_logs_ad_log_proto_rawDesc
)

func file_beeswax_logs_ad_log_proto_rawDescGZIP() []byte {
	file_beeswax_logs_ad_log_proto_rawDescOnce.Do(func() {
		file_beeswax_logs_ad_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_logs_ad_log_proto_rawDescData)
	})
	return file_beeswax_logs_ad_log_proto_rawDescData
}

var file_beeswax_logs_ad_log_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beeswax_logs_ad_log_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_beeswax_logs_ad_log_proto_goTypes = []interface{}{
	(ClickLogMessage_Type)(0),               // 0: logs.ClickLogMessage.Type
	(ActivityLogMessage_Type)(0),            // 1: logs.ActivityLogMessage.Type
	(*RequestLogMessage)(nil),               // 2: logs.RequestLogMessage
	(*ImpressionLogMessage)(nil),            // 3: logs.ImpressionLogMessage
	(*ClickLogMessage)(nil),                 // 4: logs.ClickLogMessage
	(*ActivityLogMessage)(nil),              // 5: logs.ActivityLogMessage
	(*ConversionLogMessage)(nil),            // 6: logs.ConversionLogMessage
	(*AdLogMessage)(nil),                    // 7: logs.AdLogMessage
	(*base.EventId)(nil),                    // 8: base.EventId
	(openrtb.Enums_Inventory_Source)(0),     // 9: openrtb.Enums.Inventory.Source
	(*openrtb.BidRequest)(nil),              // 10: openrtb.BidRequest
	(*bid.Adcandidate)(nil),                 // 11: bid.Adcandidate
	(*bid.BidAgentResponse_AgentData)(nil),  // 12: bid.BidAgentResponse.AgentData
	(*base.AdGroupId)(nil),                  // 13: base.AdGroupId
	(*currency.CurrencyTransaction)(nil),    // 14: currency.CurrencyTransaction
	(openrtb.Enums_Inventory_DataCenter)(0), // 15: openrtb.Enums.Inventory.DataCenter
}
var file_beeswax_logs_ad_log_proto_depIdxs = []int32{
	8,  // 0: logs.RequestLogMessage.auctionid:type_name -> base.EventId
	9,  // 1: logs.RequestLogMessage.inventory_source:type_name -> openrtb.Enums.Inventory.Source
	10, // 2: logs.RequestLogMessage.bidrequest:type_name -> openrtb.BidRequest
	11, // 3: logs.RequestLogMessage.adcandidates:type_name -> bid.Adcandidate
	12, // 4: logs.RequestLogMessage.agent_data:type_name -> bid.BidAgentResponse.AgentData
	8,  // 5: logs.ImpressionLogMessage.auctionid:type_name -> base.EventId
	13, // 6: logs.ImpressionLogMessage.adgroupid:type_name -> base.AdGroupId
	9,  // 7: logs.ImpressionLogMessage.inventory_source:type_name -> openrtb.Enums.Inventory.Source
	14, // 8: logs.ImpressionLogMessage.win_price:type_name -> currency.CurrencyTransaction
	15, // 9: logs.ImpressionLogMessage.data_center:type_name -> openrtb.Enums.Inventory.DataCenter
	8,  // 10: logs.ClickLogMessage.auctionid:type_name -> base.EventId
	13, // 11: logs.ClickLogMessage.adgroupid:type_name -> base.AdGroupId
	9,  // 12: logs.ClickLogMessage.inventory_source:type_name -> openrtb.Enums.Inventory.Source
	0,  // 13: logs.ClickLogMessage.click_type:type_name -> logs.ClickLogMessage.Type
	8,  // 14: logs.ActivityLogMessage.auctionid:type_name -> base.EventId
	13, // 15: logs.ActivityLogMessage.adgroupid:type_name -> base.AdGroupId
	9,  // 16: logs.ActivityLogMessage.inventory_source:type_name -> openrtb.Enums.Inventory.Source
	1,  // 17: logs.ActivityLogMessage.type:type_name -> logs.ActivityLogMessage.Type
	2,  // 18: logs.AdLogMessage.request:type_name -> logs.RequestLogMessage
	3,  // 19: logs.AdLogMessage.impression:type_name -> logs.ImpressionLogMessage
	4,  // 20: logs.AdLogMessage.click:type_name -> logs.ClickLogMessage
	5,  // 21: logs.AdLogMessage.activity:type_name -> logs.ActivityLogMessage
	6,  // 22: logs.AdLogMessage.conversion:type_name -> logs.ConversionLogMessage
	4,  // 23: logs.AdLogMessage.clicks:type_name -> logs.ClickLogMessage
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_beeswax_logs_ad_log_proto_init() }
func file_beeswax_logs_ad_log_proto_init() {
	if File_beeswax_logs_ad_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeswax_logs_ad_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_logs_ad_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_logs_ad_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_logs_ad_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_logs_ad_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_logs_ad_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_logs_ad_log_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_logs_ad_log_proto_goTypes,
		DependencyIndexes: file_beeswax_logs_ad_log_proto_depIdxs,
		EnumInfos:         file_beeswax_logs_ad_log_proto_enumTypes,
		MessageInfos:      file_beeswax_logs_ad_log_proto_msgTypes,
	}.Build()
	File_beeswax_logs_ad_log_proto = out.File
	file_beeswax_logs_ad_log_proto_rawDesc = nil
	file_beeswax_logs_ad_log_proto_goTypes = nil
	file_beeswax_logs_ad_log_proto_depIdxs = nil
}
