// Copyright 2015, Beeswax.IO Inc.
//
// Adcandidate represents a line item (along with its attributes) that
// is eligible to serve on a given bid request.
// Stinger determines the eligible line items and creatives and generates
// the adcandidate.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/bid/adcandidate.proto

package bid

import (
	currency "beeswax/currency"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Next Tag: 8
type Bidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only one of the strategies will be present.
	CpmStrategy    *Bidding_CpmStrategy    `protobuf:"bytes,1,opt,name=cpm_strategy,json=cpmStrategy" json:"cpm_strategy,omitempty"`
	CpcStrategy    *Bidding_CpcStrategy    `protobuf:"bytes,2,opt,name=cpc_strategy,json=cpcStrategy" json:"cpc_strategy,omitempty"`
	CustomStrategy *Bidding_CustomStrategy `protobuf:"bytes,4,opt,name=custom_strategy,json=customStrategy" json:"custom_strategy,omitempty"`
	Currency       *currency.Currency_Code `protobuf:"varint,5,opt,name=currency,enum=currency.Currency_Code" json:"currency,omitempty"`
	// The product of all eligible modifiers' multipliers.
	BidModifierMultipliersProduct *float32 `protobuf:"fixed32,6,opt,name=bid_modifier_multipliers_product,json=bidModifierMultipliersProduct,def=1" json:"bid_modifier_multipliers_product,omitempty"`
	MaxBidMicros                  *uint64  `protobuf:"varint,7,opt,name=max_bid_micros,json=maxBidMicros" json:"max_bid_micros,omitempty"`
	// The following fields are for internal use by the bidding agents and
	// will not be set in the request or response.
	BidPriceMicros *uint64 `protobuf:"varint,3,opt,name=bid_price_micros,json=bidPriceMicros" json:"bid_price_micros,omitempty"`
}

// Default values for Bidding fields.
const (
	Default_Bidding_BidModifierMultipliersProduct = float32(1)
)

func (x *Bidding) Reset() {
	*x = Bidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidding) ProtoMessage() {}

func (x *Bidding) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidding.ProtoReflect.Descriptor instead.
func (*Bidding) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{0}
}

func (x *Bidding) GetCpmStrategy() *Bidding_CpmStrategy {
	if x != nil {
		return x.CpmStrategy
	}
	return nil
}

func (x *Bidding) GetCpcStrategy() *Bidding_CpcStrategy {
	if x != nil {
		return x.CpcStrategy
	}
	return nil
}

func (x *Bidding) GetCustomStrategy() *Bidding_CustomStrategy {
	if x != nil {
		return x.CustomStrategy
	}
	return nil
}

func (x *Bidding) GetCurrency() currency.Currency_Code {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return currency.Currency_UNKNOWN
}

func (x *Bidding) GetBidModifierMultipliersProduct() float32 {
	if x != nil && x.BidModifierMultipliersProduct != nil {
		return *x.BidModifierMultipliersProduct
	}
	return Default_Bidding_BidModifierMultipliersProduct
}

func (x *Bidding) GetMaxBidMicros() uint64 {
	if x != nil && x.MaxBidMicros != nil {
		return *x.MaxBidMicros
	}
	return 0
}

func (x *Bidding) GetBidPriceMicros() uint64 {
	if x != nil && x.BidPriceMicros != nil {
		return *x.BidPriceMicros
	}
	return 0
}

// Pacing determines the rate of spend of the budget for a line item.
// When pace_delivery is set to true, the bidding agent is expected to pace
// the spend of the line item uniformly over its life time.
//
// Next Tag: 2
type Pacing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaceDelivery *bool `protobuf:"varint,1,opt,name=pace_delivery,json=paceDelivery,def=0" json:"pace_delivery,omitempty"`
}

// Default values for Pacing fields.
const (
	Default_Pacing_PaceDelivery = bool(false)
)

func (x *Pacing) Reset() {
	*x = Pacing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pacing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pacing) ProtoMessage() {}

func (x *Pacing) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pacing.ProtoReflect.Descriptor instead.
func (*Pacing) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{1}
}

func (x *Pacing) GetPaceDelivery() bool {
	if x != nil && x.PaceDelivery != nil {
		return *x.PaceDelivery
	}
	return Default_Pacing_PaceDelivery
}

// FrequencyCapsInfo contains the information of a lineitem/campaign's
// frequency cap constraints and the user's impression history.
// The bidding agent will not receive adcandidates which are not
// eligible to bid when any of the lineitem/campaingn's frequency cap's
// limit is hit.
//
// Next Id: 4
type FrequencyCapsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrequencyCap []*FrequencyCapsInfo_FrequencyCap `protobuf:"bytes,1,rep,name=frequency_cap,json=frequencyCap" json:"frequency_cap,omitempty"`
	// Deprecated: Do not use.
	ImpTimestamps []uint32 `protobuf:"varint,2,rep,name=imp_timestamps,json=impTimestamps" json:"imp_timestamps,omitempty"`
	// The last rx timestamp in seconds when the ad was served for the
	// line_item/campaign and user combination in the past 30 days. It is
	// updated real-time per request. It will not be populated if the
	// line_item/campaign does not have any impression for the user in the past
	// 30 days.
	LastImpTimestamp *uint32 `protobuf:"varint,3,opt,name=last_imp_timestamp,json=lastImpTimestamp" json:"last_imp_timestamp,omitempty"`
}

func (x *FrequencyCapsInfo) Reset() {
	*x = FrequencyCapsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyCapsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyCapsInfo) ProtoMessage() {}

func (x *FrequencyCapsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyCapsInfo.ProtoReflect.Descriptor instead.
func (*FrequencyCapsInfo) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{2}
}

func (x *FrequencyCapsInfo) GetFrequencyCap() []*FrequencyCapsInfo_FrequencyCap {
	if x != nil {
		return x.FrequencyCap
	}
	return nil
}

// Deprecated: Do not use.
func (x *FrequencyCapsInfo) GetImpTimestamps() []uint32 {
	if x != nil {
		return x.ImpTimestamps
	}
	return nil
}

func (x *FrequencyCapsInfo) GetLastImpTimestamp() uint32 {
	if x != nil && x.LastImpTimestamp != nil {
		return *x.LastImpTimestamp
	}
	return 0
}

// VendorFeesInfo contains the aggregrated amount and percent of a
// lineitem/campaign's vendor fees.
// Next Id: 3
type VendorFeesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total_vendor_fees_transactions are grouped by currency.
	// vendor fees with the same currency are aggregrated into one
	// CurrencyTransaction object.
	// For example, if a lineitem/campaign has a vendor fees of 30 micros USD,
	// another of 20 micros USD, the other 40 micros GBP,
	// there will be two items in this field - one 50 micros USD,
	// the other 40 micros GBP. (CurrencyTransaction contains the real-time
	//conversion rate)
	// In rare conditions when currency conversion rate is not available,
	// total_vendor_fees_transactions.rate field will not be populated.
	TotalVendorFeesTransactions []*currency.CurrencyTransaction `protobuf:"bytes,1,rep,name=total_vendor_fees_transactions,json=totalVendorFeesTransactions" json:"total_vendor_fees_transactions,omitempty"`
	// total_fee_percent_micros is the sum of percent value in micros of all
	// percent type vendor fees.
	// For example, a line/campaign has a vendor fees at 5%, another 2%,
	// this field will be "7" in micros, i.e., 7000000
	TotalFeePercentMicros *int64 `protobuf:"varint,2,opt,name=total_fee_percent_micros,json=totalFeePercentMicros" json:"total_fee_percent_micros,omitempty"`
}

func (x *VendorFeesInfo) Reset() {
	*x = VendorFeesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorFeesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorFeesInfo) ProtoMessage() {}

func (x *VendorFeesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorFeesInfo.ProtoReflect.Descriptor instead.
func (*VendorFeesInfo) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{3}
}

func (x *VendorFeesInfo) GetTotalVendorFeesTransactions() []*currency.CurrencyTransaction {
	if x != nil {
		return x.TotalVendorFeesTransactions
	}
	return nil
}

func (x *VendorFeesInfo) GetTotalFeePercentMicros() int64 {
	if x != nil && x.TotalFeePercentMicros != nil {
		return *x.TotalFeePercentMicros
	}
	return 0
}

// Adcandidate represents an eligible line item and its attributes.
// Stinger determines the eligible line items for a given request.
//
// Next Tag: 14
type Adcandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineItemId            *uint64  `protobuf:"varint,1,opt,name=line_item_id,json=lineItemId" json:"line_item_id,omitempty"`
	CampaignId            *uint64  `protobuf:"varint,5,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	AccountId             *uint64  `protobuf:"varint,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AdvertiserId          *uint64  `protobuf:"varint,8,opt,name=advertiser_id,json=advertiserId" json:"advertiser_id,omitempty"`
	LineItemAlternativeId *string  `protobuf:"bytes,9,opt,name=line_item_alternative_id,json=lineItemAlternativeId" json:"line_item_alternative_id,omitempty"`
	BuzzKey               *string  `protobuf:"bytes,7,opt,name=buzz_key,json=buzzKey" json:"buzz_key,omitempty"`
	CreativeIds           []uint64 `protobuf:"varint,2,rep,name=creative_ids,json=creativeIds" json:"creative_ids,omitempty"`
	Bidding               *Bidding `protobuf:"bytes,3,opt,name=bidding" json:"bidding,omitempty"`
	Pacing                *Pacing  `protobuf:"bytes,4,opt,name=pacing" json:"pacing,omitempty"`
	// This field wil be empty if the line_item does not have any frequency
	// cap associated with it.
	LineItemFrequencyCapsInfo *FrequencyCapsInfo `protobuf:"bytes,10,opt,name=line_item_frequency_caps_info,json=lineItemFrequencyCapsInfo" json:"line_item_frequency_caps_info,omitempty"`
	// This field wil be empty if the campaign does not have any frequency
	// cap associated with it.
	CampaignFrequencyCapsInfo *FrequencyCapsInfo `protobuf:"bytes,11,opt,name=campaign_frequency_caps_info,json=campaignFrequencyCapsInfo" json:"campaign_frequency_caps_info,omitempty"`
	LineItemVendorFeesInfo    *VendorFeesInfo    `protobuf:"bytes,12,opt,name=line_item_vendor_fees_info,json=lineItemVendorFeesInfo" json:"line_item_vendor_fees_info,omitempty"`
	CampaignVendorFeesInfo    *VendorFeesInfo    `protobuf:"bytes,13,opt,name=campaign_vendor_fees_info,json=campaignVendorFeesInfo" json:"campaign_vendor_fees_info,omitempty"`
}

func (x *Adcandidate) Reset() {
	*x = Adcandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adcandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adcandidate) ProtoMessage() {}

func (x *Adcandidate) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adcandidate.ProtoReflect.Descriptor instead.
func (*Adcandidate) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{4}
}

func (x *Adcandidate) GetLineItemId() uint64 {
	if x != nil && x.LineItemId != nil {
		return *x.LineItemId
	}
	return 0
}

func (x *Adcandidate) GetCampaignId() uint64 {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return 0
}

func (x *Adcandidate) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *Adcandidate) GetAdvertiserId() uint64 {
	if x != nil && x.AdvertiserId != nil {
		return *x.AdvertiserId
	}
	return 0
}

func (x *Adcandidate) GetLineItemAlternativeId() string {
	if x != nil && x.LineItemAlternativeId != nil {
		return *x.LineItemAlternativeId
	}
	return ""
}

func (x *Adcandidate) GetBuzzKey() string {
	if x != nil && x.BuzzKey != nil {
		return *x.BuzzKey
	}
	return ""
}

func (x *Adcandidate) GetCreativeIds() []uint64 {
	if x != nil {
		return x.CreativeIds
	}
	return nil
}

func (x *Adcandidate) GetBidding() *Bidding {
	if x != nil {
		return x.Bidding
	}
	return nil
}

func (x *Adcandidate) GetPacing() *Pacing {
	if x != nil {
		return x.Pacing
	}
	return nil
}

func (x *Adcandidate) GetLineItemFrequencyCapsInfo() *FrequencyCapsInfo {
	if x != nil {
		return x.LineItemFrequencyCapsInfo
	}
	return nil
}

func (x *Adcandidate) GetCampaignFrequencyCapsInfo() *FrequencyCapsInfo {
	if x != nil {
		return x.CampaignFrequencyCapsInfo
	}
	return nil
}

func (x *Adcandidate) GetLineItemVendorFeesInfo() *VendorFeesInfo {
	if x != nil {
		return x.LineItemVendorFeesInfo
	}
	return nil
}

func (x *Adcandidate) GetCampaignVendorFeesInfo() *VendorFeesInfo {
	if x != nil {
		return x.CampaignVendorFeesInfo
	}
	return nil
}

// CPM: Always bid a flat price on all matched requests.
type Bidding_CpmStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatBidMicros *uint64 `protobuf:"varint,1,opt,name=flat_bid_micros,json=flatBidMicros" json:"flat_bid_micros,omitempty"`
}

func (x *Bidding_CpmStrategy) Reset() {
	*x = Bidding_CpmStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bidding_CpmStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidding_CpmStrategy) ProtoMessage() {}

func (x *Bidding_CpmStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidding_CpmStrategy.ProtoReflect.Descriptor instead.
func (*Bidding_CpmStrategy) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Bidding_CpmStrategy) GetFlatBidMicros() uint64 {
	if x != nil && x.FlatBidMicros != nil {
		return *x.FlatBidMicros
	}
	return 0
}

// CPC: Optimize towards a cost per click goal.
type Bidding_CpcStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, use Bidding.max_bid_micros instead.
	//
	// Deprecated: Do not use.
	MaxBidMicros     *uint64 `protobuf:"varint,1,opt,name=max_bid_micros,json=maxBidMicros" json:"max_bid_micros,omitempty"`
	EcpcTargetMicros *uint64 `protobuf:"varint,2,opt,name=ecpc_target_micros,json=ecpcTargetMicros" json:"ecpc_target_micros,omitempty"`
}

func (x *Bidding_CpcStrategy) Reset() {
	*x = Bidding_CpcStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bidding_CpcStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidding_CpcStrategy) ProtoMessage() {}

func (x *Bidding_CpcStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidding_CpcStrategy.ProtoReflect.Descriptor instead.
func (*Bidding_CpcStrategy) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{0, 1}
}

// Deprecated: Do not use.
func (x *Bidding_CpcStrategy) GetMaxBidMicros() uint64 {
	if x != nil && x.MaxBidMicros != nil {
		return *x.MaxBidMicros
	}
	return 0
}

func (x *Bidding_CpcStrategy) GetEcpcTargetMicros() uint64 {
	if x != nil && x.EcpcTargetMicros != nil {
		return *x.EcpcTargetMicros
	}
	return 0
}

// Custom strategy is defined using Buzz API.
// Customers can define many different strategies and identify them using
// a name.
// Further, customers can associate multiple key, values with a strategy
// that are made available in the matching Adcandidate.
// Customers can use the key,values to implement their own optimization.
type Bidding_CustomStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string                          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CustomParams []*Bidding_CustomStrategy_Params `protobuf:"bytes,2,rep,name=custom_params,json=customParams" json:"custom_params,omitempty"`
}

func (x *Bidding_CustomStrategy) Reset() {
	*x = Bidding_CustomStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bidding_CustomStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidding_CustomStrategy) ProtoMessage() {}

func (x *Bidding_CustomStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidding_CustomStrategy.ProtoReflect.Descriptor instead.
func (*Bidding_CustomStrategy) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Bidding_CustomStrategy) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Bidding_CustomStrategy) GetCustomParams() []*Bidding_CustomStrategy_Params {
	if x != nil {
		return x.CustomParams
	}
	return nil
}

type Bidding_CustomStrategy_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Bidding_CustomStrategy_Params) Reset() {
	*x = Bidding_CustomStrategy_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bidding_CustomStrategy_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidding_CustomStrategy_Params) ProtoMessage() {}

func (x *Bidding_CustomStrategy_Params) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidding_CustomStrategy_Params.ProtoReflect.Descriptor instead.
func (*Bidding_CustomStrategy_Params) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Bidding_CustomStrategy_Params) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Bidding_CustomStrategy_Params) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// FrequencyCap contains the frequency constraints for a given user to not
// view the ad more than `max_impressions` times within a duration of
// `duration_seconds`, and the actual impression counts within the duration
// for the user as in `current_impression_count`.
// `max_impressions` and `duration_seconds` are defined using Buzz API, and
// `current_impression_count` is populated real-time per request.
// E.g. If a line item specifies hourly frequency cap
// constraints of 10 impression/user, and it has had impressions for the
// past hour, the value will be
// {max_impressions = 10, duration_secs = 3600, current_impression_count = 2}.
//
//
// Next Id: 4
type FrequencyCapsInfo_FrequencyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allowed number of impressions in the duration .
	MaxImpressions *uint32 `protobuf:"varint,1,opt,name=max_impressions,json=maxImpressions" json:"max_impressions,omitempty"`
	// The duration (in second) in which max_impressions should not be exceeded.
	DurationSeconds *uint32 `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	// Actual impression numbers served in the duration.
	CurrentImpressionCount *uint32 `protobuf:"varint,3,opt,name=current_impression_count,json=currentImpressionCount" json:"current_impression_count,omitempty"`
}

func (x *FrequencyCapsInfo_FrequencyCap) Reset() {
	*x = FrequencyCapsInfo_FrequencyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_bid_adcandidate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyCapsInfo_FrequencyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyCapsInfo_FrequencyCap) ProtoMessage() {}

func (x *FrequencyCapsInfo_FrequencyCap) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_bid_adcandidate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyCapsInfo_FrequencyCap.ProtoReflect.Descriptor instead.
func (*FrequencyCapsInfo_FrequencyCap) Descriptor() ([]byte, []int) {
	return file_beeswax_bid_adcandidate_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FrequencyCapsInfo_FrequencyCap) GetMaxImpressions() uint32 {
	if x != nil && x.MaxImpressions != nil {
		return *x.MaxImpressions
	}
	return 0
}

func (x *FrequencyCapsInfo_FrequencyCap) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *FrequencyCapsInfo_FrequencyCap) GetCurrentImpressionCount() uint32 {
	if x != nil && x.CurrentImpressionCount != nil {
		return *x.CurrentImpressionCount
	}
	return 0
}

var File_beeswax_bid_adcandidate_proto protoreflect.FileDescriptor

var file_beeswax_bid_adcandidate_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x62, 0x69, 0x64, 0x2f, 0x61, 0x64,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x62, 0x69, 0x64, 0x1a, 0x1f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x05, 0x0a, 0x07, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x70, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x42, 0x69,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0b, 0x63, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x70, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0b,
	0x63, 0x70, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x20, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x3a, 0x01, 0x31, 0x52, 0x1d, 0x62, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42,
	0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x1a, 0x35, 0x0a, 0x0b, 0x43, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x74,
	0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x1a, 0x65, 0x0a, 0x0b, 0x43, 0x70, 0x63,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x63, 0x70, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x65, 0x63, 0x70, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x1a, 0x9f, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x30, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x34, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0d,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0xd5, 0x02, 0x0a, 0x11, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48,
	0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x9c, 0x01, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x61, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xad, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x62, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x22, 0xac, 0x05, 0x0a, 0x0b, 0x41, 0x64, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x7a, 0x7a, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x7a, 0x7a, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x07, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x50, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x1d, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x1c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69,
	0x64, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x19, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f,
	0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4e, 0x0a, 0x19, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x64, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2e, 0x62,
	0x69, 0x64,
}

var (
	file_beeswax_bid_adcandidate_proto_rawDescOnce sync.Once
	file_beeswax_bid_adcandidate_proto_rawDescData = file_beeswax_bid_adcandidate_proto_rawDesc
)

func file_beeswax_bid_adcandidate_proto_rawDescGZIP() []byte {
	file_beeswax_bid_adcandidate_proto_rawDescOnce.Do(func() {
		file_beeswax_bid_adcandidate_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_bid_adcandidate_proto_rawDescData)
	})
	return file_beeswax_bid_adcandidate_proto_rawDescData
}

var file_beeswax_bid_adcandidate_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_beeswax_bid_adcandidate_proto_goTypes = []interface{}{
	(*Bidding)(nil),                        // 0: bid.Bidding
	(*Pacing)(nil),                         // 1: bid.Pacing
	(*FrequencyCapsInfo)(nil),              // 2: bid.FrequencyCapsInfo
	(*VendorFeesInfo)(nil),                 // 3: bid.VendorFeesInfo
	(*Adcandidate)(nil),                    // 4: bid.Adcandidate
	(*Bidding_CpmStrategy)(nil),            // 5: bid.Bidding.CpmStrategy
	(*Bidding_CpcStrategy)(nil),            // 6: bid.Bidding.CpcStrategy
	(*Bidding_CustomStrategy)(nil),         // 7: bid.Bidding.CustomStrategy
	(*Bidding_CustomStrategy_Params)(nil),  // 8: bid.Bidding.CustomStrategy.Params
	(*FrequencyCapsInfo_FrequencyCap)(nil), // 9: bid.FrequencyCapsInfo.FrequencyCap
	(currency.Currency_Code)(0),            // 10: currency.Currency.Code
	(*currency.CurrencyTransaction)(nil),   // 11: currency.CurrencyTransaction
}
var file_beeswax_bid_adcandidate_proto_depIdxs = []int32{
	5,  // 0: bid.Bidding.cpm_strategy:type_name -> bid.Bidding.CpmStrategy
	6,  // 1: bid.Bidding.cpc_strategy:type_name -> bid.Bidding.CpcStrategy
	7,  // 2: bid.Bidding.custom_strategy:type_name -> bid.Bidding.CustomStrategy
	10, // 3: bid.Bidding.currency:type_name -> currency.Currency.Code
	9,  // 4: bid.FrequencyCapsInfo.frequency_cap:type_name -> bid.FrequencyCapsInfo.FrequencyCap
	11, // 5: bid.VendorFeesInfo.total_vendor_fees_transactions:type_name -> currency.CurrencyTransaction
	0,  // 6: bid.Adcandidate.bidding:type_name -> bid.Bidding
	1,  // 7: bid.Adcandidate.pacing:type_name -> bid.Pacing
	2,  // 8: bid.Adcandidate.line_item_frequency_caps_info:type_name -> bid.FrequencyCapsInfo
	2,  // 9: bid.Adcandidate.campaign_frequency_caps_info:type_name -> bid.FrequencyCapsInfo
	3,  // 10: bid.Adcandidate.line_item_vendor_fees_info:type_name -> bid.VendorFeesInfo
	3,  // 11: bid.Adcandidate.campaign_vendor_fees_info:type_name -> bid.VendorFeesInfo
	8,  // 12: bid.Bidding.CustomStrategy.custom_params:type_name -> bid.Bidding.CustomStrategy.Params
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_beeswax_bid_adcandidate_proto_init() }
func file_beeswax_bid_adcandidate_proto_init() {
	if File_beeswax_bid_adcandidate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeswax_bid_adcandidate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pacing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyCapsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorFeesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adcandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bidding_CpmStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bidding_CpcStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bidding_CustomStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bidding_CustomStrategy_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_bid_adcandidate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyCapsInfo_FrequencyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_bid_adcandidate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_bid_adcandidate_proto_goTypes,
		DependencyIndexes: file_beeswax_bid_adcandidate_proto_depIdxs,
		MessageInfos:      file_beeswax_bid_adcandidate_proto_msgTypes,
	}.Build()
	File_beeswax_bid_adcandidate_proto = out.File
	file_beeswax_bid_adcandidate_proto_rawDesc = nil
	file_beeswax_bid_adcandidate_proto_goTypes = nil
	file_beeswax_bid_adcandidate_proto_depIdxs = nil
}
