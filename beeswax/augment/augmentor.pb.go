// Copyright 2016, Beeswax.IO Inc.
//
// Beeswax augmentor API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: beeswax/augment/augmentor.proto

package augment

import (
	openrtb "beeswax/openrtb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Stinger will issue a HTTP request to the augmentor.
// The following message will be present in the body of the HTTP request.
// Next id: 2
type AugmentorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bid request received from the exchange after it has been processed by Beeswax.
	BidRequest *openrtb.BidRequest `protobuf:"bytes,1,opt,name=bid_request,json=bidRequest" json:"bid_request,omitempty"`
}

func (x *AugmentorRequest) Reset() {
	*x = AugmentorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_augment_augmentor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AugmentorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AugmentorRequest) ProtoMessage() {}

func (x *AugmentorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_augment_augmentor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AugmentorRequest.ProtoReflect.Descriptor instead.
func (*AugmentorRequest) Descriptor() ([]byte, []int) {
	return file_beeswax_augment_augmentor_proto_rawDescGZIP(), []int{0}
}

func (x *AugmentorRequest) GetBidRequest() *openrtb.BidRequest {
	if x != nil {
		return x.BidRequest
	}
	return nil
}

// Augmentor will respond to Stinger with a HTTP response.
// The following message will be present in the body of the HTTP response.
// Augmentor can choose not to bid at all in which case it must still
// respond to the HTTP request with a 204 status code.
//
// Also custom bidding agents can receive this data through the data field in
// the BidRequest.User.Data
// Next id: 3
type AugmentorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of Augmentor segments
	Segments      []*AugmentorResponse_Segment `protobuf:"bytes,1,rep,name=segments" json:"segments,omitempty"`
	DynamicMacros []*AugmentorResponse_Macro   `protobuf:"bytes,2,rep,name=dynamic_macros,json=dynamicMacros" json:"dynamic_macros,omitempty"`
}

func (x *AugmentorResponse) Reset() {
	*x = AugmentorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_augment_augmentor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AugmentorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AugmentorResponse) ProtoMessage() {}

func (x *AugmentorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_augment_augmentor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AugmentorResponse.ProtoReflect.Descriptor instead.
func (*AugmentorResponse) Descriptor() ([]byte, []int) {
	return file_beeswax_augment_augmentor_proto_rawDescGZIP(), []int{1}
}

func (x *AugmentorResponse) GetSegments() []*AugmentorResponse_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *AugmentorResponse) GetDynamicMacros() []*AugmentorResponse_Macro {
	if x != nil {
		return x.DynamicMacros
	}
	return nil
}

// Next id: 4
type AugmentorResponse_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Id of an augmentor segment.
	// This field is primarily used for line item targeting.
	// For targeting to work with the segment ids, it is necessary
	// to register the segment ids with Beeswax via the Buzz Segments API.
	// The segments should have the format "BUZZKEY-SEGMENT_ID". So if the segment
	// is 8 and the customer's buzz_key is "beeswax", the id field should be set to
	// "beeswax-8".
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// This field can be used to pass additional information about the segment
	// that Stinger will forward to the bidding agent.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// This field is ONLY used for bid modifiers as a dynamic mulitplier. If
	// the segment is present in the request, the multiplier will be applied to
	// the bid price. A valid range of multipliers should be between 0 and 10
	// and invalid ones will be ignored.
	Multiplier *float32 `protobuf:"fixed32,3,opt,name=multiplier" json:"multiplier,omitempty"`
}

func (x *AugmentorResponse_Segment) Reset() {
	*x = AugmentorResponse_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_augment_augmentor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AugmentorResponse_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AugmentorResponse_Segment) ProtoMessage() {}

func (x *AugmentorResponse_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_augment_augmentor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AugmentorResponse_Segment.ProtoReflect.Descriptor instead.
func (*AugmentorResponse_Segment) Descriptor() ([]byte, []int) {
	return file_beeswax_augment_augmentor_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AugmentorResponse_Segment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AugmentorResponse_Segment) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AugmentorResponse_Segment) GetMultiplier() float32 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

// The creative's macros {{DYNAMIC:<name>:STRING}} in the value of a
// creative content or creative template, will be replaced with the
// content of `value`.
// For example, if name = "foo", value = "bar", the macro
// {{DYNAMIC:FOO:STRING}} will be replaced with "bar".
//
// Please note the following constraints:
// (1) Macro values sent via the custom augmentor will apply to whatever
// creative matches to the request. In other words, they are not specific
// to a particular creative or line item.
// (2) Macro name is case-insensitive. (if name = "foo",
// the macro {{DYNAMIC:FOO:STRING}} will still be replaced)
// (3) For a macro to be expanded as an empty string, you should
// explicitly set the macro name in the `name` field, and leave the
// `value` feild empty; Dynamic macros in creatives that does
// not have a match from the `name` field here will not be expanded.
// (4) If a dynamic macro was not expanded, a string of {{DY:<name>}}
// (instead of {{DYNAMIC:<name>:STRING}}) will be placed at where the
// {{DYNAMIC:<name>:STRING}} macro was placed.
// (5) Values of dynamic macros cannot contain other Beeswax macros,
// (including other dynamic macros), as the contained macros will
// not be expanded.
// (6) If the macro is part of a url, the value shold be url-safe
// (e.g, by escaping). Note that click_url is properly escaped as a whole,
// so if the macro is in click_url, its value does not need to
// have extra escaping; url-safe is enough.
// Next id: 3
type AugmentorResponse_Macro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *AugmentorResponse_Macro) Reset() {
	*x = AugmentorResponse_Macro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeswax_augment_augmentor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AugmentorResponse_Macro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AugmentorResponse_Macro) ProtoMessage() {}

func (x *AugmentorResponse_Macro) ProtoReflect() protoreflect.Message {
	mi := &file_beeswax_augment_augmentor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AugmentorResponse_Macro.ProtoReflect.Descriptor instead.
func (*AugmentorResponse_Macro) Descriptor() ([]byte, []int) {
	return file_beeswax_augment_augmentor_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AugmentorResponse_Macro) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AugmentorResponse_Macro) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_beeswax_augment_augmentor_proto protoreflect.FileDescriptor

var file_beeswax_augment_augmentor_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x65, 0x65, 0x73, 0x77, 0x61, 0x78, 0x2f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x62, 0x65, 0x65, 0x73,
	0x77, 0x61, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x75, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x0b, 0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x63, 0x72, 0x6f, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x61, 0x63, 0x72,
	0x6f, 0x73, 0x1a, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x1a, 0x31, 0x0a, 0x05, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65,
	0x65, 0x73, 0x77, 0x61, 0x78, 0x2e, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0xf8, 0x01, 0x01,
}

var (
	file_beeswax_augment_augmentor_proto_rawDescOnce sync.Once
	file_beeswax_augment_augmentor_proto_rawDescData = file_beeswax_augment_augmentor_proto_rawDesc
)

func file_beeswax_augment_augmentor_proto_rawDescGZIP() []byte {
	file_beeswax_augment_augmentor_proto_rawDescOnce.Do(func() {
		file_beeswax_augment_augmentor_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeswax_augment_augmentor_proto_rawDescData)
	})
	return file_beeswax_augment_augmentor_proto_rawDescData
}

var file_beeswax_augment_augmentor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_beeswax_augment_augmentor_proto_goTypes = []interface{}{
	(*AugmentorRequest)(nil),          // 0: augment.AugmentorRequest
	(*AugmentorResponse)(nil),         // 1: augment.AugmentorResponse
	(*AugmentorResponse_Segment)(nil), // 2: augment.AugmentorResponse.Segment
	(*AugmentorResponse_Macro)(nil),   // 3: augment.AugmentorResponse.Macro
	(*openrtb.BidRequest)(nil),        // 4: openrtb.BidRequest
}
var file_beeswax_augment_augmentor_proto_depIdxs = []int32{
	4, // 0: augment.AugmentorRequest.bid_request:type_name -> openrtb.BidRequest
	2, // 1: augment.AugmentorResponse.segments:type_name -> augment.AugmentorResponse.Segment
	3, // 2: augment.AugmentorResponse.dynamic_macros:type_name -> augment.AugmentorResponse.Macro
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_beeswax_augment_augmentor_proto_init() }
func file_beeswax_augment_augmentor_proto_init() {
	if File_beeswax_augment_augmentor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeswax_augment_augmentor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AugmentorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_augment_augmentor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AugmentorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_augment_augmentor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AugmentorResponse_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeswax_augment_augmentor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AugmentorResponse_Macro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeswax_augment_augmentor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beeswax_augment_augmentor_proto_goTypes,
		DependencyIndexes: file_beeswax_augment_augmentor_proto_depIdxs,
		MessageInfos:      file_beeswax_augment_augmentor_proto_msgTypes,
	}.Build()
	File_beeswax_augment_augmentor_proto = out.File
	file_beeswax_augment_augmentor_proto_rawDesc = nil
	file_beeswax_augment_augmentor_proto_goTypes = nil
	file_beeswax_augment_augmentor_proto_depIdxs = nil
}
